
LED Table V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000735c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007518  08007518  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007520  08007520  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000098  080075c0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  080075c0  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e39  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b9  00000000  00000000  00037f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017caa  00000000  00000000  0003d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142ca  00000000  00000000  00054f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a3c  00000000  00000000  0006925c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcc98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  000fccec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000098 	.word	0x20000098
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080074d8 	.word	0x080074d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000009c 	.word	0x2000009c
 80001d0:	080074d8 	.word	0x080074d8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004de:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <MX_ADC1_Init+0xec>)
 80004e0:	4a36      	ldr	r2, [pc, #216]	; (80005bc <MX_ADC1_Init+0xf0>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <MX_ADC1_Init+0xec>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_ADC1_Init+0xec>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f0:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <MX_ADC1_Init+0xec>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_ADC1_Init+0xec>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <MX_ADC1_Init+0xec>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_ADC1_Init+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_ADC1_Init+0xec>)
 800050c:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <MX_ADC1_Init+0xf4>)
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_ADC1_Init+0xec>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_ADC1_Init+0xec>)
 8000518:	2204      	movs	r2, #4
 800051a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_ADC1_Init+0xec>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC1_Init+0xec>)
 8000526:	2201      	movs	r2, #1
 8000528:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <MX_ADC1_Init+0xec>)
 800052c:	f003 fa8e 	bl	8003a4c <HAL_ADC_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000536:	f002 fce2 	bl	8002efe <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800053a:	2308      	movs	r3, #8
 800053c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053e:	2301      	movs	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	481b      	ldr	r0, [pc, #108]	; (80005b8 <MX_ADC1_Init+0xec>)
 800054c:	f003 fbf4 	bl	8003d38 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000556:	f002 fcd2 	bl	8002efe <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800055a:	2305      	movs	r3, #5
 800055c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4814      	ldr	r0, [pc, #80]	; (80005b8 <MX_ADC1_Init+0xec>)
 8000568:	f003 fbe6 	bl	8003d38 <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000572:	f002 fcc4 	bl	8002efe <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000576:	2306      	movs	r3, #6
 8000578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800057a:	2303      	movs	r3, #3
 800057c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <MX_ADC1_Init+0xec>)
 8000584:	f003 fbd8 	bl	8003d38 <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800058e:	f002 fcb6 	bl	8002efe <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000592:	2301      	movs	r3, #1
 8000594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000596:	2304      	movs	r3, #4
 8000598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <MX_ADC1_Init+0xec>)
 80005a0:	f003 fbca 	bl	8003d38 <HAL_ADC_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005aa:	f002 fca8 	bl	8002efe <Error_Handler>
  }

}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000080c 	.word	0x2000080c
 80005bc:	40012000 	.word	0x40012000
 80005c0:	0f000001 	.word	0x0f000001

080005c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <HAL_ADC_MspInit+0x110>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d171      	bne.n	80006ca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ee:	4a3a      	ldr	r2, [pc, #232]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6453      	str	r3, [r2, #68]	; 0x44
 80005f6:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <HAL_ADC_MspInit+0x114>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = A4_Pin|A2_Pin|A3_Pin;
 800063a:	2362      	movs	r3, #98	; 0x62
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063e:	2303      	movs	r3, #3
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <HAL_ADC_MspInit+0x118>)
 800064e:	f004 fb33 	bl	8004cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A1_Pin;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A1_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	481e      	ldr	r0, [pc, #120]	; (80006e0 <HAL_ADC_MspInit+0x11c>)
 8000666:	f004 fb27 	bl	8004cb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 800066c:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <HAL_ADC_MspInit+0x124>)
 800066e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 8000684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000688:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 800068c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000690:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 8000694:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000698:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 80006b0:	f003 fec4 	bl	800443c <HAL_DMA_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006ba:	f002 fc20 	bl	8002efe <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_ADC_MspInit+0x120>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400
 80006e4:	20000854 	.word	0x20000854
 80006e8:	40026410 	.word	0x40026410

080006ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_DMA_Init+0x78>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <MX_DMA_Init+0x78>)
 80006fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_DMA_Init+0x78>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_DMA_Init+0x78>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <MX_DMA_Init+0x78>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_DMA_Init+0x78>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2010      	movs	r0, #16
 8000730:	f003 fe5a 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000734:	2010      	movs	r0, #16
 8000736:	f003 fe73 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2105      	movs	r1, #5
 800073e:	2038      	movs	r0, #56	; 0x38
 8000740:	f003 fe52 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000744:	2038      	movs	r0, #56	; 0x38
 8000746:	f003 fe6b 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	203b      	movs	r0, #59	; 0x3b
 8000750:	f003 fe4a 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000754:	203b      	movs	r0, #59	; 0x3b
 8000756:	f003 fe63 	bl	8004420 <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b6d      	ldr	r3, [pc, #436]	; (8000938 <MX_GPIO_Init+0x1d0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a6c      	ldr	r2, [pc, #432]	; (8000938 <MX_GPIO_Init+0x1d0>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b6a      	ldr	r3, [pc, #424]	; (8000938 <MX_GPIO_Init+0x1d0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b66      	ldr	r3, [pc, #408]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a65      	ldr	r2, [pc, #404]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b63      	ldr	r3, [pc, #396]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b5f      	ldr	r3, [pc, #380]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a5e      	ldr	r2, [pc, #376]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b58      	ldr	r3, [pc, #352]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a57      	ldr	r2, [pc, #348]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b55      	ldr	r3, [pc, #340]	; (8000938 <MX_GPIO_Init+0x1d0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX4_Pin|RX3_Pin|POWER3_Pin|POWER4_Pin 
 80007ee:	2200      	movs	r2, #0
 80007f0:	f649 3190 	movw	r1, #39824	; 0x9b90
 80007f4:	4851      	ldr	r0, [pc, #324]	; (800093c <MX_GPIO_Init+0x1d4>)
 80007f6:	f004 fcc7 	bl	8005188 <HAL_GPIO_WritePin>
                          |LED4_Pin|RX2_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HM_RST___LED_ON_Pin|LED1_Pin|RX1_Pin|LED3_Pin 
 80007fa:	2200      	movs	r2, #0
 80007fc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000800:	484f      	ldr	r0, [pc, #316]	; (8000940 <MX_GPIO_Init+0x1d8>)
 8000802:	f004 fcc1 	bl	8005188 <HAL_GPIO_WritePin>
                          |POWER2_Pin|POWER1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UP_CS_GPIO_Port, UP_CS_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	484b      	ldr	r0, [pc, #300]	; (800093c <MX_GPIO_Init+0x1d4>)
 800080e:	f004 fcbb 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000812:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000818:	2303      	movs	r3, #3
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1dc>)
 8000828:	f004 fa46 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800082c:	2303      	movs	r3, #3
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4842      	ldr	r0, [pc, #264]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000840:	f004 fa3a 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HM_STATUS_Pin;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000848:	4b40      	ldr	r3, [pc, #256]	; (800094c <MX_GPIO_Init+0x1e4>)
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HM_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <MX_GPIO_Init+0x1d4>)
 8000858:	f004 fa2e 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RX4_Pin|RX3_Pin|POWER3_Pin|POWER4_Pin 
 800085c:	f649 3390 	movw	r3, #39824	; 0x9b90
 8000860:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|RX2_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4831      	ldr	r0, [pc, #196]	; (800093c <MX_GPIO_Init+0x1d4>)
 8000876:	f004 fa1f 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_CS_Pin|DOWN_CS_Pin|RIGHT_CS_Pin;
 800087a:	f240 4306 	movw	r3, #1030	; 0x406
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000880:	4b33      	ldr	r3, [pc, #204]	; (8000950 <MX_GPIO_Init+0x1e8>)
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_GPIO_Init+0x1d8>)
 8000890:	f004 fa12 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HM_RST___LED_ON_Pin;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HM_RST___LED_ON_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4824      	ldr	r0, [pc, #144]	; (8000940 <MX_GPIO_Init+0x1d8>)
 80008ae:	f004 fa03 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UP_CS_Pin;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UP_CS_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	481c      	ldr	r0, [pc, #112]	; (800093c <MX_GPIO_Init+0x1d4>)
 80008cc:	f004 f9f4 	bl	8004cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|RX1_Pin|LED3_Pin|POWER2_Pin 
 80008d0:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 80008d4:	617b      	str	r3, [r7, #20]
                          |POWER1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <MX_GPIO_Init+0x1d8>)
 80008ea:	f004 f9e5 	bl	8004cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	2006      	movs	r0, #6
 80008f4:	f003 fd78 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f003 fd91 	bl	8004420 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2106      	movs	r1, #6
 8000902:	2007      	movs	r0, #7
 8000904:	f003 fd70 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000908:	2007      	movs	r0, #7
 800090a:	f003 fd89 	bl	8004420 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2107      	movs	r1, #7
 8000912:	2008      	movs	r0, #8
 8000914:	f003 fd68 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000918:	2008      	movs	r0, #8
 800091a:	f003 fd81 	bl	8004420 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f003 fd60 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000928:	2028      	movs	r0, #40	; 0x28
 800092a:	f003 fd79 	bl	8004420 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40021c00 	.word	0x40021c00
 800094c:	10310000 	.word	0x10310000
 8000950:	10210000 	.word	0x10210000

08000954 <read_ir_sensor>:
};

uint8_t panel_brightness = 0;


void read_ir_sensor(uint8_t x, uint8_t y, uint16_t values[4][4]){
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	603a      	str	r2, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	460b      	mov	r3, r1
 8000962:	71bb      	strb	r3, [r7, #6]

	uint32_t ava[4];

	//Set appropriate I/0 to activate selected sensor

	switch(y){
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2b03      	cmp	r3, #3
 8000968:	f200 80d0 	bhi.w	8000b0c <read_ir_sensor+0x1b8>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <read_ir_sensor+0x20>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000985 	.word	0x08000985
 8000978:	080009e7 	.word	0x080009e7
 800097c:	08000a49 	.word	0x08000a49
 8000980:	08000aab 	.word	0x08000aab

		case 0: RX1_ON();
 8000984:	4b97      	ldr	r3, [pc, #604]	; (8000be4 <read_ir_sensor+0x290>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a96      	ldr	r2, [pc, #600]	; (8000be4 <read_ir_sensor+0x290>)
 800098a:	f023 0310 	bic.w	r3, r3, #16
 800098e:	6153      	str	r3, [r2, #20]
				RX2_OFF();
 8000990:	4b94      	ldr	r3, [pc, #592]	; (8000be4 <read_ir_sensor+0x290>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a93      	ldr	r2, [pc, #588]	; (8000be4 <read_ir_sensor+0x290>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6153      	str	r3, [r2, #20]
				RX3_OFF();
 800099c:	4b91      	ldr	r3, [pc, #580]	; (8000be4 <read_ir_sensor+0x290>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a90      	ldr	r2, [pc, #576]	; (8000be4 <read_ir_sensor+0x290>)
 80009a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a6:	6153      	str	r3, [r2, #20]
				RX4_OFF();
 80009a8:	4b8f      	ldr	r3, [pc, #572]	; (8000be8 <read_ir_sensor+0x294>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a8e      	ldr	r2, [pc, #568]	; (8000be8 <read_ir_sensor+0x294>)
 80009ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b2:	6153      	str	r3, [r2, #20]

				LED1_OFF();
 80009b4:	4b8b      	ldr	r3, [pc, #556]	; (8000be4 <read_ir_sensor+0x290>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a8a      	ldr	r2, [pc, #552]	; (8000be4 <read_ir_sensor+0x290>)
 80009ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009be:	6153      	str	r3, [r2, #20]
				LED2_OFF();
 80009c0:	4b89      	ldr	r3, [pc, #548]	; (8000be8 <read_ir_sensor+0x294>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4a88      	ldr	r2, [pc, #544]	; (8000be8 <read_ir_sensor+0x294>)
 80009c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ca:	6153      	str	r3, [r2, #20]
				LED3_OFF();
 80009cc:	4b85      	ldr	r3, [pc, #532]	; (8000be4 <read_ir_sensor+0x290>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a84      	ldr	r2, [pc, #528]	; (8000be4 <read_ir_sensor+0x290>)
 80009d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d6:	6153      	str	r3, [r2, #20]
				LED4_OFF();
 80009d8:	4b83      	ldr	r3, [pc, #524]	; (8000be8 <read_ir_sensor+0x294>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a82      	ldr	r2, [pc, #520]	; (8000be8 <read_ir_sensor+0x294>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6153      	str	r3, [r2, #20]
			break;
 80009e4:	e093      	b.n	8000b0e <read_ir_sensor+0x1ba>

		case 1:	RX1_OFF();
 80009e6:	4b7f      	ldr	r3, [pc, #508]	; (8000be4 <read_ir_sensor+0x290>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a7e      	ldr	r2, [pc, #504]	; (8000be4 <read_ir_sensor+0x290>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6153      	str	r3, [r2, #20]
				RX2_ON();
 80009f2:	4b7c      	ldr	r3, [pc, #496]	; (8000be4 <read_ir_sensor+0x290>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a7b      	ldr	r2, [pc, #492]	; (8000be4 <read_ir_sensor+0x290>)
 80009f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009fc:	6153      	str	r3, [r2, #20]
				RX3_OFF();
 80009fe:	4b79      	ldr	r3, [pc, #484]	; (8000be4 <read_ir_sensor+0x290>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a78      	ldr	r2, [pc, #480]	; (8000be4 <read_ir_sensor+0x290>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a08:	6153      	str	r3, [r2, #20]
				RX4_OFF();
 8000a0a:	4b77      	ldr	r3, [pc, #476]	; (8000be8 <read_ir_sensor+0x294>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a76      	ldr	r2, [pc, #472]	; (8000be8 <read_ir_sensor+0x294>)
 8000a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a14:	6153      	str	r3, [r2, #20]

				LED1_OFF();
 8000a16:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <read_ir_sensor+0x290>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a72      	ldr	r2, [pc, #456]	; (8000be4 <read_ir_sensor+0x290>)
 8000a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a20:	6153      	str	r3, [r2, #20]
				LED2_OFF();
 8000a22:	4b71      	ldr	r3, [pc, #452]	; (8000be8 <read_ir_sensor+0x294>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a70      	ldr	r2, [pc, #448]	; (8000be8 <read_ir_sensor+0x294>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6153      	str	r3, [r2, #20]
				LED3_OFF();
 8000a2e:	4b6d      	ldr	r3, [pc, #436]	; (8000be4 <read_ir_sensor+0x290>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a6c      	ldr	r2, [pc, #432]	; (8000be4 <read_ir_sensor+0x290>)
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	6153      	str	r3, [r2, #20]
				LED4_OFF();
 8000a3a:	4b6b      	ldr	r3, [pc, #428]	; (8000be8 <read_ir_sensor+0x294>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <read_ir_sensor+0x294>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6153      	str	r3, [r2, #20]
			break;
 8000a46:	e062      	b.n	8000b0e <read_ir_sensor+0x1ba>

		case 2:	RX1_OFF();
 8000a48:	4b66      	ldr	r3, [pc, #408]	; (8000be4 <read_ir_sensor+0x290>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a65      	ldr	r2, [pc, #404]	; (8000be4 <read_ir_sensor+0x290>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6153      	str	r3, [r2, #20]
				RX2_OFF();
 8000a54:	4b63      	ldr	r3, [pc, #396]	; (8000be4 <read_ir_sensor+0x290>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4a62      	ldr	r2, [pc, #392]	; (8000be4 <read_ir_sensor+0x290>)
 8000a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5e:	6153      	str	r3, [r2, #20]
				RX3_ON();
 8000a60:	4b60      	ldr	r3, [pc, #384]	; (8000be4 <read_ir_sensor+0x290>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a5f      	ldr	r2, [pc, #380]	; (8000be4 <read_ir_sensor+0x290>)
 8000a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a6a:	6153      	str	r3, [r2, #20]
				RX4_OFF();
 8000a6c:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <read_ir_sensor+0x294>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a5d      	ldr	r2, [pc, #372]	; (8000be8 <read_ir_sensor+0x294>)
 8000a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a76:	6153      	str	r3, [r2, #20]

				LED1_OFF();
 8000a78:	4b5a      	ldr	r3, [pc, #360]	; (8000be4 <read_ir_sensor+0x290>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4a59      	ldr	r2, [pc, #356]	; (8000be4 <read_ir_sensor+0x290>)
 8000a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a82:	6153      	str	r3, [r2, #20]
				LED2_OFF();
 8000a84:	4b58      	ldr	r3, [pc, #352]	; (8000be8 <read_ir_sensor+0x294>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a57      	ldr	r2, [pc, #348]	; (8000be8 <read_ir_sensor+0x294>)
 8000a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8e:	6153      	str	r3, [r2, #20]
				LED3_OFF();
 8000a90:	4b54      	ldr	r3, [pc, #336]	; (8000be4 <read_ir_sensor+0x290>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a53      	ldr	r2, [pc, #332]	; (8000be4 <read_ir_sensor+0x290>)
 8000a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9a:	6153      	str	r3, [r2, #20]
				LED4_OFF();
 8000a9c:	4b52      	ldr	r3, [pc, #328]	; (8000be8 <read_ir_sensor+0x294>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a51      	ldr	r2, [pc, #324]	; (8000be8 <read_ir_sensor+0x294>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6153      	str	r3, [r2, #20]
			break;
 8000aa8:	e031      	b.n	8000b0e <read_ir_sensor+0x1ba>

		case 3:	RX1_OFF();
 8000aaa:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <read_ir_sensor+0x290>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a4d      	ldr	r2, [pc, #308]	; (8000be4 <read_ir_sensor+0x290>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6153      	str	r3, [r2, #20]
				RX2_OFF();
 8000ab6:	4b4b      	ldr	r3, [pc, #300]	; (8000be4 <read_ir_sensor+0x290>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a4a      	ldr	r2, [pc, #296]	; (8000be4 <read_ir_sensor+0x290>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6153      	str	r3, [r2, #20]
				RX3_OFF();
 8000ac2:	4b48      	ldr	r3, [pc, #288]	; (8000be4 <read_ir_sensor+0x290>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a47      	ldr	r2, [pc, #284]	; (8000be4 <read_ir_sensor+0x290>)
 8000ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000acc:	6153      	str	r3, [r2, #20]
				RX4_ON();
 8000ace:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <read_ir_sensor+0x294>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <read_ir_sensor+0x294>)
 8000ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ad8:	6153      	str	r3, [r2, #20]

				LED1_OFF();
 8000ada:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <read_ir_sensor+0x290>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a41      	ldr	r2, [pc, #260]	; (8000be4 <read_ir_sensor+0x290>)
 8000ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae4:	6153      	str	r3, [r2, #20]
				LED2_OFF();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <read_ir_sensor+0x294>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <read_ir_sensor+0x294>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6153      	str	r3, [r2, #20]
				LED3_OFF();
 8000af2:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <read_ir_sensor+0x290>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a3b      	ldr	r2, [pc, #236]	; (8000be4 <read_ir_sensor+0x290>)
 8000af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afc:	6153      	str	r3, [r2, #20]
				LED4_OFF();
 8000afe:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <read_ir_sensor+0x294>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <read_ir_sensor+0x294>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6153      	str	r3, [r2, #20]

			break;
 8000b0a:	e000      	b.n	8000b0e <read_ir_sensor+0x1ba>

		default:
			break;
 8000b0c:	bf00      	nop

	}

	switch(x){
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d827      	bhi.n	8000b64 <read_ir_sensor+0x210>
 8000b14:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <read_ir_sensor+0x1c8>)
 8000b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1a:	bf00      	nop
 8000b1c:	08000b2d 	.word	0x08000b2d
 8000b20:	08000b3b 	.word	0x08000b3b
 8000b24:	08000b49 	.word	0x08000b49
 8000b28:	08000b57 	.word	0x08000b57

		case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	482d      	ldr	r0, [pc, #180]	; (8000be8 <read_ir_sensor+0x294>)
 8000b34:	f004 fb28 	bl	8005188 <HAL_GPIO_WritePin>

			break;
 8000b38:	e015      	b.n	8000b66 <read_ir_sensor+0x212>
		case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b40:	4829      	ldr	r0, [pc, #164]	; (8000be8 <read_ir_sensor+0x294>)
 8000b42:	f004 fb21 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000b46:	e00e      	b.n	8000b66 <read_ir_sensor+0x212>
		case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4825      	ldr	r0, [pc, #148]	; (8000be4 <read_ir_sensor+0x290>)
 8000b50:	f004 fb1a 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000b54:	e007      	b.n	8000b66 <read_ir_sensor+0x212>
		case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	4821      	ldr	r0, [pc, #132]	; (8000be4 <read_ir_sensor+0x290>)
 8000b5e:	f004 fb13 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000b62:	e000      	b.n	8000b66 <read_ir_sensor+0x212>
		default:
			break;
 8000b64:	bf00      	nop

	}
	//HAL_Delay(1);
	delay_us(10);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f002 f988 	bl	8002e7c <delay_us>

	//Read with LEDs off
	int ret = HAL_ADC_Start_DMA(&hadc1, a_reads, 4);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	481d      	ldr	r0, [pc, #116]	; (8000bec <read_ir_sensor+0x298>)
 8000b76:	f002 ffad 	bl	8003ad4 <HAL_ADC_Start_DMA>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Poll for completion
	//Polling is fine in this case as it meets timing requirements
	while(!conv){}
 8000b7e:	bf00      	nop
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <read_ir_sensor+0x29c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0fb      	beq.n	8000b80 <read_ir_sensor+0x22c>
	conv = 0;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <read_ir_sensor+0x29c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]


	//Turn LED ON
	switch(y){
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d82f      	bhi.n	8000bf4 <read_ir_sensor+0x2a0>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <read_ir_sensor+0x248>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bbb 	.word	0x08000bbb
 8000ba4:	08000bc9 	.word	0x08000bc9
 8000ba8:	08000bd7 	.word	0x08000bd7

		case 0: LED1_ON();
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <read_ir_sensor+0x290>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <read_ir_sensor+0x290>)
 8000bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bb6:	6153      	str	r3, [r2, #20]
			break;
 8000bb8:	e01d      	b.n	8000bf6 <read_ir_sensor+0x2a2>

		case 1:	LED2_ON();
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <read_ir_sensor+0x294>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <read_ir_sensor+0x294>)
 8000bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bc4:	6153      	str	r3, [r2, #20]
			break;
 8000bc6:	e016      	b.n	8000bf6 <read_ir_sensor+0x2a2>

		case 2: LED3_ON();
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <read_ir_sensor+0x290>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <read_ir_sensor+0x290>)
 8000bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bd2:	6153      	str	r3, [r2, #20]
			break;
 8000bd4:	e00f      	b.n	8000bf6 <read_ir_sensor+0x2a2>

		case 3:	LED4_ON();
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <read_ir_sensor+0x294>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <read_ir_sensor+0x294>)
 8000bdc:	f023 0310 	bic.w	r3, r3, #16
 8000be0:	6153      	str	r3, [r2, #20]

			break;
 8000be2:	e008      	b.n	8000bf6 <read_ir_sensor+0x2a2>
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020400 	.word	0x40020400
 8000bec:	2000080c 	.word	0x2000080c
 8000bf0:	200000b4 	.word	0x200000b4

		default:
			break;
 8000bf4:	bf00      	nop

	}

	delay_us(10);
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f002 f940 	bl	8002e7c <delay_us>
	//HAL_Delay(1);

	//Read with LEDs ON
	HAL_ADC_Start_DMA(&hadc1, ava, 4);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2204      	movs	r2, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	485a      	ldr	r0, [pc, #360]	; (8000d70 <read_ir_sensor+0x41c>)
 8000c06:	f002 ff65 	bl	8003ad4 <HAL_ADC_Start_DMA>

	//Poll for completion
	//Polling is fine in this case as it meets timing requirements
	while(!conv){}
 8000c0a:	bf00      	nop
 8000c0c:	4b59      	ldr	r3, [pc, #356]	; (8000d74 <read_ir_sensor+0x420>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0fb      	beq.n	8000c0c <read_ir_sensor+0x2b8>
	conv = 0;
 8000c14:	4b57      	ldr	r3, [pc, #348]	; (8000d74 <read_ir_sensor+0x420>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	//Store conversion data in array

	//Deactivate Sensor
	//Set appropriate I/0 to activate selected sensor

	switch(y){
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d83b      	bhi.n	8000c98 <read_ir_sensor+0x344>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <read_ir_sensor+0x2d4>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c51 	.word	0x08000c51
 8000c30:	08000c69 	.word	0x08000c69
 8000c34:	08000c81 	.word	0x08000c81

		case 0: HAL_GPIO_WritePin(GPIOA, RX3_Pin|RX2_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f249 0180 	movw	r1, #36992	; 0x9080
 8000c3e:	484e      	ldr	r0, [pc, #312]	; (8000d78 <read_ir_sensor+0x424>)
 8000c40:	f004 faa2 	bl	8005188 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, RX1_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	21d0      	movs	r1, #208	; 0xd0
 8000c48:	484c      	ldr	r0, [pc, #304]	; (8000d7c <read_ir_sensor+0x428>)
 8000c4a:	f004 fa9d 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000c4e:	e024      	b.n	8000c9a <read_ir_sensor+0x346>

		case 1:	HAL_GPIO_WritePin(GPIOA, RX4_Pin|RX2_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f649 0110 	movw	r1, #38928	; 0x9810
 8000c56:	4848      	ldr	r0, [pc, #288]	; (8000d78 <read_ir_sensor+0x424>)
 8000c58:	f004 fa96 	bl	8005188 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(GPIOB, RX1_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2150      	movs	r1, #80	; 0x50
 8000c60:	4846      	ldr	r0, [pc, #280]	; (8000d7c <read_ir_sensor+0x428>)
 8000c62:	f004 fa91 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000c66:	e018      	b.n	8000c9a <read_ir_sensor+0x346>

		case 2:	HAL_GPIO_WritePin(GPIOA, RX4_Pin|LED4_Pin|RX3_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8000c6e:	4842      	ldr	r0, [pc, #264]	; (8000d78 <read_ir_sensor+0x424>)
 8000c70:	f004 fa8a 	bl	8005188 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, RX1_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	21d0      	movs	r1, #208	; 0xd0
 8000c78:	4840      	ldr	r0, [pc, #256]	; (8000d7c <read_ir_sensor+0x428>)
 8000c7a:	f004 fa85 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000c7e:	e00c      	b.n	8000c9a <read_ir_sensor+0x346>

		case 3: HAL_GPIO_WritePin(GPIOA, RX4_Pin|RX2_Pin|LED2_Pin|LED4_Pin|RX3_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f649 0190 	movw	r1, #39056	; 0x9890
 8000c86:	483c      	ldr	r0, [pc, #240]	; (8000d78 <read_ir_sensor+0x424>)
 8000c88:	f004 fa7e 	bl	8005188 <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	483a      	ldr	r0, [pc, #232]	; (8000d7c <read_ir_sensor+0x428>)
 8000c92:	f004 fa79 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000c96:	e000      	b.n	8000c9a <read_ir_sensor+0x346>

		default:
			break;
 8000c98:	bf00      	nop

	}

	switch(x){
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d827      	bhi.n	8000cf0 <read_ir_sensor+0x39c>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <read_ir_sensor+0x354>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000cc7 	.word	0x08000cc7
 8000cb0:	08000cd5 	.word	0x08000cd5
 8000cb4:	08000ce3 	.word	0x08000ce3

		case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <read_ir_sensor+0x428>)
 8000cc0:	f004 fa62 	bl	8005188 <HAL_GPIO_WritePin>

			break;
 8000cc4:	e015      	b.n	8000cf2 <read_ir_sensor+0x39e>
		case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ccc:	482b      	ldr	r0, [pc, #172]	; (8000d7c <read_ir_sensor+0x428>)
 8000cce:	f004 fa5b 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000cd2:	e00e      	b.n	8000cf2 <read_ir_sensor+0x39e>
		case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	4827      	ldr	r0, [pc, #156]	; (8000d78 <read_ir_sensor+0x424>)
 8000cdc:	f004 fa54 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000ce0:	e007      	b.n	8000cf2 <read_ir_sensor+0x39e>
		case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <read_ir_sensor+0x424>)
 8000cea:	f004 fa4d 	bl	8005188 <HAL_GPIO_WritePin>
			break;
 8000cee:	e000      	b.n	8000cf2 <read_ir_sensor+0x39e>
		default:
			break;
 8000cf0:	bf00      	nop

	}


	if(a_reads[3 - y] > ava[3 - y]){
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f1c3 0303 	rsb	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000cfe:	4413      	add	r3, r2
 8000d00:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	f1c3 0303 	rsb	r3, r3, #3
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d10:	440b      	add	r3, r1
 8000d12:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d908      	bls.n	8000d2c <read_ir_sensor+0x3d8>

		values[x][y] = 0;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	79ba      	ldrb	r2, [r7, #6]
 8000d24:	2100      	movs	r1, #0
 8000d26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		values[x][y] = ava[3 - y] - a_reads[3 - y];

	}

}
 8000d2a:	e01c      	b.n	8000d66 <read_ir_sensor+0x412>
		values[x][y] = ava[3 - y] - a_reads[3 - y];
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	f1c3 0303 	rsb	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d38:	4413      	add	r3, r2
 8000d3a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000d3e:	b298      	uxth	r0, r3
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	f1c3 0303 	rsb	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000d52:	b299      	uxth	r1, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	1a41      	subs	r1, r0, r1
 8000d60:	b289      	uxth	r1, r1
 8000d62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8000d66:	bf00      	nop
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000080c 	.word	0x2000080c
 8000d74:	200000b4 	.word	0x200000b4
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]



	  HAL_ADC_Stop_DMA(&hadc1);
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000d8a:	f002 ff77 	bl	8003c7c <HAL_ADC_Stop_DMA>
	  conv = 1;
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]

}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000080c 	.word	0x2000080c
 8000da0:	200000b4 	.word	0x200000b4

08000da4 <set_panel_pixels>:


void set_panel_pixels(struct Led_pixels * pixels, struct Color display[4][4]){
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]

	int pix = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
	int why = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]


	for(int x = 0; x < 4; x++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e050      	b.n	8000e5e <set_panel_pixels+0xba>

		for(int y = 0; y < 4; y++){
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e047      	b.n	8000e52 <set_panel_pixels+0xae>

			if(x % 2 == 0){//If x is even
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <set_panel_pixels+0x32>

				why = 3-y;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f1c3 0303 	rsb	r3, r3, #3
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e001      	b.n	8000dda <set_panel_pixels+0x36>

			}
			else{
				why = y;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	617b      	str	r3, [r7, #20]
			}
			//Get pixel based on panel layout
			pix = (x * 4) + why;
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]

			set_pixel_color(pixels, pix, display[x][y].red, display[x][y].green, display[x][y].blue);
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	461a      	mov	r2, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	1899      	adds	r1, r3, r2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	781c      	ldrb	r4, [r3, #0]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	1899      	adds	r1, r3, r2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781d      	ldrb	r5, [r3, #0]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	1899      	adds	r1, r3, r2
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	462b      	mov	r3, r5
 8000e42:	4622      	mov	r2, r4
 8000e44:	4601      	mov	r1, r0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f002 fcf6 	bl	8003838 <set_pixel_color>
		for(int y = 0; y < 4; y++){
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	ddb4      	ble.n	8000dc2 <set_panel_pixels+0x1e>
	for(int x = 0; x < 4; x++){
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	ddab      	ble.n	8000dbc <set_panel_pixels+0x18>

	}



}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e70 <set_panel_clut>:

void set_panel_clut(struct Led_pixels * pixels, uint8_t * clut){
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]



for(int x = 0; x < 8; x++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e079      	b.n	8000f74 <set_panel_clut+0x104>


	if((clut[x] & 0xF) != 0){
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d032      	beq.n	8000ef6 <set_panel_clut+0x86>


		set_pixel_color(pixels, (x*2) ,
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	461d      	mov	r5, r3
				panel_clut[(clut[x] & 0xF)-1][red_pos],
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	1e5a      	subs	r2, r3, #1
		set_pixel_color(pixels, (x*2) ,
 8000ea4:	4937      	ldr	r1, [pc, #220]	; (8000f84 <set_panel_clut+0x114>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	7819      	ldrb	r1, [r3, #0]
				panel_clut[(clut[x] & 0xF)-1][green_pos],
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	1e5a      	subs	r2, r3, #1
		set_pixel_color(pixels, (x*2) ,
 8000ebe:	4831      	ldr	r0, [pc, #196]	; (8000f84 <set_panel_clut+0x114>)
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4403      	add	r3, r0
 8000ec8:	3301      	adds	r3, #1
 8000eca:	7818      	ldrb	r0, [r3, #0]
				panel_clut[(clut[x] & 0xF)-1][blue_pos]);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	1e5a      	subs	r2, r3, #1
		set_pixel_color(pixels, (x*2) ,
 8000eda:	4c2a      	ldr	r4, [pc, #168]	; (8000f84 <set_panel_clut+0x114>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4423      	add	r3, r4
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	4629      	mov	r1, r5
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f002 fca1 	bl	8003838 <set_pixel_color>

	}

	if((clut[x] >> 4) != 0){
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d033      	beq.n	8000f6e <set_panel_clut+0xfe>

	set_pixel_color(pixels, (x*2)+1 ,
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	461d      	mov	r5, r3
			panel_clut[(clut[x] >> 4)-1][red_pos],
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	1e5a      	subs	r2, r3, #1
	set_pixel_color(pixels, (x*2)+1 ,
 8000f1c:	4919      	ldr	r1, [pc, #100]	; (8000f84 <set_panel_clut+0x114>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	7819      	ldrb	r1, [r3, #0]
			panel_clut[(clut[x] >> 4)-1][green_pos],
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	1e5a      	subs	r2, r3, #1
	set_pixel_color(pixels, (x*2)+1 ,
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <set_panel_clut+0x114>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4403      	add	r3, r0
 8000f40:	3301      	adds	r3, #1
 8000f42:	7818      	ldrb	r0, [r3, #0]
			panel_clut[(clut[x] >> 4)-1][blue_pos]);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	1e5a      	subs	r2, r3, #1
	set_pixel_color(pixels, (x*2)+1 ,
 8000f52:	4c0c      	ldr	r4, [pc, #48]	; (8000f84 <set_panel_clut+0x114>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	4423      	add	r3, r4
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	4629      	mov	r1, r5
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f002 fc65 	bl	8003838 <set_pixel_color>
for(int x = 0; x < 8; x++){
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	dd82      	ble.n	8000e80 <set_panel_clut+0x10>
//	//set_pixel_color(pixels, (x*2)+1 , 0, 0, 0);
//
//	}
}

}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	20000000 	.word	0x20000000

08000f88 <set_collective_pixels>:
    delay_us(SPI_SETUP_TIME);
	HAL_SPI_TransmitReceive(&hspi2, &msg[2], pRxData, 4, TXRX_TIMEOUT);
	return pRxData[0];
}

void set_collective_pixels(uint32_t x, uint32_t y, uint8_t color, struct panel_assembly * assembly){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71fb      	strb	r3, [r7, #7]
//7, 5, -> 8rd byte in 3rd
//9, 1
	int panel_x = x/4; //1  2
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
	int panel_y = y/4; //1  0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]

	int pix_x = x % 4; //3  1
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	61bb      	str	r3, [r7, #24]
	int pix_y = y % 4; //1  1
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	617b      	str	r3, [r7, #20]

	//as x = 3
	//as y = 1

	int panel_num = (panel_y * assembly->x); //2  0
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24


	if(panel_y % 2 == 0){
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <set_collective_pixels+0x4e>

		panel_num += panel_x;
 8000fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd4:	e007      	b.n	8000fe6 <set_collective_pixels+0x5e>

	}
	else{

		panel_num += ((assembly->x - 1) - panel_x);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe2:	4413      	add	r3, r2
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24

	}

	set_panel_pixel_tx(&assembly->colors_tx[panel_num * 8], pix_x, pix_y, color);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	1898      	adds	r0, r3, r2
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	b2d9      	uxtb	r1, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f000 f804 	bl	8001006 <set_panel_pixel_tx>



}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <set_panel_pixel_tx>:

void set_panel_pixel_tx(uint8_t * colors_tx, uint8_t x, uint8_t y, uint8_t color){
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	4608      	mov	r0, r1
 8001010:	4611      	mov	r1, r2
 8001012:	461a      	mov	r2, r3
 8001014:	4603      	mov	r3, r0
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	460b      	mov	r3, r1
 800101a:	70bb      	strb	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]

	int pix_num;

	//If x is odd
	if(x % 2){
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <set_panel_pixel_tx+0x32>

		pix_num = (x * 4) + y;
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	009a      	lsls	r2, r3, #2
 8001030:	78bb      	ldrb	r3, [r7, #2]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e006      	b.n	8001046 <set_panel_pixel_tx+0x40>

	}
	else{

		pix_num = (x * 4) + (3 - y);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	009a      	lsls	r2, r3, #2
 800103c:	78bb      	ldrb	r3, [r7, #2]
 800103e:	f1c3 0303 	rsb	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]

	}

	//If odd
	if(pix_num % 2){
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d022      	beq.n	8001096 <set_panel_pixel_tx+0x90>

		colors_tx[(pix_num/2)] &= ~(0xF << 4);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	0fda      	lsrs	r2, r3, #31
 8001054:	4413      	add	r3, r2
 8001056:	105b      	asrs	r3, r3, #1
 8001058:	4619      	mov	r1, r3
 800105a:	460a      	mov	r2, r1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	440b      	add	r3, r1
 8001066:	f002 020f 	and.w	r2, r2, #15
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
		colors_tx[(pix_num/2)] |=  (color << 4);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	0fda      	lsrs	r2, r3, #31
 8001072:	4413      	add	r3, r2
 8001074:	105b      	asrs	r3, r3, #1
 8001076:	4619      	mov	r1, r3
 8001078:	460a      	mov	r2, r1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b25a      	sxtb	r2, r3
 8001082:	787b      	ldrb	r3, [r7, #1]
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	b25b      	sxtb	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b25a      	sxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	440b      	add	r3, r1
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
		colors_tx[(pix_num/2)] |=  (color);


	}

}
 8001094:	e01e      	b.n	80010d4 <set_panel_pixel_tx+0xce>
		colors_tx[(pix_num/2)] &= ~(0xF);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	0fda      	lsrs	r2, r3, #31
 800109a:	4413      	add	r3, r2
 800109c:	105b      	asrs	r3, r3, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	460a      	mov	r2, r1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	440b      	add	r3, r1
 80010ac:	f022 020f 	bic.w	r2, r2, #15
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
		colors_tx[(pix_num/2)] |=  (color);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	0fda      	lsrs	r2, r3, #31
 80010b8:	4413      	add	r3, r2
 80010ba:	105b      	asrs	r3, r3, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	4602      	mov	r2, r0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	7819      	ldrb	r1, [r3, #0]
 80010c6:	4602      	mov	r2, r0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	787a      	ldrb	r2, [r7, #1]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <get_panel_header>:


void get_panel_header(uint8_t * header){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]


	SPI2->DR = RESP_CODE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <get_panel_header+0x64>)
 80010ea:	22bf      	movs	r2, #191	; 0xbf
 80010ec:	60da      	str	r2, [r3, #12]
	SPI2->DR = RESP_CODE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <get_panel_header+0x64>)
 80010f0:	22bf      	movs	r2, #191	; 0xbf
 80010f2:	60da      	str	r2, [r3, #12]

	header[0] = SPI2->DR;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <get_panel_header+0x64>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	701a      	strb	r2, [r3, #0]
    header[0] = SPI2->DR;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <get_panel_header+0x64>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]

    GPIOB->PUPDR &= ~(0x3 << 26);
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <get_panel_header+0x68>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <get_panel_header+0x68>)
 800110e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001112:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR &= ~(0x3 << 28);
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <get_panel_header+0x68>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <get_panel_header+0x68>)
 800111a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800111e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR &= ~(0x3 << 30);
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <get_panel_header+0x68>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <get_panel_header+0x68>)
 8001126:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800112a:	60d3      	str	r3, [r2, #12]

	HAL_SPI_TransmitReceive(&hspi2, resp_code, header, HEADER_SIZE, 5);
 800112c:	2305      	movs	r3, #5
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2304      	movs	r3, #4
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4905      	ldr	r1, [pc, #20]	; (800114c <get_panel_header+0x6c>)
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <get_panel_header+0x70>)
 8001138:	f004 fd3a 	bl	8005bb0 <HAL_SPI_TransmitReceive>
////		UNSELECT_UP();
//
//	}


}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40003800 	.word	0x40003800
 8001148:	40020400 	.word	0x40020400
 800114c:	200003dc 	.word	0x200003dc
 8001150:	20000994 	.word	0x20000994

08001154 <get_panel_payload>:

void get_panel_payload(uint16_t datalen, uint8_t * rx_buffer){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	80fb      	strh	r3, [r7, #6]


	SPI2->DR = RESP_CODE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <get_panel_payload+0x2c>)
 8001162:	22bf      	movs	r2, #191	; 0xbf
 8001164:	60da      	str	r2, [r3, #12]

	HAL_SPI_TransmitReceive(&hspi2, resp_code,rx_buffer, datalen, 5);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	2205      	movs	r2, #5
 800116a:	9200      	str	r2, [sp, #0]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4905      	ldr	r1, [pc, #20]	; (8001184 <get_panel_payload+0x30>)
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <get_panel_payload+0x34>)
 8001172:	f004 fd1d 	bl	8005bb0 <HAL_SPI_TransmitReceive>
//
//	//TODO: Error handling
//	HAL_SPI_TransmitReceive(&hspi2, msg,rx_buffer, datalen, 1000);


}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40003800 	.word	0x40003800
 8001184:	200003dc 	.word	0x200003dc
 8001188:	20000994 	.word	0x20000994

0800118c <set_panel_it>:


}


void set_panel_it(uint8_t dir){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]

	//Right CS pin interrupt


	switch(dir){
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	3b01      	subs	r3, #1
 800119a:	2b03      	cmp	r3, #3
 800119c:	f200 80ac 	bhi.w	80012f8 <set_panel_it+0x16c>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <set_panel_it+0x1c>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	08001209 	.word	0x08001209
 80011b0:	080012a9 	.word	0x080012a9
 80011b4:	08001259 	.word	0x08001259

	case CS_LEFT:
					//very high ospeed
					GPIOB->OSPEEDR |= 0x3 << 2;
 80011b8:	4b52      	ldr	r3, [pc, #328]	; (8001304 <set_panel_it+0x178>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4a51      	ldr	r2, [pc, #324]	; (8001304 <set_panel_it+0x178>)
 80011be:	f043 030c 	orr.w	r3, r3, #12
 80011c2:	6093      	str	r3, [r2, #8]

					//Pull up
					GPIOB->PUPDR |= 0x01 <<	2;
 80011c4:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <set_panel_it+0x178>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <set_panel_it+0x178>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	60d3      	str	r3, [r2, #12]

					//EXTI 10 to pb10
					SYSCFG->EXTICR[0] |= 0x01 << 4;
 80011d0:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <set_panel_it+0x17c>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <set_panel_it+0x17c>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6093      	str	r3, [r2, #8]

					//Unmask IT
					EXTI->IMR |= 0x01 << 1;
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <set_panel_it+0x180>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a4a      	ldr	r2, [pc, #296]	; (800130c <set_panel_it+0x180>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6013      	str	r3, [r2, #0]

					//Falling Trigger
					EXTI->FTSR |= 0x01 << 1;
 80011e8:	4b48      	ldr	r3, [pc, #288]	; (800130c <set_panel_it+0x180>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a47      	ldr	r2, [pc, #284]	; (800130c <set_panel_it+0x180>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	60d3      	str	r3, [r2, #12]

					HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f4:	2007      	movs	r0, #7
 80011f6:	f003 f913 	bl	8004420 <HAL_NVIC_EnableIRQ>

					//Input mode
					GPIOB->MODER &= ~(0x3 << 2);
 80011fa:	4b42      	ldr	r3, [pc, #264]	; (8001304 <set_panel_it+0x178>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a41      	ldr	r2, [pc, #260]	; (8001304 <set_panel_it+0x178>)
 8001200:	f023 030c 	bic.w	r3, r3, #12
 8001204:	6013      	str	r3, [r2, #0]

		break;
 8001206:	e078      	b.n	80012fa <set_panel_it+0x16e>

	case CS_RIGHT:
					//very high ospeed
					GPIOB->OSPEEDR |= 0x3 << 20;
 8001208:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <set_panel_it+0x178>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a3d      	ldr	r2, [pc, #244]	; (8001304 <set_panel_it+0x178>)
 800120e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001212:	6093      	str	r3, [r2, #8]

					//Pull up
					GPIOB->PUPDR |= 0x01 <<	20;
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <set_panel_it+0x178>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <set_panel_it+0x178>)
 800121a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800121e:	60d3      	str	r3, [r2, #12]

					SYSCFG->EXTICR[2] |= 0x01 << 8;
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <set_panel_it+0x17c>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a38      	ldr	r2, [pc, #224]	; (8001308 <set_panel_it+0x17c>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6113      	str	r3, [r2, #16]

					//Unmask IT
					EXTI->IMR |= 0x01 << 10;
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <set_panel_it+0x180>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a36      	ldr	r2, [pc, #216]	; (800130c <set_panel_it+0x180>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]

					//Faling Trigger
					EXTI->FTSR |= 0x01 << 10;
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <set_panel_it+0x180>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a33      	ldr	r2, [pc, #204]	; (800130c <set_panel_it+0x180>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	60d3      	str	r3, [r2, #12]

					HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001244:	2028      	movs	r0, #40	; 0x28
 8001246:	f003 f8eb 	bl	8004420 <HAL_NVIC_EnableIRQ>

					//Input mode
					GPIOB->MODER &= ~(0x3 << 20);
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <set_panel_it+0x178>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2d      	ldr	r2, [pc, #180]	; (8001304 <set_panel_it+0x178>)
 8001250:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001254:	6013      	str	r3, [r2, #0]
		break;
 8001256:	e050      	b.n	80012fa <set_panel_it+0x16e>

	case CS_UP:
					//very high ospeed
					GPIOA->OSPEEDR |= 0x3 << 20;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <set_panel_it+0x184>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <set_panel_it+0x184>)
 800125e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001262:	6093      	str	r3, [r2, #8]

					//Pull up
					GPIOA->PUPDR |= 0x01 <<	20;
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <set_panel_it+0x184>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <set_panel_it+0x184>)
 800126a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800126e:	60d3      	str	r3, [r2, #12]

					HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001270:	2028      	movs	r0, #40	; 0x28
 8001272:	f003 f8d5 	bl	8004420 <HAL_NVIC_EnableIRQ>

					//EXTI 10 to pa10
					SYSCFG->EXTICR[2] &= ~(0x03 << 8);
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <set_panel_it+0x17c>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <set_panel_it+0x17c>)
 800127c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001280:	6113      	str	r3, [r2, #16]

					//Unmask IT
					EXTI->IMR |= 0x01 << 10;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <set_panel_it+0x180>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <set_panel_it+0x180>)
 8001288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128c:	6013      	str	r3, [r2, #0]

					//Faling Trigger
					EXTI->FTSR |= 0x01 << 10;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <set_panel_it+0x180>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <set_panel_it+0x180>)
 8001294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001298:	60d3      	str	r3, [r2, #12]

					//Input mode
					GPIOA->MODER &= ~(0x3 << 20);
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <set_panel_it+0x184>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <set_panel_it+0x184>)
 80012a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80012a4:	6013      	str	r3, [r2, #0]
		break;
 80012a6:	e028      	b.n	80012fa <set_panel_it+0x16e>

	case CS_DOWN:
					//very high ospeed
					GPIOB->OSPEEDR |= 0x3 << 4;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <set_panel_it+0x178>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a15      	ldr	r2, [pc, #84]	; (8001304 <set_panel_it+0x178>)
 80012ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012b2:	6093      	str	r3, [r2, #8]

					//Pull up
					GPIOB->PUPDR |= 0x01 <<	4;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <set_panel_it+0x178>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <set_panel_it+0x178>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	60d3      	str	r3, [r2, #12]

					HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012c0:	2008      	movs	r0, #8
 80012c2:	f003 f8ad 	bl	8004420 <HAL_NVIC_EnableIRQ>
					//EXTI 10 to pb10
					SYSCFG->EXTICR[0] |= 0x01 << 8;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <set_panel_it+0x17c>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <set_panel_it+0x17c>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d0:	6093      	str	r3, [r2, #8]

					//Unmask IT
					EXTI->IMR |= 0x01 << 2;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <set_panel_it+0x180>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0d      	ldr	r2, [pc, #52]	; (800130c <set_panel_it+0x180>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6013      	str	r3, [r2, #0]

					//Faling Trigger
					EXTI->FTSR |= 0x01 << 2;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <set_panel_it+0x180>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <set_panel_it+0x180>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	60d3      	str	r3, [r2, #12]

					//Input mode
					GPIOB->MODER &= ~(0x3 << 4);
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <set_panel_it+0x178>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <set_panel_it+0x178>)
 80012f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012f4:	6013      	str	r3, [r2, #0]
		break;
 80012f6:	e000      	b.n	80012fa <set_panel_it+0x16e>

	default:
	break;
 80012f8:	bf00      	nop

	}


}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020400 	.word	0x40020400
 8001308:	40013800 	.word	0x40013800
 800130c:	40013c00 	.word	0x40013c00
 8001310:	40020000 	.word	0x40020000

08001314 <set_panel_output>:

void set_panel_output(void){
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

//	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
//	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
//	HAL_NVIC_DisableIRQ(EXTI2_IRQn);

	EXTI->IMR &= ~(0x02 | 0x04 | 0x400);
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <set_panel_output+0xa8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <set_panel_output+0xa8>)
 800131e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001322:	f023 0306 	bic.w	r3, r3, #6
 8001326:	6013      	str	r3, [r2, #0]
//	SYSCFG->EXTICR[0] &= 0xF << 4;
//	SYSCFG->EXTICR[0] &= 0xF << 8;
//	SYSCFG->EXTICR[2] &= 0xF << 8;

	//Turn on GPIO Clocks
	RCC->AHB1ENR |= 0x03;
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <set_panel_output+0xac>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <set_panel_output+0xac>)
 800132e:	f043 0303 	orr.w	r3, r3, #3
 8001332:	6313      	str	r3, [r2, #48]	; 0x30



	//Set Pullup
	GPIOB->PUPDR |= ((0x01) << 2) | ((0x01) << 4) | ((0x01) << 20);
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <set_panel_output+0xb0>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <set_panel_output+0xb0>)
 800133a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800133e:	f043 0314 	orr.w	r3, r3, #20
 8001342:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x01 << 20);
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <set_panel_output+0xb4>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <set_panel_output+0xb4>)
 800134a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800134e:	60d3      	str	r3, [r2, #12]

	GPIOB->OSPEEDR |= ((0x03) << 2) | ((0x03) << 4) | ((0x03) << 20);
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <set_panel_output+0xb0>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <set_panel_output+0xb0>)
 8001356:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800135a:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800135e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x03 << 20);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <set_panel_output+0xb4>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <set_panel_output+0xb4>)
 8001366:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800136a:	6093      	str	r3, [r2, #8]

	//Set ODR
	GPIOB->ODR |= ((0x01) << 1) | ((0x01) << 2) | ((0x01) << 10);
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <set_panel_output+0xb0>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <set_panel_output+0xb0>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	f043 0306 	orr.w	r3, r3, #6
 800137a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (0x01 << 10);
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <set_panel_output+0xb4>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <set_panel_output+0xb4>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6153      	str	r3, [r2, #20]

	//Set Mode
	GPIOB->MODER |= ((0x01) << 2) | ((0x01) << 4) | ((0x01) << 20);
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <set_panel_output+0xb0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <set_panel_output+0xb0>)
 800138e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001392:	f043 0314 	orr.w	r3, r3, #20
 8001396:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << 20);
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <set_panel_output+0xb4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <set_panel_output+0xb4>)
 800139e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a2:	6013      	str	r3, [r2, #0]

	//Pull down SPI Clock
    GPIOB->PUPDR |= 0x02 << 26;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <set_panel_output+0xb0>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <set_panel_output+0xb0>)
 80013aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013ae:	60d3      	str	r3, [r2, #12]


}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40013c00 	.word	0x40013c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020000 	.word	0x40020000

080013cc <master_get_data>:

uint8_t master_get_data(uint8_t * header, uint8_t * payload, uint8_t dir){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 80013d2:	af02      	add	r7, sp, #8
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	6018      	str	r0, [r3, #0]
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	6019      	str	r1, [r3, #0]
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	701a      	strb	r2, [r3, #0]

	//Set upstream pin to interrupt
		delay_us(25);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f001 fd49 	bl	8002e7c <delay_us>
		set_panel_it(dir);
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fecc 	bl	800118c <set_panel_it>


		int ret = 0xFF;
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338

		uint32_t tx_start = HAL_GetTick();
 80013fa:	f002 faf7 	bl	80039ec <HAL_GetTick>
 80013fe:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334

		SPI2->CR1 &= ~SPI_CR1_SPE;
 8001402:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <master_get_data+0x16c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <master_get_data+0x16c>)
 8001408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800140c:	6013      	str	r3, [r2, #0]

		int_wait = 0;
 800140e:	4b4b      	ldr	r3, [pc, #300]	; (800153c <master_get_data+0x170>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

		//Wait for int to trigger
		while((int_wait == 0) && ((HAL_GetTick() - tx_start) < INT_WAIT_TIMEOUT)){}
 8001414:	bf00      	nop
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <master_get_data+0x170>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d107      	bne.n	800142e <master_get_data+0x62>
 800141e:	f002 fae5 	bl	80039ec <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b63      	cmp	r3, #99	; 0x63
 800142c:	d9f3      	bls.n	8001416 <master_get_data+0x4a>
//		SELECT_UP();
//		UNSELECT_UP();



		if(int_wait == 1){
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <master_get_data+0x170>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d172      	bne.n	800151c <master_get_data+0x150>

		int_wait = 0;
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <master_get_data+0x170>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

		SPI2->CR1 |= SPI_CR1_SPE;
 800143c:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <master_get_data+0x16c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <master_get_data+0x16c>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	6013      	str	r3, [r2, #0]

//			GPIOB->ODR |= (dir);
//			GPIOB->ODR &= ~(dir);

			uint8_t holder[800];
			holder[0] = 0xFF;
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	22ff      	movs	r2, #255	; 0xff
 800144e:	701a      	strb	r2, [r3, #0]
			holder[1] = 0xFF;
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	22ff      	movs	r2, #255	; 0xff
 8001456:	705a      	strb	r2, [r3, #1]
			holder[2] = 0xFF;
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	709a      	strb	r2, [r3, #2]
			holder[3] = 0xFF;
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	22ff      	movs	r2, #255	; 0xff
 8001466:	70da      	strb	r2, [r3, #3]


//HAL_Delay(1);
delay_us(SPI_SETUP_TIME);
 8001468:	2037      	movs	r0, #55	; 0x37
 800146a:	f001 fd07 	bl	8002e7c <delay_us>
			int ret = HAL_SPI_TransmitReceive(&hspi2,holder, header, HEADER_SIZE, TXRX_TIMEOUT);
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	f107 0110 	add.w	r1, r7, #16
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2304      	movs	r3, #4
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4830      	ldr	r0, [pc, #192]	; (8001540 <master_get_data+0x174>)
 8001480:	f004 fb96 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 8001484:	4603      	mov	r3, r0
 8001486:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

			int datalen = (header[PAYLOAD_HIGH] << 8 | header[PAYLOAD_LOW]);
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3302      	adds	r3, #2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	3203      	adds	r2, #3
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c

			if(datalen > 800){
 80014a6:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80014aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80014ae:	dd03      	ble.n	80014b8 <master_get_data+0xec>

				datalen = 800;
 80014b0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80014b4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c

			}

			if(header[HEADER_CMD] == PANEL_GET_POS_CMD ||
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b0a      	cmp	r3, #10
 80014c2:	d005      	beq.n	80014d0 <master_get_data+0x104>
			   header[HEADER_CMD] == PANEL_GET_PIX_CMD	){
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
			if(header[HEADER_CMD] == PANEL_GET_POS_CMD ||
 80014cc:	2b0d      	cmp	r3, #13
 80014ce:	d113      	bne.n	80014f8 <master_get_data+0x12c>

		    //HAL_Delay(1);
		    delay_us(SPI_SETUP_TIME);
 80014d0:	2037      	movs	r0, #55	; 0x37
 80014d2:	f001 fcd3 	bl	8002e7c <delay_us>

			ret = HAL_SPI_TransmitReceive(&hspi2,holder, payload, datalen, TXRX_TIMEOUT);
 80014d6:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	f107 0110 	add.w	r1, r7, #16
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	9000      	str	r0, [sp, #0]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4815      	ldr	r0, [pc, #84]	; (8001540 <master_get_data+0x174>)
 80014ec:	f004 fb60 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80014f6:	e00b      	b.n	8001510 <master_get_data+0x144>

			}
			else{

				header[PAYLOAD_HIGH] = 0;
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3302      	adds	r3, #2
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
				header[PAYLOAD_LOW]  = 0;
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3303      	adds	r3, #3
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
			}
//			GPIOB->ODR |= (dir);

			SPI2->CR1 |= SPI_CR1_SPE;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <master_get_data+0x16c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <master_get_data+0x16c>)
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	6013      	str	r3, [r2, #0]

		//Note: Logical NOT circuit pulls down CS
		//This is a minor design flaw
		//As a result the CS must always be driven because the
		//internal pullup does not overcome the external pulldown
		set_cs_output(dir);
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 feaf 	bl	8002284 <set_cs_output>


	return ret;
 8001526:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800152a:	b2db      	uxtb	r3, r3

}
 800152c:	4618      	mov	r0, r3
 800152e:	f507 7750 	add.w	r7, r7, #832	; 0x340
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40003800 	.word	0x40003800
 800153c:	200007fc 	.word	0x200007fc
 8001540:	20000994 	.word	0x20000994

08001544 <get_panel_structure>:
		SPI2->CR1 &= ~(SPI_CR1_SPE);

}


uint8_t get_panel_structure(){
 8001544:	b580      	push	{r7, lr}
 8001546:	b090      	sub	sp, #64	; 0x40
 8001548:	af02      	add	r7, sp, #8

	uint8_t msg[5] = {0};
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	msg[0] = PANEL_GET_POS_CMD;
 8001554:	230a      	movs	r3, #10
 8001556:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	msg[1] = 0x0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	msg[2] = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	msg[3] = 3;
 8001566:	2303      	movs	r3, #3
 8001568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//	GPIOB->MODER &= ~(0x3 << 28);
//
//	GPIOB->MODER |= (0x02 << 28);
	SPI2->CR1 |= SPI_CR1_SPE;
 800156c:	4b90      	ldr	r3, [pc, #576]	; (80017b0 <get_panel_structure+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a8f      	ldr	r2, [pc, #572]	; (80017b0 <get_panel_structure+0x26c>)
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	6013      	str	r3, [r2, #0]

    EXTI->IMR &= ~0x02;
 8001578:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <get_panel_structure+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a8d      	ldr	r2, [pc, #564]	; (80017b4 <get_panel_structure+0x270>)
 800157e:	f023 0302 	bic.w	r3, r3, #2
 8001582:	6013      	str	r3, [r2, #0]
    EXTI->IMR &= ~0x400;
 8001584:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <get_panel_structure+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a8a      	ldr	r2, [pc, #552]	; (80017b4 <get_panel_structure+0x270>)
 800158a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]

    //TODO: Figure out why output at end of this function sometimes does not work
	set_panel_output();
 8001590:	f7ff fec0 	bl	8001314 <set_panel_output>

	GPIOB->ODR &= ~(RIGHT_CS_Pin);
 8001594:	4b88      	ldr	r3, [pc, #544]	; (80017b8 <get_panel_structure+0x274>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4a87      	ldr	r2, [pc, #540]	; (80017b8 <get_panel_structure+0x274>)
 800159a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800159e:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(LEFT_CS_Pin);
 80015a0:	4b85      	ldr	r3, [pc, #532]	; (80017b8 <get_panel_structure+0x274>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4a84      	ldr	r2, [pc, #528]	; (80017b8 <get_panel_structure+0x274>)
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	6153      	str	r3, [r2, #20]

	delay_us(SPI_SETUP_TIME);
 80015ac:	2037      	movs	r0, #55	; 0x37
 80015ae:	f001 fc65 	bl	8002e7c <delay_us>
    uint8_t dumb[5];
    uint8_t dumb2[3];
    dumb2[0] = 0x1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	763b      	strb	r3, [r7, #24]
    dumb2[1] = 0x1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	767b      	strb	r3, [r7, #25]
    dumb2[2] = 0x1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	76bb      	strb	r3, [r7, #26]
//
//		delay_us(20);
//	}


	uint8_t ret = HAL_SPI_TransmitReceive(&hspi2,msg, (uint8_t *)dumb, HEADER_SIZE, TXRX_TIMEOUT);
 80015be:	f107 021c 	add.w	r2, r7, #28
 80015c2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80015c6:	2364      	movs	r3, #100	; 0x64
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2304      	movs	r3, #4
 80015cc:	487b      	ldr	r0, [pc, #492]	; (80017bc <get_panel_structure+0x278>)
 80015ce:	f004 faef 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	for(int i = 0; i < HEADER_SIZE; i++){
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
 80015dc:	e00f      	b.n	80015fe <get_panel_structure+0xba>

		if(dumb[i] != RESP_CODE){
 80015de:	f107 021c 	add.w	r2, r7, #28
 80015e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2bbf      	cmp	r3, #191	; 0xbf
 80015ea:	d005      	beq.n	80015f8 <get_panel_structure+0xb4>

			ret |= RESP_ERR;
 80015ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int i = 0; i < HEADER_SIZE; i++){
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fa:	3301      	adds	r3, #1
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
 80015fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001600:	2b03      	cmp	r3, #3
 8001602:	ddec      	ble.n	80015de <get_panel_structure+0x9a>

		}

	}

	if(ret){
 8001604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00e      	beq.n	800162a <get_panel_structure+0xe6>

		GPIOB->ODR |= RIGHT_CS_Pin;
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <get_panel_structure+0x274>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4a69      	ldr	r2, [pc, #420]	; (80017b8 <get_panel_structure+0x274>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= LEFT_CS_Pin;
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <get_panel_structure+0x274>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	4a66      	ldr	r2, [pc, #408]	; (80017b8 <get_panel_structure+0x274>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6153      	str	r3, [r2, #20]

		return ret;
 8001624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001628:	e0bd      	b.n	80017a6 <get_panel_structure+0x262>

	}

	ret = HAL_SPI_TransmitReceive(&hspi2,dumb2, (uint8_t *)dumb, 3, TXRX_TIMEOUT);
 800162a:	f107 021c 	add.w	r2, r7, #28
 800162e:	f107 0118 	add.w	r1, r7, #24
 8001632:	2364      	movs	r3, #100	; 0x64
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2303      	movs	r3, #3
 8001638:	4860      	ldr	r0, [pc, #384]	; (80017bc <get_panel_structure+0x278>)
 800163a:	f004 fab9 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    EXTI->IMR &= ~0x02;
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <get_panel_structure+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <get_panel_structure+0x270>)
 800164a:	f023 0302 	bic.w	r3, r3, #2
 800164e:	6013      	str	r3, [r2, #0]

	GPIOB->ODR |= RIGHT_CS_Pin;
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <get_panel_structure+0x274>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <get_panel_structure+0x274>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= LEFT_CS_Pin;
 800165c:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <get_panel_structure+0x274>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <get_panel_structure+0x274>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	6153      	str	r3, [r2, #20]
//443-889-0376
	delay_us(25);
 8001668:	2019      	movs	r0, #25
 800166a:	f001 fc07 	bl	8002e7c <delay_us>
	//Set right gpio to interrupt
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = RIGHT_CS_Pin;
 800167c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001680:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <get_panel_structure+0x27c>)
 8001684:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	484a      	ldr	r0, [pc, #296]	; (80017b8 <get_panel_structure+0x274>)
 8001690:	f003 fb12 	bl	8004cb8 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	2028      	movs	r0, #40	; 0x28
 800169a:	f002 fea5 	bl	80043e8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800169e:	2028      	movs	r0, #40	; 0x28
 80016a0:	f002 febe 	bl	8004420 <HAL_NVIC_EnableIRQ>

	//Turn off SPI and wait for interrupt
	SPI2->CR1 &= ~SPI_CR1_SPE;
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <get_panel_structure+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a41      	ldr	r2, [pc, #260]	; (80017b0 <get_panel_structure+0x26c>)
 80016aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016ae:	6013      	str	r3, [r2, #0]

	uint32_t tx_start = HAL_GetTick();
 80016b0:	f002 f99c 	bl	80039ec <HAL_GetTick>
 80016b4:	62f8      	str	r0, [r7, #44]	; 0x2c

	while((int_wait == 0) && ((HAL_GetTick() - tx_start) < 400)){}
 80016b6:	bf00      	nop
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <get_panel_structure+0x280>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <get_panel_structure+0x18c>
 80016c0:	f002 f994 	bl	80039ec <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80016ce:	d3f3      	bcc.n	80016b8 <get_panel_structure+0x174>

	//TODO: Disable interrupt immediately
	if(int_wait == 1){
 80016d0:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <get_panel_structure+0x280>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d164      	bne.n	80017a2 <get_panel_structure+0x25e>
	int_wait = 0;
 80016d8:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <get_panel_structure+0x280>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

	SELECT_LEFT();
 80016de:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <get_panel_structure+0x274>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a35      	ldr	r2, [pc, #212]	; (80017b8 <get_panel_structure+0x274>)
 80016e4:	f023 0302 	bic.w	r3, r3, #2
 80016e8:	6153      	str	r3, [r2, #20]
	UNSELECT_LEFT();
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <get_panel_structure+0x274>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <get_panel_structure+0x274>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6153      	str	r3, [r2, #20]
	SELECT_LEFT();
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <get_panel_structure+0x274>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <get_panel_structure+0x274>)
 80016fc:	f023 0302 	bic.w	r3, r3, #2
 8001700:	6153      	str	r3, [r2, #20]
	UNSELECT_LEFT();
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <get_panel_structure+0x274>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <get_panel_structure+0x274>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6153      	str	r3, [r2, #20]

	SYSCFG->EXTICR[2] &= ~(0xF << 8);
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <get_panel_structure+0x284>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <get_panel_structure+0x284>)
 8001714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001718:	6113      	str	r3, [r2, #16]
//			GPIOB->ODR |= (RIGHT_CS_Pin);
	GPIOB->ODR &= ~(RIGHT_CS_Pin);
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <get_panel_structure+0x274>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <get_panel_structure+0x274>)
 8001720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001724:	6153      	str	r3, [r2, #20]
	uint8_t msg[4];
	msg[0] = 0xFF;
 8001726:	23ff      	movs	r3, #255	; 0xff
 8001728:	703b      	strb	r3, [r7, #0]
	msg[1] = 0xFF;
 800172a:	23ff      	movs	r3, #255	; 0xff
 800172c:	707b      	strb	r3, [r7, #1]
	msg[2] = 0xFF;
 800172e:	23ff      	movs	r3, #255	; 0xff
 8001730:	70bb      	strb	r3, [r7, #2]
	msg[3] = 0xFF;
 8001732:	23ff      	movs	r3, #255	; 0xff
 8001734:	70fb      	strb	r3, [r7, #3]
	//HAL_Delay(1);
	delay_us(SPI_SETUP_TIME);
 8001736:	2037      	movs	r0, #55	; 0x37
 8001738:	f001 fba0 	bl	8002e7c <delay_us>
	HAL_SPI_TransmitReceive(&hspi2,msg, rx_header, HEADER_SIZE, TXRX_TIMEOUT);
 800173c:	4639      	mov	r1, r7
 800173e:	2364      	movs	r3, #100	; 0x64
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2304      	movs	r3, #4
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <get_panel_structure+0x288>)
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <get_panel_structure+0x278>)
 8001748:	f004 fa32 	bl	8005bb0 <HAL_SPI_TransmitReceive>
	//HAL_Delay(1);
	delay_us(SPI_SETUP_TIME);
 800174c:	2037      	movs	r0, #55	; 0x37
 800174e:	f001 fb95 	bl	8002e7c <delay_us>
	HAL_SPI_TransmitReceive(&hspi2,msg, rx_data, 3, TXRX_TIMEOUT);
 8001752:	4639      	mov	r1, r7
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2303      	movs	r3, #3
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <get_panel_structure+0x28c>)
 800175c:	4817      	ldr	r0, [pc, #92]	; (80017bc <get_panel_structure+0x278>)
 800175e:	f004 fa27 	bl	8005bb0 <HAL_SPI_TransmitReceive>



	SELECT_LEFT();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <get_panel_structure+0x274>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <get_panel_structure+0x274>)
 8001768:	f023 0302 	bic.w	r3, r3, #2
 800176c:	6153      	str	r3, [r2, #20]
	UNSELECT_LEFT();
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <get_panel_structure+0x274>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <get_panel_structure+0x274>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6153      	str	r3, [r2, #20]
	SELECT_LEFT();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <get_panel_structure+0x274>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <get_panel_structure+0x274>)
 8001780:	f023 0302 	bic.w	r3, r3, #2
 8001784:	6153      	str	r3, [r2, #20]
	UNSELECT_LEFT();
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <get_panel_structure+0x274>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <get_panel_structure+0x274>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6153      	str	r3, [r2, #20]



	set_panel_output();
 8001792:	f7ff fdbf 	bl	8001314 <set_panel_output>

	UNSELECT_RIGHT();
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <get_panel_structure+0x274>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <get_panel_structure+0x274>)
 800179c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a0:	6153      	str	r3, [r2, #20]
//		  GPIOB->BSRR = LEFT_CS_Pin;
//		  GPIOB->PUPDR |= 0x02 << 26;



		  return ret;
 80017a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40003800 	.word	0x40003800
 80017b4:	40013c00 	.word	0x40013c00
 80017b8:	40020400 	.word	0x40020400
 80017bc:	20000994 	.word	0x20000994
 80017c0:	10210000 	.word	0x10210000
 80017c4:	200007fc 	.word	0x200007fc
 80017c8:	40013800 	.word	0x40013800
 80017cc:	200000b8 	.word	0x200000b8
 80017d0:	200000bc 	.word	0x200000bc

080017d4 <get_active_pixels>:
//}




uint8_t get_active_pixels(void){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af02      	add	r7, sp, #8

	//Send active pixel command

	uint8_t head[4];
	head[0] = PANEL_GET_PIX_CMD;
 80017da:	230d      	movs	r3, #13
 80017dc:	f887 3020 	strb.w	r3, [r7, #32]
	head[1] = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	head[2] = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	head[3] = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	uint8_t payload = RESP_CODE;
 80017f2:	23bf      	movs	r3, #191	; 0xbf
 80017f4:	77fb      	strb	r3, [r7, #31]


	SPI2->CR1 |= SPI_CR1_SPE;
 80017f6:	4b8c      	ldr	r3, [pc, #560]	; (8001a28 <get_active_pixels+0x254>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a8b      	ldr	r2, [pc, #556]	; (8001a28 <get_active_pixels+0x254>)
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	6013      	str	r3, [r2, #0]

    EXTI->IMR &= ~0x02;
 8001802:	4b8a      	ldr	r3, [pc, #552]	; (8001a2c <get_active_pixels+0x258>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a89      	ldr	r2, [pc, #548]	; (8001a2c <get_active_pixels+0x258>)
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	6013      	str	r3, [r2, #0]
    EXTI->IMR &= ~0x400;
 800180e:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <get_active_pixels+0x258>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a86      	ldr	r2, [pc, #536]	; (8001a2c <get_active_pixels+0x258>)
 8001814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001818:	6013      	str	r3, [r2, #0]

    //TODO: Figure out why output at end of this function sometimes does not work
	set_panel_output();
 800181a:	f7ff fd7b 	bl	8001314 <set_panel_output>


SELECT_RIGHT();
 800181e:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <get_active_pixels+0x25c>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a83      	ldr	r2, [pc, #524]	; (8001a30 <get_active_pixels+0x25c>)
 8001824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001828:	6153      	str	r3, [r2, #20]
SELECT_LEFT();
 800182a:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <get_active_pixels+0x25c>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4a80      	ldr	r2, [pc, #512]	; (8001a30 <get_active_pixels+0x25c>)
 8001830:	f023 0302 	bic.w	r3, r3, #2
 8001834:	6153      	str	r3, [r2, #20]

	//HAL_Delay(1);
	delay_us(SPI_SETUP_TIME);
 8001836:	2037      	movs	r0, #55	; 0x37
 8001838:	f001 fb20 	bl	8002e7c <delay_us>
	uint8_t ret = HAL_SPI_TransmitReceive(&hspi2, head, rx_header, HEADER_SIZE, TXRX_TIMEOUT);
 800183c:	f107 0120 	add.w	r1, r7, #32
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2304      	movs	r3, #4
 8001846:	4a7b      	ldr	r2, [pc, #492]	; (8001a34 <get_active_pixels+0x260>)
 8001848:	487b      	ldr	r0, [pc, #492]	; (8001a38 <get_active_pixels+0x264>)
 800184a:	f004 f9b1 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	for(int i = 0; i < HEADER_SIZE; i++){
 8001854:	2300      	movs	r3, #0
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
 8001858:	e00e      	b.n	8001878 <get_active_pixels+0xa4>

		if(rx_header[i] != RESP_CODE){
 800185a:	4a76      	ldr	r2, [pc, #472]	; (8001a34 <get_active_pixels+0x260>)
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185e:	4413      	add	r3, r2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2bbf      	cmp	r3, #191	; 0xbf
 8001864:	d005      	beq.n	8001872 <get_active_pixels+0x9e>

			ret |= RESP_ERR;
 8001866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int i = 0; i < HEADER_SIZE; i++){
 8001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001874:	3301      	adds	r3, #1
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	2b03      	cmp	r3, #3
 800187c:	dded      	ble.n	800185a <get_active_pixels+0x86>

		}

	}
	if(ret){
 800187e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00e      	beq.n	80018a4 <get_active_pixels+0xd0>

		UNSELECT_RIGHT();
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <get_active_pixels+0x25c>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4a69      	ldr	r2, [pc, #420]	; (8001a30 <get_active_pixels+0x25c>)
 800188c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001890:	6153      	str	r3, [r2, #20]
		UNSELECT_LEFT();
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <get_active_pixels+0x25c>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4a66      	ldr	r2, [pc, #408]	; (8001a30 <get_active_pixels+0x25c>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6153      	str	r3, [r2, #20]
		return ret;
 800189e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018a2:	e0bd      	b.n	8001a20 <get_active_pixels+0x24c>

	};

	ret = HAL_SPI_TransmitReceive(&hspi2,&payload, rx_data, 1, TXRX_TIMEOUT);
 80018a4:	f107 011f 	add.w	r1, r7, #31
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <get_active_pixels+0x268>)
 80018b0:	4861      	ldr	r0, [pc, #388]	; (8001a38 <get_active_pixels+0x264>)
 80018b2:	f004 f97d 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	EXTI->IMR &= ~0x02;
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <get_active_pixels+0x258>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <get_active_pixels+0x258>)
 80018c2:	f023 0302 	bic.w	r3, r3, #2
 80018c6:	6013      	str	r3, [r2, #0]
	UNSELECT_RIGHT();
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <get_active_pixels+0x25c>)
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <get_active_pixels+0x25c>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6153      	str	r3, [r2, #20]
	UNSELECT_LEFT();
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <get_active_pixels+0x25c>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	4a55      	ldr	r2, [pc, #340]	; (8001a30 <get_active_pixels+0x25c>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6153      	str	r3, [r2, #20]

	//Set right gpio to interrupt
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = RIGHT_CS_Pin;
 80018f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <get_active_pixels+0x26c>)
 80018f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4619      	mov	r1, r3
 8001904:	484a      	ldr	r0, [pc, #296]	; (8001a30 <get_active_pixels+0x25c>)
 8001906:	f003 f9d7 	bl	8004cb8 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2105      	movs	r1, #5
 800190e:	2028      	movs	r0, #40	; 0x28
 8001910:	f002 fd6a 	bl	80043e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001914:	2028      	movs	r0, #40	; 0x28
 8001916:	f002 fd83 	bl	8004420 <HAL_NVIC_EnableIRQ>

	//Turn off SPI and wait for interrupt
	SPI2->CR1 &= ~SPI_CR1_SPE;
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <get_active_pixels+0x254>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a42      	ldr	r2, [pc, #264]	; (8001a28 <get_active_pixels+0x254>)
 8001920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001924:	6013      	str	r3, [r2, #0]

	uint32_t tx_start = HAL_GetTick();
 8001926:	f002 f861 	bl	80039ec <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	; 0x24

	while((int_wait == 0) && ((HAL_GetTick() - tx_start) < 400)){}
 800192c:	bf00      	nop
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <get_active_pixels+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <get_active_pixels+0x172>
 8001936:	f002 f859 	bl	80039ec <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001944:	d3f3      	bcc.n	800192e <get_active_pixels+0x15a>

	//TODO: Disable interrupt immediately
	if(int_wait == 1){
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <get_active_pixels+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d143      	bne.n	80019d6 <get_active_pixels+0x202>

	int_wait = 0;
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <get_active_pixels+0x270>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

	SYSCFG->EXTICR[2] &= ~(0xF << 8);
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <get_active_pixels+0x274>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <get_active_pixels+0x274>)
 800195a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800195e:	6113      	str	r3, [r2, #16]

	SELECT_RIGHT();
 8001960:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <get_active_pixels+0x25c>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <get_active_pixels+0x25c>)
 8001966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800196a:	6153      	str	r3, [r2, #20]

	uint8_t msg[4];
	msg[0] = 0xFF;
 800196c:	23ff      	movs	r3, #255	; 0xff
 800196e:	713b      	strb	r3, [r7, #4]
	msg[1] = 0xFF;
 8001970:	23ff      	movs	r3, #255	; 0xff
 8001972:	717b      	strb	r3, [r7, #5]
	msg[2] = 0xFF;
 8001974:	23ff      	movs	r3, #255	; 0xff
 8001976:	71bb      	strb	r3, [r7, #6]
	msg[3] = 0xFF;
 8001978:	23ff      	movs	r3, #255	; 0xff
 800197a:	71fb      	strb	r3, [r7, #7]

	//HAL_Delay(1);

	delay_us(SPI_SETUP_TIME);
 800197c:	2037      	movs	r0, #55	; 0x37
 800197e:	f001 fa7d 	bl	8002e7c <delay_us>

	HAL_SPI_TransmitReceive(&hspi2,msg, rx_header, HEADER_SIZE, TXRX_TIMEOUT);
 8001982:	1d39      	adds	r1, r7, #4
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2304      	movs	r3, #4
 800198a:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <get_active_pixels+0x260>)
 800198c:	482a      	ldr	r0, [pc, #168]	; (8001a38 <get_active_pixels+0x264>)
 800198e:	f004 f90f 	bl	8005bb0 <HAL_SPI_TransmitReceive>

	//HAL_Delay(1);

	delay_us(SPI_SETUP_TIME);
 8001992:	2037      	movs	r0, #55	; 0x37
 8001994:	f001 fa72 	bl	8002e7c <delay_us>

	int datalen = (rx_header[PAYLOAD_HIGH] << 8 | rx_header[PAYLOAD_LOW]);
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <get_active_pixels+0x260>)
 800199a:	789b      	ldrb	r3, [r3, #2]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <get_active_pixels+0x260>)
 80019a0:	78d2      	ldrb	r2, [r2, #3]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(datalen > 800){
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80019ac:	dd02      	ble.n	80019b4 <get_active_pixels+0x1e0>

		datalen = 800;
 80019ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	}

	HAL_SPI_TransmitReceive(&hspi2,msg, rx_data, datalen, TXRX_TIMEOUT);
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	1d39      	adds	r1, r7, #4
 80019ba:	2264      	movs	r2, #100	; 0x64
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <get_active_pixels+0x268>)
 80019c0:	481d      	ldr	r0, [pc, #116]	; (8001a38 <get_active_pixels+0x264>)
 80019c2:	f004 f8f5 	bl	8005bb0 <HAL_SPI_TransmitReceive>

	set_panel_output();
 80019c6:	f7ff fca5 	bl	8001314 <set_panel_output>

	UNSELECT_RIGHT();
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <get_active_pixels+0x25c>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <get_active_pixels+0x25c>)
 80019d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d4:	6153      	str	r3, [r2, #20]

	//Note: Logical NOT circuit pulls down CS
	//This is a minor design flaw
	//As a result the CS must always be driven because the
	//internal pullup does not overcome the external pulldown
	set_cs_output(CS_RIGHT);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f000 fc54 	bl	8002284 <set_cs_output>


	//Get data from upstream

	master_get_data(rx_header, rx_data, CS_RIGHT);
 80019dc:	2202      	movs	r2, #2
 80019de:	4917      	ldr	r1, [pc, #92]	; (8001a3c <get_active_pixels+0x268>)
 80019e0:	4814      	ldr	r0, [pc, #80]	; (8001a34 <get_active_pixels+0x260>)
 80019e2:	f7ff fcf3 	bl	80013cc <master_get_data>

	set_panel_output();
 80019e6:	f7ff fc95 	bl	8001314 <set_panel_output>

	UNSELECT_RIGHT();
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <get_active_pixels+0x25c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <get_active_pixels+0x25c>)
 80019f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f4:	6153      	str	r3, [r2, #20]

	//Store rx data in appropriate global struct
	//TODO: Consider the possibility of overflowing the array in this loop
	for(int x = 0; x < (table.num_panels * 2); x++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fa:	e00b      	b.n	8001a14 <get_active_pixels+0x240>

		table.all_active_pixels[x] = rx_data[x];
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <get_active_pixels+0x278>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	4413      	add	r3, r2
 8001a04:	490d      	ldr	r1, [pc, #52]	; (8001a3c <get_active_pixels+0x268>)
 8001a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a08:	440a      	add	r2, r1
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
	for(int x = 0; x < (table.num_panels * 2); x++){
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	3301      	adds	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <get_active_pixels+0x278>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbed      	blt.n	80019fc <get_active_pixels+0x228>

	}

}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40003800 	.word	0x40003800
 8001a2c:	40013c00 	.word	0x40013c00
 8001a30:	40020400 	.word	0x40020400
 8001a34:	200000b8 	.word	0x200000b8
 8001a38:	20000994 	.word	0x20000994
 8001a3c:	200000bc 	.word	0x200000bc
 8001a40:	10210000 	.word	0x10210000
 8001a44:	200007fc 	.word	0x200007fc
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	200007c4 	.word	0x200007c4

08001a50 <update_panel_pixels>:





void update_panel_pixels(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8

if(table.num_panels > 0){
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <update_panel_pixels+0x128>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8088 	beq.w	8001b70 <update_panel_pixels+0x120>
	//Set up header
	uint8_t msg[4] = {0};
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
	msg[0] = PANEL_SET_PIXEL_CMD;
 8001a64:	230b      	movs	r3, #11
 8001a66:	713b      	strb	r3, [r7, #4]
	msg[1] = 0x0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	717b      	strb	r3, [r7, #5]
	msg[2] = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71bb      	strb	r3, [r7, #6]
	msg[3] = ((table.num_panels - 1) * 8) + 1;
 8001a70:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <update_panel_pixels+0x128>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	71fb      	strb	r3, [r7, #7]

	if(table.num_panels > 25){
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <update_panel_pixels+0x128>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b19      	cmp	r3, #25
 8001a88:	d902      	bls.n	8001a90 <update_panel_pixels+0x40>

		table.num_panels = 25;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <update_panel_pixels+0x128>)
 8001a8c:	2219      	movs	r2, #25
 8001a8e:	701a      	strb	r2, [r3, #0]

	}

	//Turn on SPI
	SPI2->CR1 |= SPI_CR1_SPE;
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <update_panel_pixels+0x12c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a39      	ldr	r2, [pc, #228]	; (8001b7c <update_panel_pixels+0x12c>)
 8001a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9a:	6013      	str	r3, [r2, #0]

	//Chip Select
	GPIOB->ODR &= ~(RIGHT_CS_Pin);
 8001a9c:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <update_panel_pixels+0x130>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4a37      	ldr	r2, [pc, #220]	; (8001b80 <update_panel_pixels+0x130>)
 8001aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aa6:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(LEFT_CS_Pin);
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <update_panel_pixels+0x130>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <update_panel_pixels+0x130>)
 8001aae:	f023 0302 	bic.w	r3, r3, #2
 8001ab2:	6153      	str	r3, [r2, #20]

	//HAL_Delay(1);
    delay_us(SPI_SETUP_TIME);	//Send Header
 8001ab4:	2037      	movs	r0, #55	; 0x37
 8001ab6:	f001 f9e1 	bl	8002e7c <delay_us>
	uint8_t ret = HAL_SPI_TransmitReceive(&hspi2, msg, rx_header, HEADER_SIZE, TXRX_TIMEOUT);
 8001aba:	1d39      	adds	r1, r7, #4
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <update_panel_pixels+0x134>)
 8001ac4:	4830      	ldr	r0, [pc, #192]	; (8001b88 <update_panel_pixels+0x138>)
 8001ac6:	f004 f873 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]


	for(int i = 0; i < HEADER_SIZE; i++){
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	e00c      	b.n	8001aee <update_panel_pixels+0x9e>

		if(rx_header[i] != RESP_CODE){
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <update_panel_pixels+0x134>)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2bbf      	cmp	r3, #191	; 0xbf
 8001ade:	d003      	beq.n	8001ae8 <update_panel_pixels+0x98>

			ret |= RESP_ERR;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < HEADER_SIZE; i++){
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	ddef      	ble.n	8001ad4 <update_panel_pixels+0x84>

		}

	}

	if(ret){
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00c      	beq.n	8001b14 <update_panel_pixels+0xc4>
		GPIOB->ODR |= RIGHT_CS_Pin;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <update_panel_pixels+0x130>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <update_panel_pixels+0x130>)
 8001b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b04:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= LEFT_CS_Pin;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <update_panel_pixels+0x130>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <update_panel_pixels+0x130>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6153      	str	r3, [r2, #20]
 8001b12:	e02d      	b.n	8001b70 <update_panel_pixels+0x120>
	return;

	}

	//Send Payload
	ret = HAL_SPI_TransmitReceive(&hspi2,&panel_brightness, rx_data, 1, TXRX_TIMEOUT);
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <update_panel_pixels+0x13c>)
 8001b1c:	491c      	ldr	r1, [pc, #112]	; (8001b90 <update_panel_pixels+0x140>)
 8001b1e:	481a      	ldr	r0, [pc, #104]	; (8001b88 <update_panel_pixels+0x138>)
 8001b20:	f004 f846 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
//	osStatus_t  mutex_status = osMutexAcquire(local_display_data_mutexHandle, TXRX_TIMEOUT);
//
//	if(mutex_status == osOK){


	ret = HAL_SPI_TransmitReceive(&hspi2,&table.colors_tx[8], rx_data, ((table.num_panels - 1) * 8), TXRX_TIMEOUT);
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <update_panel_pixels+0x128>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f103 0108 	add.w	r1, r3, #8
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <update_panel_pixels+0x128>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2264      	movs	r2, #100	; 0x64
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <update_panel_pixels+0x13c>)
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <update_panel_pixels+0x138>)
 8001b44:	f004 f834 	bl	8005bb0 <HAL_SPI_TransmitReceive>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]
//	osMutexRelease(local_display_data_mutexHandle);
//
//	}


	GPIOB->ODR |= RIGHT_CS_Pin;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <update_panel_pixels+0x130>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <update_panel_pixels+0x130>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= LEFT_CS_Pin;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <update_panel_pixels+0x130>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <update_panel_pixels+0x130>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	6153      	str	r3, [r2, #20]

	//Turn off SPI
	SPI2->CR1 &= ~SPI_CR1_SPE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <update_panel_pixels+0x12c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <update_panel_pixels+0x12c>)
 8001b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b6e:	6013      	str	r3, [r2, #0]
}

};
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200007c4 	.word	0x200007c4
 8001b7c:	40003800 	.word	0x40003800
 8001b80:	40020400 	.word	0x40020400
 8001b84:	200000b8 	.word	0x200000b8
 8001b88:	20000994 	.word	0x20000994
 8001b8c:	200000bc 	.word	0x200000bc
 8001b90:	200000b5 	.word	0x200000b5

08001b94 <play_pong>:





void play_pong(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b092      	sub	sp, #72	; 0x48
 8001b98:	af02      	add	r7, sp, #8

	int paddleX = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int paddleY = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
	int oldPaddleX, oldPaddleY;
	int ballDirectionX = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
	int ballDirectionY = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
	int score = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]

	int ballSpeed = 100; // lower numbers are faster
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	617b      	str	r3, [r7, #20]

	int ballX = 3;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    int ballY = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	int myWidth = (table.x * 4);
 8001bba:	4b9b      	ldr	r3, [pc, #620]	; (8001e28 <play_pong+0x294>)
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
	int myHeight = (table.y * 4);
 8001bc2:	4b99      	ldr	r3, [pc, #612]	; (8001e28 <play_pong+0x294>)
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	60fb      	str	r3, [r7, #12]

	uint32_t f_update = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t padx = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {

	    get_local_ir();
 8001bd2:	f000 f92d 	bl	8001e30 <get_local_ir>


		get_active_pixels();
 8001bd6:	f7ff fdfd 	bl	80017d4 <get_active_pixels>

		show_ir();
 8001bda:	f000 f979 	bl	8001ed0 <show_ir>
		delay_us(50);
 8001bde:	2032      	movs	r0, #50	; 0x32
 8001be0:	f001 f94c 	bl	8002e7c <delay_us>

		uint8_t line_h = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		uint8_t line_l = 0xFF;
 8001bea:	23ff      	movs	r3, #255	; 0xff
 8001bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		for(int x = 0; x < (table.x * 4); x++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	e020      	b.n	8001c38 <play_pong+0xa4>

			uint8_t bite = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	72bb      	strb	r3, [r7, #10]

			int b_read = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]

			if(is_pixel_active(&table, x, 0)){
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4888      	ldr	r0, [pc, #544]	; (8001e28 <play_pong+0x294>)
 8001c08:	f000 fa7e 	bl	8002108 <is_pixel_active>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00f      	beq.n	8001c32 <play_pong+0x9e>

				if(x > line_h){
 8001c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c16:	6a3a      	ldr	r2, [r7, #32]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dd02      	ble.n	8001c22 <play_pong+0x8e>

					line_h = x;
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if(x < line_l){
 8001c22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c26:	6a3a      	ldr	r2, [r7, #32]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	da02      	bge.n	8001c32 <play_pong+0x9e>

					line_l = x;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int x = 0; x < (table.x * 4); x++){
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	3301      	adds	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <play_pong+0x294>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbd8      	blt.n	8001bf6 <play_pong+0x62>
			}

		}

	//Clear Paddle Graphic
	set_collective_pixels(paddleX ,paddleY , 0, &table);
 8001c44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c46:	69f9      	ldr	r1, [r7, #28]
 8001c48:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <play_pong+0x294>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f7ff f99c 	bl	8000f88 <set_collective_pixels>
	set_collective_pixels(paddleX +1,paddleY , 0, &table);
 8001c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c52:	3301      	adds	r3, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	69f9      	ldr	r1, [r7, #28]
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <play_pong+0x294>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f7ff f994 	bl	8000f88 <set_collective_pixels>
	set_collective_pixels(paddleX +2,paddleY , 0, &table);
 8001c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c62:	3302      	adds	r3, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	69f9      	ldr	r1, [r7, #28]
 8001c68:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <play_pong+0x294>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f7ff f98c 	bl	8000f88 <set_collective_pixels>
	set_collective_pixels(paddleX +3,paddleY , 0, &table);
 8001c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c72:	3303      	adds	r3, #3
 8001c74:	4618      	mov	r0, r3
 8001c76:	69f9      	ldr	r1, [r7, #28]
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <play_pong+0x294>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f7ff f984 	bl	8000f88 <set_collective_pixels>

	set_collective_pixels(ballX,ballY , 0, &table);
 8001c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <play_pong+0x294>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	f7ff f97e 	bl	8000f88 <set_collective_pixels>

	//Get Paddle position

	paddleX = (line_l+line_h+1)/2;
 8001c8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c94:	4413      	add	r3, r2
 8001c96:	3301      	adds	r3, #1
 8001c98:	0fda      	lsrs	r2, r3, #31
 8001c9a:	4413      	add	r3, r2
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c



	paddleX -= 2;
 8001ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca2:	3b02      	subs	r3, #2
 8001ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
//		padx = 0;
//	}
//
//	paddleX = padx;

	if(paddleX > ((table.x - 1) * 4))
 8001ca6:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <play_pong+0x294>)
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dd04      	ble.n	8001cbe <play_pong+0x12a>
	{
		paddleX = ((table.x - 1) * 4);
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <play_pong+0x294>)
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}


	if(paddleX < 0)
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da01      	bge.n	8001cc8 <play_pong+0x134>
	{
		paddleX = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
//				default:
//					break;
//				}
//	}

    set_collective_pixels(paddleX ,paddleY , green, &table);
 8001cc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cca:	69f9      	ldr	r1, [r7, #28]
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <play_pong+0x294>)
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f7ff f95a 	bl	8000f88 <set_collective_pixels>
    set_collective_pixels(paddleX +1,paddleY , green, &table);
 8001cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <play_pong+0x294>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f7ff f952 	bl	8000f88 <set_collective_pixels>
    set_collective_pixels(paddleX +2,paddleY , green, &table);
 8001ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	69f9      	ldr	r1, [r7, #28]
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <play_pong+0x294>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f7ff f94a 	bl	8000f88 <set_collective_pixels>
    set_collective_pixels(paddleX +3,paddleY , green, &table);
 8001cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	69f9      	ldr	r1, [r7, #28]
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <play_pong+0x294>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f7ff f942 	bl	8000f88 <set_collective_pixels>



    //Update Ball position and show on screen

    if ((HAL_GetTick() - f_update) > 100) {
 8001d04:	f001 fe72 	bl	80039ec <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d965      	bls.n	8001dde <play_pong+0x24a>

    	f_update = HAL_GetTick();
 8001d12:	f001 fe6b 	bl	80039ec <HAL_GetTick>
 8001d16:	62b8      	str	r0, [r7, #40]	; 0x28

    	  // if the ball goes offscreen, reverse the direction:
    	  if (ballX > (myWidth - 2) || (ballX == 0)) {
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	da02      	bge.n	8001d28 <play_pong+0x194>
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <play_pong+0x19a>
    	    ballDirectionX = -ballDirectionX;
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
    	  }

    	  if (ballY > (myHeight - 2) || (ballY < 0)) {
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d34:	429a      	cmp	r2, r3
 8001d36:	da02      	bge.n	8001d3e <play_pong+0x1aa>
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da02      	bge.n	8001d44 <play_pong+0x1b0>
    	    ballDirectionY = -ballDirectionY;
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	425b      	negs	r3, r3
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    	  }

    	  // check if the ball and the paddle occupy the same space on screen
    	  if (inPaddle(ballX, ballY, paddleX, paddleY, 4, 1)) {
 8001d44:	2301      	movs	r3, #1
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2304      	movs	r3, #4
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d54:	f000 f9b2 	bl	80020bc <inPaddle>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d037      	beq.n	8001dce <play_pong+0x23a>
    	    if(ballX == paddleX && ballY == paddleY){
 8001d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10a      	bne.n	8001d7c <play_pong+0x1e8>
 8001d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d106      	bne.n	8001d7c <play_pong+0x1e8>
    	    ballDirectionX = -ballDirectionX;
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	425b      	negs	r3, r3
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
    	    ballDirectionY = -ballDirectionY;
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	425b      	negs	r3, r3
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7a:	e028      	b.n	8001dce <play_pong+0x23a>
    	    }
    	    else if(ballX == paddleX + 3 && ballY == paddleY){
 8001d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7e:	3303      	adds	r3, #3
 8001d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d107      	bne.n	8001d96 <play_pong+0x202>
 8001d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d103      	bne.n	8001d96 <play_pong+0x202>
    	      ballDirectionX = ballDirectionX;
    	      ballDirectionY = -ballDirectionY;
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d90:	425b      	negs	r3, r3
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
 8001d94:	e01b      	b.n	8001dce <play_pong+0x23a>
    	    }
    	    else if(ballX == paddleX + 1 && ballY == paddleY){
 8001d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d98:	3301      	adds	r3, #1
 8001d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10a      	bne.n	8001db6 <play_pong+0x222>
 8001da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <play_pong+0x222>
    	      ballDirectionX = -ballDirectionX;
 8001da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001daa:	425b      	negs	r3, r3
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
    	      ballDirectionY = -ballDirectionY;
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	425b      	negs	r3, r3
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
 8001db4:	e00b      	b.n	8001dce <play_pong+0x23a>
    	    }
    	    else if(ballX == paddleX + 2 && ballY == paddleY){
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	3302      	adds	r3, #2
 8001dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d106      	bne.n	8001dce <play_pong+0x23a>
 8001dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d102      	bne.n	8001dce <play_pong+0x23a>
    	      ballDirectionX = ballDirectionX;
    	      ballDirectionY = -ballDirectionY;
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	425b      	negs	r3, r3
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    	    }
    	  }

    	  // update the ball's position
    	  ballX += ballDirectionX;
 8001dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd2:	4413      	add	r3, r2
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
    	  ballY += ballDirectionY;
 8001dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	4413      	add	r3, r2
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c



    }
	  // draw the ball's current position
	  set_collective_pixels(ballX,ballY , red, &table);
 8001dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <play_pong+0x294>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	f7ff f8cf 	bl	8000f88 <set_collective_pixels>

    update_panel_pixels();
 8001dea:	f7ff fe31 	bl	8001a50 <update_panel_pixels>

    //Get active Pixels

    if(ballY < 0){
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	da03      	bge.n	8001dfc <play_pong+0x268>

      ballX = 3;
 8001df4:	2303      	movs	r3, #3
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
      ballY = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

	set_panel_clut(pixels, table.colors_tx);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <play_pong+0x294>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4619      	mov	r1, r3
 8001e02:	480a      	ldr	r0, [pc, #40]	; (8001e2c <play_pong+0x298>)
 8001e04:	f7ff f834 	bl	8000e70 <set_panel_clut>

delay_us(50);
 8001e08:	2032      	movs	r0, #50	; 0x32
 8001e0a:	f001 f837 	bl	8002e7c <delay_us>
show_pixels(pixels);
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <play_pong+0x298>)
 8001e10:	f001 fd46 	bl	80038a0 <show_pixels>
delay_us(50);
 8001e14:	2032      	movs	r0, #50	; 0x32
 8001e16:	f001 f831 	bl	8002e7c <delay_us>
	clear_pixels(pixels);
 8001e1a:	4804      	ldr	r0, [pc, #16]	; (8001e2c <play_pong+0x298>)
 8001e1c:	f001 fd50 	bl	80038c0 <clear_pixels>
	HAL_Delay(15);
 8001e20:	200f      	movs	r0, #15
 8001e22:	f001 fdef 	bl	8003a04 <HAL_Delay>
  {
 8001e26:	e6d4      	b.n	8001bd2 <play_pong+0x3e>
 8001e28:	200007c4 	.word	0x200007c4
 8001e2c:	200008b4 	.word	0x200008b4

08001e30 <get_local_ir>:





void get_local_ir(void){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

	for(int x = 0; x < 4; x ++){
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	e03a      	b.n	8001eb2 <get_local_ir+0x82>

		for(int y = 0; y < 4; y ++){
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	e031      	b.n	8001ea6 <get_local_ir+0x76>

			read_ir_sensor(x,y, aval);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	b2d1      	uxtb	r1, r2
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <get_local_ir+0x94>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fd81 	bl	8000954 <read_ir_sensor>
			if(aval[x][y] > table.led_sensitivity){
 8001e52:	491c      	ldr	r1, [pc, #112]	; (8001ec4 <get_local_ir+0x94>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <get_local_ir+0x98>)
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d91b      	bls.n	8001ea0 <get_local_ir+0x70>

				led_active[x][y] = HAL_GetTick();
 8001e68:	f001 fdc0 	bl	80039ec <HAL_GetTick>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4817      	ldr	r0, [pc, #92]	; (8001ecc <get_local_ir+0x9c>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	f840 1023 	str.w	r1, [r0, r3, lsl #2]

				table.panel->active_pixels |= (0x01 << ((x *4) + y));
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <get_local_ir+0x98>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	0099      	lsls	r1, r3, #2
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	4313      	orrs	r3, r2
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <get_local_ir+0x98>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	801a      	strh	r2, [r3, #0]
		for(int y = 0; y < 4; y ++){
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	ddca      	ble.n	8001e42 <get_local_ir+0x12>
	for(int x = 0; x < 4; x ++){
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	ddc1      	ble.n	8001e3c <get_local_ir+0xc>
			}
		}

	}

}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000704 	.word	0x20000704
 8001ec8:	200007c4 	.word	0x200007c4
 8001ecc:	20000784 	.word	0x20000784

08001ed0 <show_ir>:

void show_ir(void){
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af02      	add	r7, sp, #8

	for(int x = 0; x < 4; x ++){
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e0dc      	b.n	8002096 <show_ir+0x1c6>

		for(int y = 0; y < 4; y ++){
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e0d2      	b.n	8002088 <show_ir+0x1b8>




			int tim = (HAL_GetTick() - led_active[x][y]);
 8001ee2:	f001 fd83 	bl	80039ec <HAL_GetTick>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	4870      	ldr	r0, [pc, #448]	; (80020ac <show_ir+0x1dc>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	009a      	lsls	r2, r3, #2
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ef6:	1acb      	subs	r3, r1, r3
 8001ef8:	60fb      	str	r3, [r7, #12]

			//if(tim > FADE_TIME){tim = FADE_TIME;}

			if(tim > FADE_TIME){
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001f00:	dd40      	ble.n	8001f84 <show_ir+0xb4>

				led_color[x][y].red = 0;
 8001f02:	486b      	ldr	r0, [pc, #428]	; (80020b0 <show_ir+0x1e0>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6979      	ldr	r1, [r7, #20]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	441a      	add	r2, r3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	440b      	add	r3, r1
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	4403      	add	r3, r0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]

				led_color[x][y].green = 0;
 8001f1e:	4864      	ldr	r0, [pc, #400]	; (80020b0 <show_ir+0x1e0>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	461a      	mov	r2, r3
 8001f26:	0052      	lsls	r2, r2, #1
 8001f28:	441a      	add	r2, r3
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	4403      	add	r3, r0
 8001f36:	3301      	adds	r3, #1
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

				led_color[x][y].blue = 0;
 8001f3c:	485c      	ldr	r0, [pc, #368]	; (80020b0 <show_ir+0x1e0>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6979      	ldr	r1, [r7, #20]
 8001f42:	461a      	mov	r2, r3
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	441a      	add	r2, r3
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	4403      	add	r3, r0
 8001f54:	3302      	adds	r3, #2
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]

				table.panel->active_pixels &= ~(0x01 << ((x *4) + y));
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <show_ir+0x1e4>)
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0099      	lsls	r1, r3, #2
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	440b      	add	r3, r1
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4013      	ands	r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <show_ir+0x1e4>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	e07e      	b.n	8002082 <show_ir+0x1b2>
			else{




				uint32_t rMap = map(tim, 0, FADE_TIME, led_color_set[x][y].red, 0);
 8001f84:	484c      	ldr	r0, [pc, #304]	; (80020b8 <show_ir+0x1e8>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	6979      	ldr	r1, [r7, #20]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	0052      	lsls	r2, r2, #1
 8001f8e:	441a      	add	r2, r3
 8001f90:	460b      	mov	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	440b      	add	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	4403      	add	r3, r0
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001faa:	2100      	movs	r1, #0
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f001 fca1 	bl	80038f4 <map>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60bb      	str	r3, [r7, #8]

				uint32_t  gMap = map(tim, 0, FADE_TIME, led_color_set[x][y].green, 0);
 8001fb6:	4840      	ldr	r0, [pc, #256]	; (80020b8 <show_ir+0x1e8>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	0052      	lsls	r2, r2, #1
 8001fc0:	441a      	add	r2, r3
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	440b      	add	r3, r1
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	4403      	add	r3, r0
 8001fce:	3301      	adds	r3, #1
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001fde:	2100      	movs	r1, #0
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f001 fc87 	bl	80038f4 <map>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	607b      	str	r3, [r7, #4]

				uint32_t bMap = map(tim, 0, FADE_TIME, led_color_set[x][y].blue, 0);
 8001fea:	4833      	ldr	r0, [pc, #204]	; (80020b8 <show_ir+0x1e8>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	441a      	add	r2, r3
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	440b      	add	r3, r1
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	4403      	add	r3, r0
 8002002:	3302      	adds	r3, #2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	2300      	movs	r3, #0
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002012:	2100      	movs	r1, #0
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f001 fc6d 	bl	80038f4 <map>
 800201a:	4603      	mov	r3, r0
 800201c:	603b      	str	r3, [r7, #0]


				led_color[x][y].red = rMap;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	b2dc      	uxtb	r4, r3
 8002022:	4823      	ldr	r0, [pc, #140]	; (80020b0 <show_ir+0x1e0>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6979      	ldr	r1, [r7, #20]
 8002028:	461a      	mov	r2, r3
 800202a:	0052      	lsls	r2, r2, #1
 800202c:	441a      	add	r2, r3
 800202e:	460b      	mov	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	4403      	add	r3, r0
 800203a:	4622      	mov	r2, r4
 800203c:	701a      	strb	r2, [r3, #0]

				led_color[x][y].green = gMap;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	b2dc      	uxtb	r4, r3
 8002042:	481b      	ldr	r0, [pc, #108]	; (80020b0 <show_ir+0x1e0>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	461a      	mov	r2, r3
 800204a:	0052      	lsls	r2, r2, #1
 800204c:	441a      	add	r2, r3
 800204e:	460b      	mov	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	440b      	add	r3, r1
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	4403      	add	r3, r0
 800205a:	3301      	adds	r3, #1
 800205c:	4622      	mov	r2, r4
 800205e:	701a      	strb	r2, [r3, #0]

				led_color[x][y].blue = bMap;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2dc      	uxtb	r4, r3
 8002064:	4812      	ldr	r0, [pc, #72]	; (80020b0 <show_ir+0x1e0>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	461a      	mov	r2, r3
 800206c:	0052      	lsls	r2, r2, #1
 800206e:	441a      	add	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	440b      	add	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	4403      	add	r3, r0
 800207c:	3302      	adds	r3, #2
 800207e:	4622      	mov	r2, r4
 8002080:	701a      	strb	r2, [r3, #0]
		for(int y = 0; y < 4; y ++){
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	3301      	adds	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b03      	cmp	r3, #3
 800208c:	f77f af29 	ble.w	8001ee2 <show_ir+0x12>
	for(int x = 0; x < 4; x ++){
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b03      	cmp	r3, #3
 800209a:	f77f af1f 	ble.w	8001edc <show_ir+0xc>

		}

	}

delay_us(20);
 800209e:	2014      	movs	r0, #20
 80020a0:	f000 feec 	bl	8002e7c <delay_us>


}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	20000784 	.word	0x20000784
 80020b0:	20000724 	.word	0x20000724
 80020b4:	200007c4 	.word	0x200007c4
 80020b8:	20000754 	.word	0x20000754

080020bc <inPaddle>:



uint8_t  inPaddle(int x, int y, int rectX, int rectY, int rectWidth, int rectHeight) {
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
	uint8_t result = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]

  if ((x >= rectX && x <= (rectX + rectWidth)) &&
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	db11      	blt.n	80020fa <inPaddle+0x3e>
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	4413      	add	r3, r2
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dc0b      	bgt.n	80020fa <inPaddle+0x3e>
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	db07      	blt.n	80020fa <inPaddle+0x3e>
      (y >= rectY && y <= (rectY + rectHeight))) {
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	4413      	add	r3, r2
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dc01      	bgt.n	80020fa <inPaddle+0x3e>
    result = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <is_pixel_active>:


uint8_t is_pixel_active(struct panel_assembly * table, uint16_t x, uint16_t y){
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	803b      	strh	r3, [r7, #0]


	//If in first panel
	if(x < 4 && y < 4){
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d828      	bhi.n	8002170 <is_pixel_active+0x68>
 800211e:	883b      	ldrh	r3, [r7, #0]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d825      	bhi.n	8002170 <is_pixel_active+0x68>

		if(x < 2){
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d80c      	bhi.n	8002144 <is_pixel_active+0x3c>

			return bitread(table->panel->active_pixels, (((x)*4)));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f000 febb 	bl	8002eb4 <bitread>
 800213e:	4603      	mov	r3, r0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e09b      	b.n	800227c <is_pixel_active+0x174>

		}

		else if(x >= 2 && x < 4){
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d912      	bls.n	8002170 <is_pixel_active+0x68>
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d80f      	bhi.n	8002170 <is_pixel_active+0x68>

			return bitread((table->panel->active_pixels >> 8), (((x-2)*4)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	3b02      	subs	r3, #2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f000 fea5 	bl	8002eb4 <bitread>
 800216a:	4603      	mov	r3, r0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e085      	b.n	800227c <is_pixel_active+0x174>
		}


	}
	//Get panel number
	uint32_t panel_num = ((y / 4) * table->x);
 8002170:	883b      	ldrh	r3, [r7, #0]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	b29b      	uxth	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	785b      	ldrb	r3, [r3, #1]
 800217c:	fb03 f302 	mul.w	r3, r3, r2
 8002180:	617b      	str	r3, [r7, #20]

	//If odd row
	if((y/4) % 2){
 8002182:	883b      	ldrh	r3, [r7, #0]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	b29b      	uxth	r3, r3
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <is_pixel_active+0xa2>

		panel_num += (table->x - (x/4));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	461a      	mov	r2, r3
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	b29b      	uxth	r3, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4413      	add	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e007      	b.n	80021ba <is_pixel_active+0xb2>

	}
	else{

		panel_num += ((x/4) + 1);
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4413      	add	r3, r2
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]

	}

	int pandex = (table->num_panels - panel_num) * 2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]

	uint8_t xmod = x % 4;
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	72fb      	strb	r3, [r7, #11]
	uint8_t ymod = y % 4;
 80021d2:	883b      	ldrh	r3, [r7, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	72bb      	strb	r3, [r7, #10]

	uint8_t retval = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	74fb      	strb	r3, [r7, #19]

	switch(xmod){
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d848      	bhi.n	8002278 <is_pixel_active+0x170>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <is_pixel_active+0xe4>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	0800221b 	.word	0x0800221b
 80021f4:	0800223b 	.word	0x0800223b
 80021f8:	08002259 	.word	0x08002259

	case 0: retval = ((table->all_active_pixels[pandex + 2] >> ymod) & 0x01);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3302      	adds	r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	7abb      	ldrb	r3, [r7, #10]
 800220c:	fa42 f303 	asr.w	r3, r2, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	74fb      	strb	r3, [r7, #19]

		break;
 8002218:	e02f      	b.n	800227a <is_pixel_active+0x172>

	case 1: retval = ((table->all_active_pixels[pandex + 2] >> (ymod + 4)) & 0x01);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3302      	adds	r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	7abb      	ldrb	r3, [r7, #10]
 800222a:	3304      	adds	r3, #4
 800222c:	fa42 f303 	asr.w	r3, r2, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	74fb      	strb	r3, [r7, #19]
		break;
 8002238:	e01f      	b.n	800227a <is_pixel_active+0x172>

	case 2: retval = ((table->all_active_pixels[pandex + 1] >> ymod) & 0x01);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	7abb      	ldrb	r3, [r7, #10]
 800224a:	fa42 f303 	asr.w	r3, r2, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	74fb      	strb	r3, [r7, #19]
		break;
 8002256:	e010      	b.n	800227a <is_pixel_active+0x172>

	case 3: retval = ((table->all_active_pixels[pandex + 1] >> (ymod + 4)) & 0x01);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3301      	adds	r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	7abb      	ldrb	r3, [r7, #10]
 8002268:	3304      	adds	r3, #4
 800226a:	fa42 f303 	asr.w	r3, r2, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	74fb      	strb	r3, [r7, #19]
		break;
 8002276:	e000      	b.n	800227a <is_pixel_active+0x172>

	default:
		break;
 8002278:	bf00      	nop

	}

	return retval;
 800227a:	7cfb      	ldrb	r3, [r7, #19]

}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <set_cs_output>:

void set_cs_output(uint8_t csPin){
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]

	switch(csPin){
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3b01      	subs	r3, #1
 8002292:	2b03      	cmp	r3, #3
 8002294:	d86e      	bhi.n	8002374 <set_cs_output+0xf0>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <set_cs_output+0x18>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022df 	.word	0x080022df
 80022a4:	08002343 	.word	0x08002343
 80022a8:	08002311 	.word	0x08002311

	case CS_LEFT:

		GPIOB->PUPDR |= ((0x01) << 2);
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <set_cs_output+0x100>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a34      	ldr	r2, [pc, #208]	; (8002384 <set_cs_output+0x100>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	60d3      	str	r3, [r2, #12]

		GPIOB->OSPEEDR |= ((0x03) << 2);
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <set_cs_output+0x100>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <set_cs_output+0x100>)
 80022be:	f043 030c 	orr.w	r3, r3, #12
 80022c2:	6093      	str	r3, [r2, #8]

		//Set ODR
		GPIOB->ODR |= ((0x01) << 1);
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <set_cs_output+0x100>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <set_cs_output+0x100>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	6153      	str	r3, [r2, #20]

		//Set Mode
		GPIOB->MODER |= ((0x01) << 2);
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <set_cs_output+0x100>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <set_cs_output+0x100>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6013      	str	r3, [r2, #0]

		break;
 80022dc:	e04b      	b.n	8002376 <set_cs_output+0xf2>

	case CS_RIGHT:

		GPIOB->PUPDR |= ((0x01) << 20);
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <set_cs_output+0x100>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <set_cs_output+0x100>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	60d3      	str	r3, [r2, #12]

		GPIOB->OSPEEDR |= ((0x03) << 20);
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <set_cs_output+0x100>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <set_cs_output+0x100>)
 80022f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80022f4:	6093      	str	r3, [r2, #8]

		//Set ODR
		GPIOB->ODR |= ((0x01) << 10);
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <set_cs_output+0x100>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4a22      	ldr	r2, [pc, #136]	; (8002384 <set_cs_output+0x100>)
 80022fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002300:	6153      	str	r3, [r2, #20]

		//Set Mode
		GPIOB->MODER |= ((0x01) << 20);
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <set_cs_output+0x100>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <set_cs_output+0x100>)
 8002308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230c:	6013      	str	r3, [r2, #0]

		break;
 800230e:	e032      	b.n	8002376 <set_cs_output+0xf2>

	case CS_UP:

		GPIOA->PUPDR |= ((0x01) << 20);
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <set_cs_output+0x104>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <set_cs_output+0x104>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]

		GPIOA->OSPEEDR |= ((0x03) << 20);
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <set_cs_output+0x104>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <set_cs_output+0x104>)
 8002322:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002326:	6093      	str	r3, [r2, #8]

		//Set ODR
		GPIOA->ODR |= ((0x01) << 10);
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <set_cs_output+0x104>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <set_cs_output+0x104>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	6153      	str	r3, [r2, #20]

		//Set Mode
		GPIOA->MODER |= ((0x01) << 20);
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <set_cs_output+0x104>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <set_cs_output+0x104>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233e:	6013      	str	r3, [r2, #0]

		break;
 8002340:	e019      	b.n	8002376 <set_cs_output+0xf2>

	case CS_DOWN:

		GPIOB->PUPDR |= ((0x01) << 4);
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <set_cs_output+0x100>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <set_cs_output+0x100>)
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	60d3      	str	r3, [r2, #12]

		GPIOB->OSPEEDR |= ((0x03) << 4);
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <set_cs_output+0x100>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <set_cs_output+0x100>)
 8002354:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002358:	6093      	str	r3, [r2, #8]

		//Set ODR
		GPIOB->ODR |= ((0x01) << 2);
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <set_cs_output+0x100>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <set_cs_output+0x100>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6153      	str	r3, [r2, #20]

		//Set Mode
		GPIOB->MODER |= ((0x01) << 4);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <set_cs_output+0x100>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a06      	ldr	r2, [pc, #24]	; (8002384 <set_cs_output+0x100>)
 800236c:	f043 0310 	orr.w	r3, r3, #16
 8002370:	6013      	str	r3, [r2, #0]

		break;
 8002372:	e000      	b.n	8002376 <set_cs_output+0xf2>

	default:
		break;
 8002374:	bf00      	nop

	}


}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40020400 	.word	0x40020400
 8002388:	40020000 	.word	0x40020000

0800238c <get_header_payload>:


void get_header_payload(uint8_t source){
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]

	set_spi2_mode(SPI2_SLAVE);
 8002396:	2000      	movs	r0, #0
 8002398:	f000 fca0 	bl	8002cdc <set_spi2_mode>

	//Turn on SPI
	SPI2->CR1 |= SPI_CR1_SPE;
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <get_header_payload+0xfc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a39      	ldr	r2, [pc, #228]	; (8002488 <get_header_payload+0xfc>)
 80023a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a6:	6013      	str	r3, [r2, #0]

	//Get Header
	get_panel_header(rx_header);
 80023a8:	4838      	ldr	r0, [pc, #224]	; (800248c <get_header_payload+0x100>)
 80023aa:	f7fe fe99 	bl	80010e0 <get_panel_header>

	//Process command from geader
	if((rx_header[HEADER_CMD] == PANEL_GET_POS_CMD)|
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <get_header_payload+0x100>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b0a      	cmp	r3, #10
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2da      	uxtb	r2, r3
	   (rx_header[HEADER_CMD] == PANEL_SET_PIXEL_CMD)|
 80023bc:	4b33      	ldr	r3, [pc, #204]	; (800248c <get_header_payload+0x100>)
 80023be:	781b      	ldrb	r3, [r3, #0]
	if((rx_header[HEADER_CMD] == PANEL_GET_POS_CMD)|
 80023c0:	2b0b      	cmp	r3, #11
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
	   (rx_header[HEADER_CMD] == PANEL_SET_AUTO_CMD)|
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <get_header_payload+0x100>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
	   (rx_header[HEADER_CMD] == PANEL_SET_PIXEL_CMD)|
 80023de:	4313      	orrs	r3, r2
	    rx_header[HEADER_CMD] == PANEL_GET_PIX_CMD){
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <get_header_payload+0x100>)
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	2a0d      	cmp	r2, #13
 80023e6:	bf0c      	ite	eq
 80023e8:	2201      	moveq	r2, #1
 80023ea:	2200      	movne	r2, #0
 80023ec:	b2d2      	uxtb	r2, r2
	   (rx_header[HEADER_CMD] == PANEL_SET_AUTO_CMD)|
 80023ee:	4313      	orrs	r3, r2
	if((rx_header[HEADER_CMD] == PANEL_GET_POS_CMD)|
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d041      	beq.n	8002478 <get_header_payload+0xec>

		//Parse data length
		uint16_t datalen = (rx_header[PAYLOAD_HIGH] << 8 | rx_header[PAYLOAD_LOW]);
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <get_header_payload+0x100>)
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <get_header_payload+0x100>)
 80023fe:	78db      	ldrb	r3, [r3, #3]
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21b      	sxth	r3, r3
 8002406:	81fb      	strh	r3, [r7, #14]

		if(datalen > 800){
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800240e:	d902      	bls.n	8002416 <get_header_payload+0x8a>

			datalen = 800;
 8002410:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002414:	81fb      	strh	r3, [r7, #14]

		}

		get_panel_payload(datalen, rx_data);
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	491d      	ldr	r1, [pc, #116]	; (8002490 <get_header_payload+0x104>)
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fe9a 	bl	8001154 <get_panel_payload>

		switch(rx_header[HEADER_CMD]){
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <get_header_payload+0x100>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	3b0a      	subs	r3, #10
 8002426:	2b03      	cmp	r3, #3
 8002428:	d828      	bhi.n	800247c <get_header_payload+0xf0>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <get_header_payload+0xa4>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002441 	.word	0x08002441
 8002434:	0800244f 	.word	0x0800244f
 8002438:	0800245d 	.word	0x0800245d
 800243c:	0800246b 	.word	0x0800246b

			case PANEL_GET_POS_CMD: int_source = source;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <get_header_payload+0x108>)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	7013      	strb	r3, [r2, #0]
									int_command = get_position;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <get_header_payload+0x10c>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
				break;
 800244c:	e017      	b.n	800247e <get_header_payload+0xf2>

			case PANEL_SET_PIXEL_CMD: int_source = source;
 800244e:	4a11      	ldr	r2, [pc, #68]	; (8002494 <get_header_payload+0x108>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	7013      	strb	r3, [r2, #0]
									  int_command = set_pixels;
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <get_header_payload+0x10c>)
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
				break;
 800245a:	e010      	b.n	800247e <get_header_payload+0xf2>

			case PANEL_SET_AUTO_CMD: int_source = source;
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <get_header_payload+0x108>)
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	7013      	strb	r3, [r2, #0]
								     int_command = set_auto;
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <get_header_payload+0x10c>)
 8002464:	2203      	movs	r2, #3
 8002466:	701a      	strb	r2, [r3, #0]
			break;
 8002468:	e009      	b.n	800247e <get_header_payload+0xf2>

			case PANEL_GET_PIX_CMD: int_source = source;
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <get_header_payload+0x108>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	7013      	strb	r3, [r2, #0]
									int_command = get_pixels;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <get_header_payload+0x10c>)
 8002472:	2204      	movs	r2, #4
 8002474:	701a      	strb	r2, [r3, #0]
				break;
 8002476:	e002      	b.n	800247e <get_header_payload+0xf2>
			default:
				break;

		}

	}
 8002478:	bf00      	nop
 800247a:	e000      	b.n	800247e <get_header_payload+0xf2>
				break;
 800247c:	bf00      	nop
		//Turn off SPI
//		SPI2->CR1 &= ~(SPI_CR1_SPE);



}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40003800 	.word	0x40003800
 800248c:	200000b8 	.word	0x200000b8
 8002490:	200000bc 	.word	0x200000bc
 8002494:	200007f0 	.word	0x200007f0
 8002498:	200007f1 	.word	0x200007f1

0800249c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0dc      	sub	sp, #368	; 0x170
 80024a0:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80024a2:	f001 fa6d 	bl	8003980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a6:	f000 fbaf 	bl	8002c08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024aa:	f7fe f95d 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 80024ae:	f7fe f91d 	bl	80006ec <MX_DMA_Init>
  MX_SPI1_Init();
 80024b2:	f000 fd2b 	bl	8002f0c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80024b6:	f001 f8d5 	bl	8003664 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80024ba:	f7fe f807 	bl	80004cc <MX_ADC1_Init>
  MX_SPI2_Init();
 80024be:	f000 fd5b 	bl	8002f78 <MX_SPI2_Init>
  MX_TIM1_Init();
 80024c2:	f001 f85d 	bl	8003580 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  //Set default panel colors
  for(int y = 0; y < 4; y++){
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80024cc:	e021      	b.n	8002512 <main+0x76>

	  for(int x = 0; x < 4; x++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80024d4:	e014      	b.n	8002500 <main+0x64>
//			  }
//
//		  }

		  //led_color_set[x][y].blue = 50;
		  led_color_set[x][y].red = 50;
 80024d6:	48bd      	ldr	r0, [pc, #756]	; (80027cc <main+0x330>)
 80024d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024dc:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80024e0:	461a      	mov	r2, r3
 80024e2:	0052      	lsls	r2, r2, #1
 80024e4:	441a      	add	r2, r3
 80024e6:	460b      	mov	r3, r1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	440b      	add	r3, r1
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	4403      	add	r3, r0
 80024f2:	2232      	movs	r2, #50	; 0x32
 80024f4:	701a      	strb	r2, [r3, #0]
	  for(int x = 0; x < 4; x++){
 80024f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024fa:	3301      	adds	r3, #1
 80024fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002500:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002504:	2b03      	cmp	r3, #3
 8002506:	dde6      	ble.n	80024d6 <main+0x3a>
  for(int y = 0; y < 4; y++){
 8002508:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800250c:	3301      	adds	r3, #1
 800250e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002512:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002516:	2b03      	cmp	r3, #3
 8002518:	ddd9      	ble.n	80024ce <main+0x32>

	  }

  }

  for(int x = 0; x < 800; x++){
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002520:	e00a      	b.n	8002538 <main+0x9c>

	  resp_code[x] = RESP_CODE;
 8002522:	4aab      	ldr	r2, [pc, #684]	; (80027d0 <main+0x334>)
 8002524:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002528:	4413      	add	r3, r2
 800252a:	22bf      	movs	r2, #191	; 0xbf
 800252c:	701a      	strb	r2, [r3, #0]
  for(int x = 0; x < 800; x++){
 800252e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002532:	3301      	adds	r3, #1
 8002534:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002538:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800253c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002540:	dbef      	blt.n	8002522 <main+0x86>

  }

  table.panel = &panel;
 8002542:	4ba4      	ldr	r3, [pc, #656]	; (80027d4 <main+0x338>)
 8002544:	4aa4      	ldr	r2, [pc, #656]	; (80027d8 <main+0x33c>)
 8002546:	611a      	str	r2, [r3, #16]

  if(panel_type == PANEL_CENTRAL){
 8002548:	4ba4      	ldr	r3, [pc, #656]	; (80027dc <main+0x340>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d135      	bne.n	80025bc <main+0x120>

	  set_spi2_mode(SPI2_MASTER);
 8002550:	2001      	movs	r0, #1
 8002552:	f000 fbc3 	bl	8002cdc <set_spi2_mode>

	  //Configure GPIOS fo CS output
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	461a      	mov	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	6053      	str	r3, [r2, #4]
 8002562:	6093      	str	r3, [r2, #8]
 8002564:	60d3      	str	r3, [r2, #12]
 8002566:	6113      	str	r3, [r2, #16]

	  HAL_GPIO_DeInit(GPIOB, LEFT_CS_Pin|RIGHT_CS_Pin|DOWN_CS_Pin);
 8002568:	f240 4106 	movw	r1, #1030	; 0x406
 800256c:	489c      	ldr	r0, [pc, #624]	; (80027e0 <main+0x344>)
 800256e:	f002 fd27 	bl	8004fc0 <HAL_GPIO_DeInit>

	  GPIO_InitStruct.Pin = LEFT_CS_Pin|RIGHT_CS_Pin|DOWN_CS_Pin;
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	f240 4206 	movw	r2, #1030	; 0x406
 800257a:	601a      	str	r2, [r3, #0]

	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	2201      	movs	r2, #1
 8002582:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	2201      	movs	r2, #1
 800258a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	2203      	movs	r2, #3
 8002592:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	f107 0308 	add.w	r3, r7, #8
 8002598:	4619      	mov	r1, r3
 800259a:	4891      	ldr	r0, [pc, #580]	; (80027e0 <main+0x344>)
 800259c:	f002 fb8c 	bl	8004cb8 <HAL_GPIO_Init>
	  GPIOB->BSRR = RIGHT_CS_Pin;
 80025a0:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <main+0x344>)
 80025a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a6:	619a      	str	r2, [r3, #24]
	  GPIOB->BSRR = LEFT_CS_Pin;
 80025a8:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <main+0x344>)
 80025aa:	2202      	movs	r2, #2
 80025ac:	619a      	str	r2, [r3, #24]
	  GPIOB->PUPDR |= 0x02 << 26;
 80025ae:	4b8c      	ldr	r3, [pc, #560]	; (80027e0 <main+0x344>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a8b      	ldr	r2, [pc, #556]	; (80027e0 <main+0x344>)
 80025b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025b8:	60d3      	str	r3, [r2, #12]
 80025ba:	e01a      	b.n	80025f2 <main+0x156>
	  //HAL_NVIC_DisableIRQ(EXTI0_IRQn);


  }else{

	  	table.colors_tx = clut_ram;
 80025bc:	4b85      	ldr	r3, [pc, #532]	; (80027d4 <main+0x338>)
 80025be:	4a89      	ldr	r2, [pc, #548]	; (80027e4 <main+0x348>)
 80025c0:	609a      	str	r2, [r3, #8]
		GPIOB->MODER &= ~(0x3F << 26);
 80025c2:	4b87      	ldr	r3, [pc, #540]	; (80027e0 <main+0x344>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a86      	ldr	r2, [pc, #536]	; (80027e0 <main+0x344>)
 80025c8:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80025cc:	6013      	str	r3, [r2, #0]
		GPIOB->PUPDR &= ~(0x3F << 26);
 80025ce:	4b84      	ldr	r3, [pc, #528]	; (80027e0 <main+0x344>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a83      	ldr	r2, [pc, #524]	; (80027e0 <main+0x344>)
 80025d4:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80025d8:	60d3      	str	r3, [r2, #12]
		GPIOB->PUPDR |= 0x02 << 28;
 80025da:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <main+0x344>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a80      	ldr	r2, [pc, #512]	; (80027e0 <main+0x344>)
 80025e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025e4:	60d3      	str	r3, [r2, #12]
		GPIOB->PUPDR |= 0x02 << 26;
 80025e6:	4b7e      	ldr	r3, [pc, #504]	; (80027e0 <main+0x344>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4a7d      	ldr	r2, [pc, #500]	; (80027e0 <main+0x344>)
 80025ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025f0:	60d3      	str	r3, [r2, #12]


  }

  //Set LED sensitivity
  table.led_sensitivity = 120;
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <main+0x338>)
 80025f4:	2278      	movs	r2, #120	; 0x78
 80025f6:	809a      	strh	r2, [r3, #4]
  table.panel->red = 0;
 80025f8:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <main+0x338>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2200      	movs	r2, #0
 80025fe:	731a      	strb	r2, [r3, #12]
  table.panel->green = 10;
 8002600:	4b74      	ldr	r3, [pc, #464]	; (80027d4 <main+0x338>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	220a      	movs	r2, #10
 8002606:	735a      	strb	r2, [r3, #13]
  table.panel->blue = 10;
 8002608:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <main+0x338>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	220a      	movs	r2, #10
 800260e:	739a      	strb	r2, [r3, #14]
  ir_color.green = 20;
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <main+0x34c>)
 8002612:	2214      	movs	r2, #20
 8002614:	705a      	strb	r2, [r3, #1]
  ir_color.blue = 20;
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <main+0x34c>)
 8002618:	2214      	movs	r2, #20
 800261a:	709a      	strb	r2, [r3, #2]
  //RESET HM11 and enable LEDs
  HAL_GPIO_WritePin(GPIOB, HM_RST___LED_ON_Pin, GPIO_PIN_SET);
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002622:	486f      	ldr	r0, [pc, #444]	; (80027e0 <main+0x344>)
 8002624:	f002 fdb0 	bl	8005188 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8002628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800262c:	f001 f9ea 	bl	8003a04 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, HM_RST___LED_ON_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002636:	486a      	ldr	r0, [pc, #424]	; (80027e0 <main+0x344>)
 8002638:	f002 fda6 	bl	8005188 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800263c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002640:	f001 f9e0 	bl	8003a04 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, HM_RST___LED_ON_Pin, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264a:	4865      	ldr	r0, [pc, #404]	; (80027e0 <main+0x344>)
 800264c:	f002 fd9c 	bl	8005188 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8002650:	2064      	movs	r0, #100	; 0x64
 8002652:	f001 f9d7 	bl	8003a04 <HAL_Delay>
  struct Led_pixels pixels[NUM_PIXELS];

  clear_pixels(pixels);
 8002656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f930 	bl	80038c0 <clear_pixels>
	HAL_Delay(10);
 8002660:	200a      	movs	r0, #10
 8002662:	f001 f9cf 	bl	8003a04 <HAL_Delay>
	show_pixels(pixels);
 8002666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f918 	bl	80038a0 <show_pixels>
	HAL_Delay(10);
 8002670:	200a      	movs	r0, #10
 8002672:	f001 f9c7 	bl	8003a04 <HAL_Delay>



uint8_t panel_pix_in[16*3] = {0};
 8002676:	2300      	movs	r3, #0
 8002678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800267a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800267e:	222c      	movs	r2, #44	; 0x2c
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fe58 	bl	8007338 <memset>
uint8_t panel_pix_out[16*3] = {0};
 8002688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	3304      	adds	r3, #4
 8002692:	222c      	movs	r2, #44	; 0x2c
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fe4e 	bl	8007338 <memset>


uint32_t my_tick = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
uint16_t aval[4][4];



uint8_t container = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
int round = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
uint32_t last_update = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

HAL_TIM_Base_Start(&htim1);
 80026b4:	484d      	ldr	r0, [pc, #308]	; (80027ec <main+0x350>)
 80026b6:	f003 fe42 	bl	800633e <HAL_TIM_Base_Start>


//Clear current LEDs
clear_pixels(pixels);
 80026ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f8fe 	bl	80038c0 <clear_pixels>
show_pixels(pixels);
 80026c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 f8e9 	bl	80038a0 <show_pixels>

HAL_Delay(500);
 80026ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d2:	f001 f997 	bl	8003a04 <HAL_Delay>

HAL_Delay(15000);

#endif

int last_cnt = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
int diff = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  char my_name[] = "RODNEY";
 80026e2:	463b      	mov	r3, r7
 80026e4:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <main+0x354>)
 80026e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ea:	6018      	str	r0, [r3, #0]
 80026ec:	3304      	adds	r3, #4
 80026ee:	8019      	strh	r1, [r3, #0]
 80026f0:	3302      	adds	r3, #2
 80026f2:	0c0a      	lsrs	r2, r1, #16
 80026f4:	701a      	strb	r2, [r3, #0]

//Read all IR Values
if(panel_type == PANEL_CENTRAL){
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <main+0x340>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8134 	bne.w	8002968 <main+0x4cc>


HAL_Delay(3000);
 8002700:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002704:	f001 f97e 	bl	8003a04 <HAL_Delay>

//while(1){
	  got_structure = get_panel_structure();
 8002708:	f7fe ff1c 	bl	8001544 <get_panel_structure>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <main+0x358>)
 8002712:	701a      	strb	r2, [r3, #0]

	  table.num_panels = rx_data[0];
 8002714:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <main+0x35c>)
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <main+0x338>)
 800271a:	701a      	strb	r2, [r3, #0]
	  table.x = rx_data[1];
 800271c:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <main+0x35c>)
 800271e:	785a      	ldrb	r2, [r3, #1]
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <main+0x338>)
 8002722:	705a      	strb	r2, [r3, #1]
	  table.y = rx_data[2];
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <main+0x35c>)
 8002726:	789a      	ldrb	r2, [r3, #2]
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <main+0x338>)
 800272a:	709a      	strb	r2, [r3, #2]

	  if(table.num_panels == 0){
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <main+0x338>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <main+0x29e>

	  	  table.num_panels = 1;
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <main+0x338>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]

	  }
	  if(table.num_panels > 25 ){
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <main+0x338>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b19      	cmp	r3, #25
 8002740:	d902      	bls.n	8002748 <main+0x2ac>

	  	table.num_panels = 25;
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <main+0x338>)
 8002744:	2219      	movs	r2, #25
 8002746:	701a      	strb	r2, [r3, #0]

	  }

	  //allocate memory for tx pixels
	  int len = 8 * (table.x * table.y);
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <main+0x338>)
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	461a      	mov	r2, r3
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <main+0x338>)
 8002750:	789b      	ldrb	r3, [r3, #2]
 8002752:	fb03 f302 	mul.w	r3, r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  free(table.colors_tx);
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <main+0x338>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fde1 	bl	8007328 <free>

	  table.colors_tx = (uint8_t *)malloc(sizeof(uint8_t) * len);
 8002766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fdd4 	bl	8007318 <malloc>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <main+0x338>)
 8002776:	609a      	str	r2, [r3, #8]

	  free(table.all_active_pixels);
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <main+0x338>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	f004 fdd3 	bl	8007328 <free>

	  table.all_active_pixels = (uint8_t *)malloc(sizeof(uint16_t) * table.num_panels);
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <main+0x338>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f004 fdc5 	bl	8007318 <malloc>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <main+0x338>)
 8002794:	60da      	str	r2, [r3, #12]

	  for(int i = 0; i < sizeof(uint16_t) * table.num_panels; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800279c:	e00b      	b.n	80027b6 <main+0x31a>
	  {

		  table.all_active_pixels[i] = 0;
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <main+0x338>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027a6:	4413      	add	r3, r2
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < sizeof(uint16_t) * table.num_panels; i++)
 80027ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027b0:	3301      	adds	r3, #1
 80027b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <main+0x338>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	005a      	lsls	r2, r3, #1
 80027bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d8ec      	bhi.n	800279e <main+0x302>

	  }

	  for(int i = 0; i < len; i++){
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027ca:	e023      	b.n	8002814 <main+0x378>
 80027cc:	20000754 	.word	0x20000754
 80027d0:	200003dc 	.word	0x200003dc
 80027d4:	200007c4 	.word	0x200007c4
 80027d8:	200007d8 	.word	0x200007d8
 80027dc:	20000024 	.word	0x20000024
 80027e0:	40020400 	.word	0x40020400
 80027e4:	200006fc 	.word	0x200006fc
 80027e8:	200007ec 	.word	0x200007ec
 80027ec:	20000ae4 	.word	0x20000ae4
 80027f0:	080074f0 	.word	0x080074f0
 80027f4:	200007ef 	.word	0x200007ef
 80027f8:	200000bc 	.word	0x200000bc

	  	  table.colors_tx[i] = 0;
 80027fc:	4bcc      	ldr	r3, [pc, #816]	; (8002b30 <main+0x694>)
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002804:	4413      	add	r3, r2
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < len; i++){
 800280a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800280e:	3301      	adds	r3, #1
 8002810:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002814:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800281c:	429a      	cmp	r2, r3
 800281e:	dbed      	blt.n	80027fc <main+0x360>

	  }



	  for(int x = 0; x < table.num_panels; x++){
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002826:	e01f      	b.n	8002868 <main+0x3cc>


		  set_pixel_color(pixels, x, 20, 0, 0);
 8002828:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800282c:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	2214      	movs	r2, #20
 8002838:	f000 fffe 	bl	8003838 <set_pixel_color>

		  if(last_cnt != table.num_panels){
 800283c:	4bbc      	ldr	r3, [pc, #752]	; (8002b30 <main+0x694>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <main+0x3c2>

			  set_pixel_color(pixels, x, 0, 0, 20);
 800284a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800284e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002852:	2314      	movs	r3, #20
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2300      	movs	r3, #0
 8002858:	2200      	movs	r2, #0
 800285a:	f000 ffed 	bl	8003838 <set_pixel_color>
	  for(int x = 0; x < table.num_panels; x++){
 800285e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002862:	3301      	adds	r3, #1
 8002864:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002868:	4bb1      	ldr	r3, [pc, #708]	; (8002b30 <main+0x694>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002872:	4293      	cmp	r3, r2
 8002874:	dbd8      	blt.n	8002828 <main+0x38c>

		  }
	  }
	    HAL_Delay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f001 f8c4 	bl	8003a04 <HAL_Delay>
		show_pixels(pixels);
 800287c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f80d 	bl	80038a0 <show_pixels>
		HAL_Delay(5);
 8002886:	2005      	movs	r0, #5
 8002888:	f001 f8bc 	bl	8003a04 <HAL_Delay>
		clear_pixels(pixels);
 800288c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002890:	4618      	mov	r0, r3
 8002892:	f001 f815 	bl	80038c0 <clear_pixels>
		HAL_Delay(5);
 8002896:	2005      	movs	r0, #5
 8002898:	f001 f8b4 	bl	8003a04 <HAL_Delay>
		if(last_cnt != table.num_panels){
 800289c:	4ba4      	ldr	r3, [pc, #656]	; (8002b30 <main+0x694>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d006      	beq.n	80028b8 <main+0x41c>

			HAL_Delay(30);
 80028aa:	201e      	movs	r0, #30
 80028ac:	f001 f8aa 	bl	8003a04 <HAL_Delay>
			last_cnt = table.num_panels;
 80028b0:	4b9f      	ldr	r3, [pc, #636]	; (8002b30 <main+0x694>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		}


//}

	get_local_ir();
 80028b8:	f7ff faba 	bl	8001e30 <get_local_ir>

	show_ir();
 80028bc:	f7ff fb08 	bl	8001ed0 <show_ir>

	set_panel_pixels(pixels, led_color);
 80028c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028c4:	499b      	ldr	r1, [pc, #620]	; (8002b34 <main+0x698>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fa6c 	bl	8000da4 <set_panel_pixels>

	set_panel_clut(pixels, table.colors_tx);
 80028cc:	4b98      	ldr	r3, [pc, #608]	; (8002b30 <main+0x694>)
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe faca 	bl	8000e70 <set_panel_clut>
	delay_us(10);
 80028dc:	200a      	movs	r0, #10
 80028de:	f000 facd 	bl	8002e7c <delay_us>
//	HAL_Delay(1);
	show_pixels(pixels);
 80028e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 ffda 	bl	80038a0 <show_pixels>
	delay_us(50);
 80028ec:	2032      	movs	r0, #50	; 0x32
 80028ee:	f000 fac5 	bl	8002e7c <delay_us>
//	HAL_Delay(1);
	clear_pixels(pixels);
 80028f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 ffe2 	bl	80038c0 <clear_pixels>
	delay_us(10);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f000 fabd 	bl	8002e7c <delay_us>

#ifdef CALIB
if(HAL_GetTick() - last_update > 200){
 8002902:	f001 f873 	bl	80039ec <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2bc8      	cmp	r3, #200	; 0xc8
 8002910:	d925      	bls.n	800295e <main+0x4c2>

		last_update = HAL_GetTick();
 8002912:	f001 f86b 	bl	80039ec <HAL_GetTick>
 8002916:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158





if(!got_structure){
 800291a:	4b87      	ldr	r3, [pc, #540]	; (8002b38 <main+0x69c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d11d      	bne.n	800295e <main+0x4c2>
//		update_panel_pixels();
//		clear_pixels(pixels);
//		HAL_Delay(900);
//		}

	play_pong();
 8002922:	f7ff f937 	bl	8001b94 <play_pong>

	set_panel_clut(pixels, table.colors_tx);
 8002926:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <main+0x694>)
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fa9d 	bl	8000e70 <set_panel_clut>
	delay_us(10);
 8002936:	200a      	movs	r0, #10
 8002938:	f000 faa0 	bl	8002e7c <delay_us>
//	HAL_Delay(1);
	show_pixels(pixels);
 800293c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002940:	4618      	mov	r0, r3
 8002942:	f000 ffad 	bl	80038a0 <show_pixels>
	delay_us(50);
 8002946:	2032      	movs	r0, #50	; 0x32
 8002948:	f000 fa98 	bl	8002e7c <delay_us>
//	HAL_Delay(1);
	clear_pixels(pixels);
 800294c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002950:	4618      	mov	r0, r3
 8002952:	f000 ffb5 	bl	80038c0 <clear_pixels>
	delay_us(10);
 8002956:	200a      	movs	r0, #10
 8002958:	f000 fa90 	bl	8002e7c <delay_us>
	play_pong();
 800295c:	e7e1      	b.n	8002922 <main+0x486>
}
#endif



show_pixels(pixels);
 800295e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002962:	4618      	mov	r0, r3
 8002964:	f000 ff9c 	bl	80038a0 <show_pixels>
}


if(panel_type == PANEL_PERIPH){
 8002968:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <main+0x6a0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	f47f aeb8 	bne.w	80026e2 <main+0x246>
		set_panel_clut(pixels, table.colors_tx);

#endif

		//Get IR map from THIS panel
		get_local_ir();
 8002972:	f7ff fa5d 	bl	8001e30 <get_local_ir>

		//load the LED_Color array with calculated color values
		show_ir();
 8002976:	f7ff faab 	bl	8001ed0 <show_ir>

#if STANDALONE_PANEL == 1

		//transfer the led_color to the pixels array
		set_panel_pixels(pixels, led_color);
 800297a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800297e:	496d      	ldr	r1, [pc, #436]	; (8002b34 <main+0x698>)
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fa0f 	bl	8000da4 <set_panel_pixels>

#endif

		HAL_Delay(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f001 f83c 	bl	8003a04 <HAL_Delay>

		//send pixels out to LEDs
		show_pixels(pixels);
 800298c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002990:	4618      	mov	r0, r3
 8002992:	f000 ff85 	bl	80038a0 <show_pixels>

		HAL_Delay(1);
 8002996:	2001      	movs	r0, #1
 8002998:	f001 f834 	bl	8003a04 <HAL_Delay>

		//clear pixels array
		clear_pixels(pixels);
 800299c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 ff8d 	bl	80038c0 <clear_pixels>

		frame_update = 0;
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <main+0x6a4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]

		if(HAL_GetTick() - colorModeTime > 5000)
 80029ac:	f001 f81e 	bl	80039ec <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <main+0x6a8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d910      	bls.n	80029e2 <main+0x546>
		{

			colorModeTime = HAL_GetTick();
 80029c0:	f001 f814 	bl	80039ec <HAL_GetTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a5f      	ldr	r2, [pc, #380]	; (8002b44 <main+0x6a8>)
 80029c8:	6013      	str	r3, [r2, #0]

			colorMode++;
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <main+0x6ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <main+0x6ac>)
 80029d2:	6013      	str	r3, [r2, #0]

			if(colorMode >= 6){
 80029d4:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <main+0x6ac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	dd02      	ble.n	80029e2 <main+0x546>

				colorMode = 0;
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <main+0x6ac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
			}

		}

		//Set default panel colors
		for(int y = 0; y < 4; y++){
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029e8:	e106      	b.n	8002bf8 <main+0x75c>

		  for(int x = 0; x < 4; x++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80029f0:	e0f8      	b.n	8002be4 <main+0x748>

			  led_color_set[x][y].red = 0;
 80029f2:	4856      	ldr	r0, [pc, #344]	; (8002b4c <main+0x6b0>)
 80029f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80029f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029fc:	461a      	mov	r2, r3
 80029fe:	0052      	lsls	r2, r2, #1
 8002a00:	441a      	add	r2, r3
 8002a02:	460b      	mov	r3, r1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4403      	add	r3, r0
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
			  led_color_set[x][y].green = 0;
 8002a12:	484e      	ldr	r0, [pc, #312]	; (8002b4c <main+0x6b0>)
 8002a14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	0052      	lsls	r2, r2, #1
 8002a20:	441a      	add	r2, r3
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4403      	add	r3, r0
 8002a2e:	3301      	adds	r3, #1
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
			  led_color_set[x][y].blue = 0;
 8002a34:	4845      	ldr	r0, [pc, #276]	; (8002b4c <main+0x6b0>)
 8002a36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a3e:	461a      	mov	r2, r3
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	441a      	add	r2, r3
 8002a44:	460b      	mov	r3, r1
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	440b      	add	r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4403      	add	r3, r0
 8002a50:	3302      	adds	r3, #2
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]

			  switch(colorMode){
 8002a56:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <main+0x6ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	f200 80bd 	bhi.w	8002bda <main+0x73e>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <main+0x5cc>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a81 	.word	0x08002a81
 8002a6c:	08002aa3 	.word	0x08002aa3
 8002a70:	08002ac7 	.word	0x08002ac7
 8002a74:	08002aeb 	.word	0x08002aeb
 8002a78:	08002b51 	.word	0x08002b51
 8002a7c:	08002b95 	.word	0x08002b95

				  case 0: led_color_set[x][y].red   = 50;
 8002a80:	4832      	ldr	r0, [pc, #200]	; (8002b4c <main+0x6b0>)
 8002a82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a86:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	0052      	lsls	r2, r2, #1
 8002a8e:	441a      	add	r2, r3
 8002a90:	460b      	mov	r3, r1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	440b      	add	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	4403      	add	r3, r0
 8002a9c:	2232      	movs	r2, #50	; 0x32
 8002a9e:	701a      	strb	r2, [r3, #0]
					  break;
 8002aa0:	e09b      	b.n	8002bda <main+0x73e>

				  case 1: led_color_set[x][y].blue  = 50;
 8002aa2:	482a      	ldr	r0, [pc, #168]	; (8002b4c <main+0x6b0>)
 8002aa4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002aa8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002aac:	461a      	mov	r2, r3
 8002aae:	0052      	lsls	r2, r2, #1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	440b      	add	r3, r1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	4403      	add	r3, r0
 8002abe:	3302      	adds	r3, #2
 8002ac0:	2232      	movs	r2, #50	; 0x32
 8002ac2:	701a      	strb	r2, [r3, #0]
					  break;
 8002ac4:	e089      	b.n	8002bda <main+0x73e>

				  case 2: led_color_set[x][y].green = 50;
 8002ac6:	4821      	ldr	r0, [pc, #132]	; (8002b4c <main+0x6b0>)
 8002ac8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002acc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	0052      	lsls	r2, r2, #1
 8002ad4:	441a      	add	r2, r3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	4403      	add	r3, r0
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	2232      	movs	r2, #50	; 0x32
 8002ae6:	701a      	strb	r2, [r3, #0]
					  break;
 8002ae8:	e077      	b.n	8002bda <main+0x73e>

				  case 3: led_color_set[x][y].red   = 50;
 8002aea:	4818      	ldr	r0, [pc, #96]	; (8002b4c <main+0x6b0>)
 8002aec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002af0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002af4:	461a      	mov	r2, r3
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	441a      	add	r2, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	4403      	add	r3, r0
 8002b06:	2232      	movs	r2, #50	; 0x32
 8002b08:	701a      	strb	r2, [r3, #0]
				  	  	  led_color_set[x][y].green = 50;
 8002b0a:	4810      	ldr	r0, [pc, #64]	; (8002b4c <main+0x6b0>)
 8002b0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b14:	461a      	mov	r2, r3
 8002b16:	0052      	lsls	r2, r2, #1
 8002b18:	441a      	add	r2, r3
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	440b      	add	r3, r1
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	4403      	add	r3, r0
 8002b26:	3301      	adds	r3, #1
 8002b28:	2232      	movs	r2, #50	; 0x32
 8002b2a:	701a      	strb	r2, [r3, #0]
					  break;
 8002b2c:	e055      	b.n	8002bda <main+0x73e>
 8002b2e:	bf00      	nop
 8002b30:	200007c4 	.word	0x200007c4
 8002b34:	20000724 	.word	0x20000724
 8002b38:	200007ef 	.word	0x200007ef
 8002b3c:	20000024 	.word	0x20000024
 8002b40:	200007e8 	.word	0x200007e8
 8002b44:	200007f8 	.word	0x200007f8
 8002b48:	200007f4 	.word	0x200007f4
 8002b4c:	20000754 	.word	0x20000754

				  case 4: led_color_set[x][y].red  = 50;
 8002b50:	482c      	ldr	r0, [pc, #176]	; (8002c04 <main+0x768>)
 8002b52:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	0052      	lsls	r2, r2, #1
 8002b5e:	441a      	add	r2, r3
 8002b60:	460b      	mov	r3, r1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	440b      	add	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	4403      	add	r3, r0
 8002b6c:	2232      	movs	r2, #50	; 0x32
 8002b6e:	701a      	strb	r2, [r3, #0]
				  	  	  led_color_set[x][y].blue = 50;
 8002b70:	4824      	ldr	r0, [pc, #144]	; (8002c04 <main+0x768>)
 8002b72:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	0052      	lsls	r2, r2, #1
 8002b7e:	441a      	add	r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	4403      	add	r3, r0
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	2232      	movs	r2, #50	; 0x32
 8002b90:	701a      	strb	r2, [r3, #0]
					  break;
 8002b92:	e022      	b.n	8002bda <main+0x73e>

				  case 5: led_color_set[x][y].green = 50;
 8002b94:	481b      	ldr	r0, [pc, #108]	; (8002c04 <main+0x768>)
 8002b96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	0052      	lsls	r2, r2, #1
 8002ba2:	441a      	add	r2, r3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	440b      	add	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	4403      	add	r3, r0
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	2232      	movs	r2, #50	; 0x32
 8002bb4:	701a      	strb	r2, [r3, #0]
				  	  	  led_color_set[x][y].blue  = 50;
 8002bb6:	4813      	ldr	r0, [pc, #76]	; (8002c04 <main+0x768>)
 8002bb8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002bbc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	0052      	lsls	r2, r2, #1
 8002bc4:	441a      	add	r2, r3
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	440b      	add	r3, r1
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	4403      	add	r3, r0
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	2232      	movs	r2, #50	; 0x32
 8002bd6:	701a      	strb	r2, [r3, #0]
					  break;
 8002bd8:	bf00      	nop
		  for(int x = 0; x < 4; x++){
 8002bda:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002bde:	3301      	adds	r3, #1
 8002be0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002be4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	f77f af02 	ble.w	80029f2 <main+0x556>
		for(int y = 0; y < 4; y++){
 8002bee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002bf8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	f77f aef4 	ble.w	80029ea <main+0x54e>
  {
 8002c02:	e56e      	b.n	80026e2 <main+0x246>
 8002c04:	20000754 	.word	0x20000754

08002c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b094      	sub	sp, #80	; 0x50
 8002c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c0e:	f107 0320 	add.w	r3, r7, #32
 8002c12:	2230      	movs	r2, #48	; 0x30
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 fb8e 	bl	8007338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <SystemClock_Config+0xcc>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <SystemClock_Config+0xcc>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <SystemClock_Config+0xcc>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <SystemClock_Config+0xd0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <SystemClock_Config+0xd0>)
 8002c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <SystemClock_Config+0xd0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c70:	2310      	movs	r3, #16
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c74:	2302      	movs	r3, #2
 8002c76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002c80:	2360      	movs	r3, #96	; 0x60
 8002c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c84:	2304      	movs	r3, #4
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8c:	f107 0320 	add.w	r3, r7, #32
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 fab7 	bl	8005204 <HAL_RCC_OscConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c9c:	f000 f92f 	bl	8002efe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 fd11 	bl	80056e4 <HAL_RCC_ClockConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002cc8:	f000 f919 	bl	8002efe <Error_Handler>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3750      	adds	r7, #80	; 0x50
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000

08002cdc <set_spi2_mode>:
//	memcpy(rx_spi, spirx, sizeof(struct Color) * 16);

}


void set_spi2_mode(uint8_t mode){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]

	//If master mode
	if(mode == SPI2_MASTER){
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d153      	bne.n	8002d94 <set_spi2_mode+0xb8>

		spi2_mode = SPI2_MASTER;
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <set_spi2_mode+0x18c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]



		 // HAL_SPI_DeInit(&hspi2);

			__HAL_RCC_SPI2_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <set_spi2_mode+0x190>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a5c      	ldr	r2, [pc, #368]	; (8002e6c <set_spi2_mode+0x190>)
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <set_spi2_mode+0x190>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
//		    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

			//while (!(SPI2->SR & SPI_SR_TXE_Msk ));

			//Reset SPI Peripheral
			RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8002d0e:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <set_spi2_mode+0x190>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <set_spi2_mode+0x190>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d18:	6213      	str	r3, [r2, #32]
			RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
 8002d1a:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <set_spi2_mode+0x190>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a53      	ldr	r2, [pc, #332]	; (8002e6c <set_spi2_mode+0x190>)
 8002d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d24:	6213      	str	r3, [r2, #32]

			SPI2->CR1 |= ~SPI_CR1_SPE;
 8002d26:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <set_spi2_mode+0x194>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a51      	ldr	r2, [pc, #324]	; (8002e70 <set_spi2_mode+0x194>)
 8002d2c:	f063 0340 	orn	r3, r3, #64	; 0x40
 8002d30:	6013      	str	r3, [r2, #0]

			  hspi2.Instance = SPI2;
 8002d32:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <set_spi2_mode+0x198>)
 8002d34:	4a4e      	ldr	r2, [pc, #312]	; (8002e70 <set_spi2_mode+0x194>)
 8002d36:	601a      	str	r2, [r3, #0]
			  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d38:	4b4e      	ldr	r3, [pc, #312]	; (8002e74 <set_spi2_mode+0x198>)
 8002d3a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d3e:	605a      	str	r2, [r3, #4]
			  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d40:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <set_spi2_mode+0x198>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
			  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <set_spi2_mode+0x198>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
			  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d4c:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <set_spi2_mode+0x198>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
			  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d52:	4b48      	ldr	r3, [pc, #288]	; (8002e74 <set_spi2_mode+0x198>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
			  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <set_spi2_mode+0x198>)
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	619a      	str	r2, [r3, #24]
			  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d60:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <set_spi2_mode+0x198>)
 8002d62:	2220      	movs	r2, #32
 8002d64:	61da      	str	r2, [r3, #28]
			  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <set_spi2_mode+0x198>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
			  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <set_spi2_mode+0x198>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
			  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d72:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <set_spi2_mode+0x198>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
			  hspi2.Init.CRCPolynomial = 10;
 8002d78:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <set_spi2_mode+0x198>)
 8002d7a:	220a      	movs	r2, #10
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c

			  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d7e:	483d      	ldr	r0, [pc, #244]	; (8002e74 <set_spi2_mode+0x198>)
 8002d80:	f002 feb2 	bl	8005ae8 <HAL_SPI_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <set_spi2_mode+0xb2>
			  {
			    Error_Handler();
 8002d8a:	f000 f8b8 	bl	8002efe <Error_Handler>
			  }
			  //GPIOB->MODER &= ~(0x3 << 28);
		  set_panel_output();
 8002d8e:	f7fe fac1 	bl	8001314 <set_panel_output>



	}

}
 8002d92:	e065      	b.n	8002e60 <set_spi2_mode+0x184>
	else if(mode == SPI2_SLAVE){
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d162      	bne.n	8002e60 <set_spi2_mode+0x184>
		spi2_mode = SPI2_SLAVE;
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <set_spi2_mode+0x18c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
		RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <set_spi2_mode+0x190>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <set_spi2_mode+0x190>)
 8002da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002daa:	6213      	str	r3, [r2, #32]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
 8002dac:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <set_spi2_mode+0x190>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <set_spi2_mode+0x190>)
 8002db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db6:	6213      	str	r3, [r2, #32]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
		HAL_SPI_MspDeInit(&hspi2);
 8002dc8:	482a      	ldr	r0, [pc, #168]	; (8002e74 <set_spi2_mode+0x198>)
 8002dca:	f000 f9fd 	bl	80031c8 <HAL_SPI_MspDeInit>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <set_spi2_mode+0x190>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <set_spi2_mode+0x190>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <set_spi2_mode+0x190>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = SPI2_CLK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002dea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002dee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dfc:	2305      	movs	r3, #5
 8002dfe:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	4619      	mov	r1, r3
 8002e06:	481c      	ldr	r0, [pc, #112]	; (8002e78 <set_spi2_mode+0x19c>)
 8002e08:	f001 ff56 	bl	8004cb8 <HAL_GPIO_Init>
		hspi2.Instance = SPI2;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <set_spi2_mode+0x198>)
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <set_spi2_mode+0x194>)
 8002e10:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <set_spi2_mode+0x198>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <set_spi2_mode+0x198>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <set_spi2_mode+0x198>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <set_spi2_mode+0x198>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <set_spi2_mode+0x198>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <set_spi2_mode+0x198>)
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	619a      	str	r2, [r3, #24]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <set_spi2_mode+0x198>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <set_spi2_mode+0x198>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <set_spi2_mode+0x198>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
		hspi2.Init.CRCPolynomial = 10;
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <set_spi2_mode+0x198>)
 8002e4c:	220a      	movs	r2, #10
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e50:	4808      	ldr	r0, [pc, #32]	; (8002e74 <set_spi2_mode+0x198>)
 8002e52:	f002 fe49 	bl	8005ae8 <HAL_SPI_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <set_spi2_mode+0x184>
		Error_Handler();
 8002e5c:	f000 f84f 	bl	8002efe <Error_Handler>
}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200000b6 	.word	0x200000b6
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40003800 	.word	0x40003800
 8002e74:	20000994 	.word	0x20000994
 8002e78:	40020400 	.word	0x40020400

08002e7c <delay_us>:


void delay_us(uint16_t us)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	80fb      	strh	r3, [r7, #6]
	uint32_t timval = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
	TIM1->CNT = 0;
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <delay_us+0x34>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM1->CNT < us){
 8002e90:	e002      	b.n	8002e98 <delay_us+0x1c>

		timval = TIM1->CNT;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <delay_us+0x34>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	60fb      	str	r3, [r7, #12]
	while (TIM1->CNT < us){
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <delay_us+0x34>)
 8002e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3f7      	bcc.n	8002e92 <delay_us+0x16>

	};  // wait for the counter to reach the us input in the parameter
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <bitread>:



int bitread(uint8_t byte, uint8_t bit){
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	71bb      	strb	r3, [r7, #6]

	int retval = (byte >> bit) & (0x01);
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	79bb      	ldrb	r3, [r7, #6]
 8002ec8:	fa42 f303 	asr.w	r3, r2, r3
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]

	return retval;
 8002ed2:	68fb      	ldr	r3, [r7, #12]

};
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ef2:	f000 fd67 	bl	80039c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <MX_SPI1_Init+0x68>)
 8002f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f40:	2218      	movs	r2, #24
 8002f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f58:	220a      	movs	r2, #10
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <MX_SPI1_Init+0x64>)
 8002f5e:	f002 fdc3 	bl	8005ae8 <HAL_SPI_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f68:	f7ff ffc9 	bl	8002efe <Error_Handler>
  }

}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200009ec 	.word	0x200009ec
 8002f74:	40013000 	.word	0x40013000

08002f78 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <MX_SPI2_Init+0x60>)
 8002f80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002fbc:	220a      	movs	r2, #10
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fc0:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <MX_SPI2_Init+0x5c>)
 8002fc2:	f002 fd91 	bl	8005ae8 <HAL_SPI_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8002fcc:	f7ff ff97 	bl	8002efe <Error_Handler>
  }

}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000994 	.word	0x20000994
 8002fd8:	40003800 	.word	0x40003800

08002fdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6d      	ldr	r2, [pc, #436]	; (80031b0 <HAL_SPI_MspInit+0x1d4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d15a      	bne.n	80030b4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	4b6c      	ldr	r3, [pc, #432]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a6b      	ldr	r2, [pc, #428]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b69      	ldr	r3, [pc, #420]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a64      	ldr	r2, [pc, #400]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003036:	2328      	movs	r3, #40	; 0x28
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800303e:	2302      	movs	r3, #2
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003046:	2305      	movs	r3, #5
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304e:	4619      	mov	r1, r3
 8003050:	4859      	ldr	r0, [pc, #356]	; (80031b8 <HAL_SPI_MspInit+0x1dc>)
 8003052:	f001 fe31 	bl	8004cb8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003056:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003058:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_SPI_MspInit+0x1e4>)
 800305a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800305c:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 800305e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003062:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003064:	4b55      	ldr	r3, [pc, #340]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800306a:	4b54      	ldr	r3, [pc, #336]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003070:	4b52      	ldr	r3, [pc, #328]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003076:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800307e:	4b4f      	ldr	r3, [pc, #316]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800308a:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 800308c:	2200      	movs	r2, #0
 800308e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003092:	2200      	movs	r2, #0
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003096:	4849      	ldr	r0, [pc, #292]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 8003098:	f001 f9d0 	bl	800443c <HAL_DMA_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80030a2:	f7ff ff2c 	bl	8002efe <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a44      	ldr	r2, [pc, #272]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 80030aa:	649a      	str	r2, [r3, #72]	; 0x48
 80030ac:	4a43      	ldr	r2, [pc, #268]	; (80031bc <HAL_SPI_MspInit+0x1e0>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */
  }
  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030b2:	e079      	b.n	80031a8 <HAL_SPI_MspInit+0x1cc>
  else if(spiHandle->Instance==SPI2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <HAL_SPI_MspInit+0x1e8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d174      	bne.n	80031a8 <HAL_SPI_MspInit+0x1cc>
  if(spiHandle->Init.Mode == SPI_MODE_MASTER){
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d12d      	bne.n	8003124 <HAL_SPI_MspInit+0x148>
	    __HAL_RCC_SPI2_CLK_ENABLE();
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	4a38      	ldr	r2, [pc, #224]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 80030d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d6:	6413      	str	r3, [r2, #64]	; 0x40
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	69bb      	ldr	r3, [r7, #24]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	6313      	str	r3, [r2, #48]	; 0x30
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
	    GPIO_InitStruct.Pin = SPI2_CLK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8003100:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003112:	2305      	movs	r3, #5
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311a:	4619      	mov	r1, r3
 800311c:	4826      	ldr	r0, [pc, #152]	; (80031b8 <HAL_SPI_MspInit+0x1dc>)
 800311e:	f001 fdcb 	bl	8004cb8 <HAL_GPIO_Init>
}
 8003122:	e041      	b.n	80031a8 <HAL_SPI_MspInit+0x1cc>
  else if(spiHandle->Init.Mode == SPI_MODE_SLAVE){
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d13d      	bne.n	80031a8 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313a:	6413      	str	r3, [r2, #64]	; 0x40
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_SPI_MspInit+0x1d8>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_CLK_Pin|SPI2_MISO_Pin;
 8003164:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800316e:	2302      	movs	r3, #2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003176:	2305      	movs	r3, #5
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	4619      	mov	r1, r3
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <HAL_SPI_MspInit+0x1dc>)
 8003182:	f001 fd99 	bl	8004cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003198:	2305      	movs	r3, #5
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800319c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a0:	4619      	mov	r1, r3
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <HAL_SPI_MspInit+0x1dc>)
 80031a4:	f001 fd88 	bl	8004cb8 <HAL_GPIO_Init>
}
 80031a8:	bf00      	nop
 80031aa:	3738      	adds	r7, #56	; 0x38
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40013000 	.word	0x40013000
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020400 	.word	0x40020400
 80031bc:	20000a44 	.word	0x20000a44
 80031c0:	40026458 	.word	0x40026458
 80031c4:	40003800 	.word	0x40003800

080031c8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_SPI_MspDeInit+0x5c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10f      	bne.n	80031fa <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_SPI_MspDeInit+0x60>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <HAL_SPI_MspDeInit+0x60>)
 80031e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e4:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 80031e6:	2128      	movs	r1, #40	; 0x28
 80031e8:	4810      	ldr	r0, [pc, #64]	; (800322c <HAL_SPI_MspDeInit+0x64>)
 80031ea:	f001 fee9 	bl	8004fc0 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f9d0 	bl	8004598 <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
} 
 80031f8:	e00f      	b.n	800321a <HAL_SPI_MspDeInit+0x52>
  else if(spiHandle->Instance==SPI2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_SPI_MspDeInit+0x68>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10a      	bne.n	800321a <HAL_SPI_MspDeInit+0x52>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_SPI_MspDeInit+0x60>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_SPI_MspDeInit+0x60>)
 800320a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, SPI2_CLK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin);
 8003210:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003214:	4805      	ldr	r0, [pc, #20]	; (800322c <HAL_SPI_MspDeInit+0x64>)
 8003216:	f001 fed3 	bl	8004fc0 <HAL_GPIO_DeInit>
} 
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40013000 	.word	0x40013000
 8003228:	40023800 	.word	0x40023800
 800322c:	40020400 	.word	0x40020400
 8003230:	40003800 	.word	0x40003800

08003234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_MspInit+0x4c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a0f      	ldr	r2, [pc, #60]	; (8003280 <HAL_MspInit+0x4c>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_MspInit+0x4c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_MspInit+0x4c>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_MspInit+0x4c>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_MspInit+0x4c>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003294:	2200      	movs	r2, #0
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	201c      	movs	r0, #28
 800329a:	f001 f8a5 	bl	80043e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800329e:	201c      	movs	r0, #28
 80032a0:	f001 f8be 	bl	8004420 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_InitTick+0xa8>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_InitTick+0xa8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6413      	str	r3, [r2, #64]	; 0x40
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_InitTick+0xa8>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032c0:	f107 0210 	add.w	r2, r7, #16
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 fbda 	bl	8005a84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80032d0:	f002 fbb0 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 80032d4:	4603      	mov	r3, r0
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_InitTick+0xac>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	3b01      	subs	r3, #1
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0xb0>)
 80032ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_InitTick+0xb0>)
 80032f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032f6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_InitTick+0xb0>)
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <HAL_InitTick+0xb0>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_InitTick+0xb0>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800330a:	480a      	ldr	r0, [pc, #40]	; (8003334 <HAL_InitTick+0xb0>)
 800330c:	f002 ffec 	bl	80062e8 <HAL_TIM_Base_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003316:	4807      	ldr	r0, [pc, #28]	; (8003334 <HAL_InitTick+0xb0>)
 8003318:	f003 f835 	bl	8006386 <HAL_TIM_Base_Start_IT>
 800331c:	4603      	mov	r3, r0
 800331e:	e000      	b.n	8003322 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	3730      	adds	r7, #48	; 0x30
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	431bde83 	.word	0x431bde83
 8003334:	20000aa4 	.word	0x20000aa4

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b0a6      	sub	sp, #152	; 0x98
 800334a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN HardFault_IRQn 0 */
	struct Led_pixels pixs[16];

	clear_pixels(pixs);
 800334c:	463b      	mov	r3, r7
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fab6 	bl	80038c0 <clear_pixels>

	set_pixel_color(pixs, 5, 0, 10, 0);
 8003354:	4638      	mov	r0, r7
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	230a      	movs	r3, #10
 800335c:	2200      	movs	r2, #0
 800335e:	2105      	movs	r1, #5
 8003360:	f000 fa6a 	bl	8003838 <set_pixel_color>
	set_pixel_color(pixs, 6, 0, 10, 0);
 8003364:	4638      	mov	r0, r7
 8003366:	2300      	movs	r3, #0
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	230a      	movs	r3, #10
 800336c:	2200      	movs	r2, #0
 800336e:	2106      	movs	r1, #6
 8003370:	f000 fa62 	bl	8003838 <set_pixel_color>
	set_pixel_color(pixs, 9, 0, 10, 0);
 8003374:	4638      	mov	r0, r7
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	230a      	movs	r3, #10
 800337c:	2200      	movs	r2, #0
 800337e:	2109      	movs	r1, #9
 8003380:	f000 fa5a 	bl	8003838 <set_pixel_color>
	set_pixel_color(pixs, 10, 0, 10, 0);
 8003384:	4638      	mov	r0, r7
 8003386:	2300      	movs	r3, #0
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	230a      	movs	r3, #10
 800338c:	2200      	movs	r2, #0
 800338e:	210a      	movs	r1, #10
 8003390:	f000 fa52 	bl	8003838 <set_pixel_color>

	//HAL_Delay(1);

	show_pixels(pixs);
 8003394:	463b      	mov	r3, r7
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fa82 	bl	80038a0 <show_pixels>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <HardFault_Handler+0x56>

0800339e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <MemManage_Handler+0x4>

080033a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <BusFault_Handler+0x4>

080033aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <UsageFault_Handler+0x4>

080033b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	af00      	add	r7, sp, #0
	//int_wait = HAL_GetTick();

	//Set Panel as master
	//spi2_mode = 1;
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033de:	2001      	movs	r0, #1
 80033e0:	f001 feec 	bl	80051bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
//	SELECT_UP();
//	UNSELECT_UP();
//	SELECT_UP();
//	UNSELECT_UP();

	if(panel_type == PANEL_CENTRAL){
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <EXTI1_IRQHandler+0x2c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <EXTI1_IRQHandler+0x22>

	}
	else{
		//Periph in master mode triggered by upstream
		if(spi2_mode == SPI2_MASTER){
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <EXTI1_IRQHandler+0x30>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d103      	bne.n	8003404 <EXTI1_IRQHandler+0x1c>

		int_wait = 1;
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <EXTI1_IRQHandler+0x34>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e002      	b.n	800340a <EXTI1_IRQHandler+0x22>

		}
		//Peripheral panel in slave mode waiting for cmd from downstream
		else{

			get_header_payload(CS_LEFT);
 8003404:	2001      	movs	r0, #1
 8003406:	f7fe ffc1 	bl	800238c <get_header_payload>
//	UNSELECT_UP();
//	SELECT_UP();
//	UNSELECT_UP();

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800340a:	2002      	movs	r0, #2
 800340c:	f001 fed6 	bl	80051bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000024 	.word	0x20000024
 8003418:	200000b6 	.word	0x200000b6
 800341c:	200007fc 	.word	0x200007fc

08003420 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */



	if(panel_type == PANEL_CENTRAL){
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <EXTI2_IRQHandler+0x2c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <EXTI2_IRQHandler+0x22>

	}
	else{
		//Periph in master mode triggered by upstream
		if(spi2_mode == SPI2_MASTER){
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <EXTI2_IRQHandler+0x30>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d103      	bne.n	800343c <EXTI2_IRQHandler+0x1c>

		int_wait = 1;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <EXTI2_IRQHandler+0x34>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e002      	b.n	8003442 <EXTI2_IRQHandler+0x22>
		}
		//Peripheral panel in slave mode waiting for cmd from downstream
		else{


			get_header_payload(CS_DOWN);
 800343c:	2003      	movs	r0, #3
 800343e:	f7fe ffa5 	bl	800238c <get_header_payload>
//			GPIOB->PUPDR &= ~(0x3F << 26);

		}
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003442:	2004      	movs	r0, #4
 8003444:	f001 feba 	bl	80051bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000024 	.word	0x20000024
 8003450:	200000b6 	.word	0x200000b6
 8003454:	200007fc 	.word	0x200007fc

08003458 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <DMA1_Stream5_IRQHandler+0x10>)
 800345e:	f001 f9c1 	bl	80047e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000b24 	.word	0x20000b24

0800346c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <TIM2_IRQHandler+0x10>)
 8003472:	f002 ffac 	bl	80063ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000aa4 	.word	0x20000aa4

08003480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */




		if(panel_type == PANEL_CENTRAL){
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <EXTI15_10_IRQHandler+0x44>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <EXTI15_10_IRQHandler+0x14>

			int_wait = 1;
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <EXTI15_10_IRQHandler+0x48>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e010      	b.n	80034b6 <EXTI15_10_IRQHandler+0x36>

			//			set_panel_it(CS_RIGHT);
		}
		else{
			//Periph in master mode triggered by upstream
			if(spi2_mode == SPI2_MASTER){
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <EXTI15_10_IRQHandler+0x4c>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d103      	bne.n	80034a4 <EXTI15_10_IRQHandler+0x24>


			int_wait = 1;
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <EXTI15_10_IRQHandler+0x48>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e008      	b.n	80034b6 <EXTI15_10_IRQHandler+0x36>
			}
			//Peripheral panel in slave mode waiting for cmd from downstream
			else{


				if(SYSCFG->EXTICR[2] & (0x1 << 8)){
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <EXTI15_10_IRQHandler+0x50>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <EXTI15_10_IRQHandler+0x36>

					get_header_payload(CS_RIGHT);
 80034b0:	2002      	movs	r0, #2
 80034b2:	f7fe ff6b 	bl	800238c <get_header_payload>
//				}
			}
		}
	//	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80034b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034ba:	f001 fe7f 	bl	80051bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000024 	.word	0x20000024
 80034c8:	200007fc 	.word	0x200007fc
 80034cc:	200000b6 	.word	0x200000b6
 80034d0:	40013800 	.word	0x40013800

080034d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <DMA2_Stream0_IRQHandler+0x10>)
 80034da:	f001 f983 	bl	80047e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000854 	.word	0x20000854

080034e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <DMA2_Stream3_IRQHandler+0x10>)
 80034ee:	f001 f979 	bl	80047e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000a44 	.word	0x20000a44

080034fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <_sbrk+0x50>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <_sbrk+0x16>
		heap_end = &end;
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <_sbrk+0x50>)
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <_sbrk+0x54>)
 8003510:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <_sbrk+0x50>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <_sbrk+0x50>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	466a      	mov	r2, sp
 8003522:	4293      	cmp	r3, r2
 8003524:	d907      	bls.n	8003536 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003526:	f003 fecd 	bl	80072c4 <__errno>
 800352a:	4603      	mov	r3, r0
 800352c:	220c      	movs	r2, #12
 800352e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e006      	b.n	8003544 <_sbrk+0x48>
	}

	heap_end += incr;
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <_sbrk+0x50>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	4a03      	ldr	r2, [pc, #12]	; (800354c <_sbrk+0x50>)
 8003540:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000800 	.word	0x20000800
 8003550:	20000bd8 	.word	0x20000bd8

08003554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <SystemInit+0x28>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <SystemInit+0x28>)
 8003560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <SystemInit+0x28>)
 800356a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800356e:	609a      	str	r2, [r3, #8]
#endif
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003594:	463b      	mov	r3, r7
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <MX_TIM1_Init+0x98>)
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <MX_TIM1_Init+0x9c>)
 80035a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <MX_TIM1_Init+0x98>)
 80035a4:	2230      	movs	r2, #48	; 0x30
 80035a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <MX_TIM1_Init+0x98>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <MX_TIM1_Init+0x98>)
 80035b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <MX_TIM1_Init+0x98>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <MX_TIM1_Init+0x98>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <MX_TIM1_Init+0x98>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035c8:	4813      	ldr	r0, [pc, #76]	; (8003618 <MX_TIM1_Init+0x98>)
 80035ca:	f002 fe8d 	bl	80062e8 <HAL_TIM_Base_Init>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80035d4:	f7ff fc93 	bl	8002efe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	4619      	mov	r1, r3
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <MX_TIM1_Init+0x98>)
 80035e6:	f002 fffa 	bl	80065de <HAL_TIM_ConfigClockSource>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80035f0:	f7ff fc85 	bl	8002efe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035fc:	463b      	mov	r3, r7
 80035fe:	4619      	mov	r1, r3
 8003600:	4805      	ldr	r0, [pc, #20]	; (8003618 <MX_TIM1_Init+0x98>)
 8003602:	f003 f9f3 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800360c:	f7ff fc77 	bl	8002efe <Error_Handler>
  }

}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000ae4 	.word	0x20000ae4
 800361c:	40010000 	.word	0x40010000

08003620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0b      	ldr	r2, [pc, #44]	; (800365c <HAL_TIM_Base_MspInit+0x3c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10d      	bne.n	800364e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_TIM_Base_MspInit+0x40>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_TIM_Base_MspInit+0x40>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <HAL_TIM_Base_MspInit+0x40>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40010000 	.word	0x40010000
 8003660:	40023800 	.word	0x40023800

08003664 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <MX_USART2_UART_Init+0x50>)
 800366c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 8003670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 8003684:	2200      	movs	r2, #0
 8003686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 800368a:	220c      	movs	r2, #12
 800368c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 8003696:	2200      	movs	r2, #0
 8003698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_USART2_UART_Init+0x4c>)
 800369c:	f003 fa28 	bl	8006af0 <HAL_UART_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036a6:	f7ff fc2a 	bl	8002efe <Error_Handler>
  }

}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000b84 	.word	0x20000b84
 80036b4:	40004400 	.word	0x40004400

080036b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a30      	ldr	r2, [pc, #192]	; (8003798 <HAL_UART_MspInit+0xe0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d159      	bne.n	800378e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_UART_MspInit+0xe4>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a2e      	ldr	r2, [pc, #184]	; (800379c <HAL_UART_MspInit+0xe4>)
 80036e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_UART_MspInit+0xe4>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_UART_MspInit+0xe4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a27      	ldr	r2, [pc, #156]	; (800379c <HAL_UART_MspInit+0xe4>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_UART_MspInit+0xe4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003712:	230c      	movs	r3, #12
 8003714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	2302      	movs	r3, #2
 8003718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371e:	2303      	movs	r3, #3
 8003720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003722:	2307      	movs	r3, #7
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	4619      	mov	r1, r3
 800372c:	481c      	ldr	r0, [pc, #112]	; (80037a0 <HAL_UART_MspInit+0xe8>)
 800372e:	f001 fac3 	bl	8004cb8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_UART_MspInit+0xf0>)
 8003736:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_UART_MspInit+0xec>)
 800373a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800373e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_UART_MspInit+0xec>)
 800374e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003752:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003756:	2200      	movs	r2, #0
 8003758:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_UART_MspInit+0xec>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_UART_MspInit+0xec>)
 800376e:	2200      	movs	r2, #0
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003772:	480c      	ldr	r0, [pc, #48]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003774:	f000 fe62 	bl	800443c <HAL_DMA_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800377e:	f7ff fbbe 	bl	8002efe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <HAL_UART_MspInit+0xec>)
 8003786:	635a      	str	r2, [r3, #52]	; 0x34
 8003788:	4a06      	ldr	r2, [pc, #24]	; (80037a4 <HAL_UART_MspInit+0xec>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800378e:	bf00      	nop
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40004400 	.word	0x40004400
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020000 	.word	0x40020000
 80037a4:	20000b24 	.word	0x20000b24
 80037a8:	40026088 	.word	0x40026088

080037ac <byte_to_color>:

#include "ws2812_spi_lib.h"



void byte_to_color(uint8_t byte, uint8_t * color){
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	71fb      	strb	r3, [r7, #7]

	uint32_t holder = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
	//Cycle through bits in byte
	//Store them in variable then store in color array
	for(uint8_t x = 0; x < 8; x++){
 80037bc:	2300      	movs	r3, #0
 80037be:	72fb      	strb	r3, [r7, #11]
 80037c0:	e021      	b.n	8003806 <byte_to_color+0x5a>

		if(((byte >> x) & 0x01)){
 80037c2:	79fa      	ldrb	r2, [r7, #7]
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	fa42 f303 	asr.w	r3, r2, r3
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <byte_to_color+0x3e>

			//if bit == 1 set accordingly in holder variable
			//0x6 is a logic 1 for 3MHz Spi transfer to WS2812
			holder |= 0x06 << (x * 3);
 80037d2:	7afa      	ldrb	r2, [r7, #11]
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	2206      	movs	r2, #6
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e00a      	b.n	8003800 <byte_to_color+0x54>
		}
		else{

			//0x04 is logic 0

			holder |= 0x04 << (x * 3);
 80037ea:	7afa      	ldrb	r2, [r7, #11]
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	2204      	movs	r2, #4
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
	for(uint8_t x = 0; x < 8; x++){
 8003800:	7afb      	ldrb	r3, [r7, #11]
 8003802:	3301      	adds	r3, #1
 8003804:	72fb      	strb	r3, [r7, #11]
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	2b07      	cmp	r3, #7
 800380a:	d9da      	bls.n	80037c2 <byte_to_color+0x16>
		}

	}

	//Store holder in color array
	color[0] = (holder >> 16) & 0xFF;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	0c1b      	lsrs	r3, r3, #16
 8003810:	b2da      	uxtb	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	701a      	strb	r2, [r3, #0]
	color[1] = (holder >> 8) & 0xFF;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	0a1a      	lsrs	r2, r3, #8
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
	color[2] = holder & 0xFF;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	3302      	adds	r3, #2
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

};
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <set_pixel_color>:


void set_pixel_color(struct Led_pixels * pixels, uint32_t pixel_num, uint8_t red, uint8_t green, uint8_t blue){
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	4611      	mov	r1, r2
 8003844:	461a      	mov	r2, r3
 8003846:	460b      	mov	r3, r1
 8003848:	71fb      	strb	r3, [r7, #7]
 800384a:	4613      	mov	r3, r2
 800384c:	71bb      	strb	r3, [r7, #6]


	byte_to_color(red, pixels[pixel_num].red);
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	1cda      	adds	r2, r3, #3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ffa3 	bl	80037ac <byte_to_color>
	byte_to_color(green, pixels[pixel_num].green);
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4413      	add	r3, r2
 8003872:	461a      	mov	r2, r3
 8003874:	79bb      	ldrb	r3, [r7, #6]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff97 	bl	80037ac <byte_to_color>
	byte_to_color(blue, pixels[pixel_num].blue);
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	1d9a      	adds	r2, r3, #6
 800388c:	7e3b      	ldrb	r3, [r7, #24]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff8b 	bl	80037ac <byte_to_color>



};
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <show_pixels>:

uint8_t show_pixels(struct Led_pixels * pixels){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]


	  //return HAL_SPI_Transmit(&hspi1, pixels, (NUM_PIXELS * 9), 1000);
	  return HAL_SPI_Transmit_DMA(&hspi1, pixels, (NUM_PIXELS * 9));
 80038a8:	2290      	movs	r2, #144	; 0x90
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <show_pixels+0x1c>)
 80038ae:	f002 fb21 	bl	8005ef4 <HAL_SPI_Transmit_DMA>
 80038b2:	4603      	mov	r3, r0

};
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200009ec 	.word	0x200009ec

080038c0 <clear_pixels>:

uint8_t clear_pixels(struct Led_pixels * pixels){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	6078      	str	r0, [r7, #4]


	for(int x = 0; x < NUM_PIXELS; x++){
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e00a      	b.n	80038e4 <clear_pixels+0x24>

		set_pixel_color(pixels, x, 0, 0, 0);
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	2200      	movs	r2, #0
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ffad 	bl	8003838 <set_pixel_color>
	for(int x = 0; x < NUM_PIXELS; x++){
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	ddf1      	ble.n	80038ce <clear_pixels+0xe>

	}

	  return 0x0;
 80038ea:	2300      	movs	r3, #0

};
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <map>:



int map(int x, int in_min, int in_max, int out_min, int out_max){
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]

  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	1a8a      	subs	r2, r1, r2
 800390e:	fb02 f203 	mul.w	r2, r2, r3
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	fb92 f2f3 	sdiv	r2, r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4413      	add	r3, r2

}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800392c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003932:	e003      	b.n	800393c <LoopCopyDataInit>

08003934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800393a:	3104      	adds	r1, #4

0800393c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003944:	d3f6      	bcc.n	8003934 <CopyDataInit>
  ldr  r2, =_sbss
 8003946:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003948:	e002      	b.n	8003950 <LoopFillZerobss>

0800394a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800394a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800394c:	f842 3b04 	str.w	r3, [r2], #4

08003950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003954:	d3f9      	bcc.n	800394a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003956:	f7ff fdfd 	bl	8003554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800395a:	f003 fcb9 	bl	80072d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800395e:	f7fe fd9d 	bl	800249c <main>
  bx  lr    
 8003962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003964:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003968:	08007528 	.word	0x08007528
  ldr  r0, =_sdata
 800396c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003970:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8003974:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8003978:	20000bd8 	.word	0x20000bd8

0800397c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800397c:	e7fe      	b.n	800397c <ADC_IRQHandler>
	...

08003980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_Init+0x40>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <HAL_Init+0x40>)
 800398a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800398e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_Init+0x40>)
 8003996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_Init+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <HAL_Init+0x40>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a8:	2003      	movs	r0, #3
 80039aa:	f000 fd12 	bl	80043d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ae:	2000      	movs	r0, #0
 80039b0:	f7ff fc68 	bl	8003284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039b4:	f7ff fc3e 	bl	8003234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00

080039c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_IncTick+0x20>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_IncTick+0x24>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_IncTick+0x24>)
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000030 	.word	0x20000030
 80039e8:	20000bc4 	.word	0x20000bc4

080039ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_GetTick+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000bc4 	.word	0x20000bc4

08003a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff ffee 	bl	80039ec <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d005      	beq.n	8003a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_Delay+0x44>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a2a:	bf00      	nop
 8003a2c:	f7ff ffde 	bl	80039ec <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d8f7      	bhi.n	8003a2c <HAL_Delay+0x28>
  {
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000030 	.word	0x20000030

08003a4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e033      	b.n	8003aca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fc fdaa 	bl	80005c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d118      	bne.n	8003abc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a92:	f023 0302 	bic.w	r3, r3, #2
 8003a96:	f043 0202 	orr.w	r2, r3, #2
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa6c 	bl	8003f7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	f043 0201 	orr.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8003aba:	e001      	b.n	8003ac0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_Start_DMA+0x1e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0b1      	b.n	8003c56 <HAL_ADC_Start_DMA+0x182>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d018      	beq.n	8003b3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b18:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <HAL_ADC_Start_DMA+0x18c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a51      	ldr	r2, [pc, #324]	; (8003c64 <HAL_ADC_Start_DMA+0x190>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	0c9a      	lsrs	r2, r3, #18
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b2c:	e002      	b.n	8003b34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f9      	bne.n	8003b2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 8085 	bne.w	8003c54 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	d106      	bne.n	8003b98 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f023 0206 	bic.w	r2, r3, #6
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
 8003b96:	e002      	b.n	8003b9e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_ADC_Start_DMA+0x194>)
 8003ba8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <HAL_ADC_Start_DMA+0x198>)
 8003bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <HAL_ADC_Start_DMA+0x19c>)
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <HAL_ADC_Start_DMA+0x1a0>)
 8003bc0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003bca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	334c      	adds	r3, #76	; 0x4c
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f000 fd2a 	bl	8004654 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11c      	bne.n	8003c54 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c28:	609a      	str	r2, [r3, #8]
 8003c2a:	e013      	b.n	8003c54 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <HAL_ADC_Start_DMA+0x1a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10e      	bne.n	8003c54 <HAL_ADC_Start_DMA+0x180>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c52:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000028 	.word	0x20000028
 8003c64:	431bde83 	.word	0x431bde83
 8003c68:	40012300 	.word	0x40012300
 8003c6c:	08004175 	.word	0x08004175
 8003c70:	0800422f 	.word	0x0800422f
 8003c74:	0800424b 	.word	0x0800424b
 8003c78:	40012000 	.word	0x40012000

08003c7c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_ADC_Stop_DMA+0x1a>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e038      	b.n	8003d08 <HAL_ADC_Stop_DMA+0x8c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d120      	bne.n	8003cfe <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cca:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fd17 	bl	8004704 <HAL_DMA_Abort>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003ce8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1c>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e105      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x228>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b09      	cmp	r3, #9
 8003d62:	d925      	bls.n	8003db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68d9      	ldr	r1, [r3, #12]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	3b1e      	subs	r3, #30
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43da      	mvns	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	400a      	ands	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68d9      	ldr	r1, [r3, #12]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4403      	add	r3, r0
 8003da2:	3b1e      	subs	r3, #30
 8003da4:	409a      	lsls	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e022      	b.n	8003df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6919      	ldr	r1, [r3, #16]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6919      	ldr	r1, [r3, #16]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4618      	mov	r0, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4403      	add	r3, r0
 8003dec:	409a      	lsls	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d824      	bhi.n	8003e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3b05      	subs	r3, #5
 8003e10:	221f      	movs	r2, #31
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	3b05      	subs	r3, #5
 8003e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34
 8003e46:	e04c      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d824      	bhi.n	8003e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	3b23      	subs	r3, #35	; 0x23
 8003e62:	221f      	movs	r2, #31
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	400a      	ands	r2, r1
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4618      	mov	r0, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	3b23      	subs	r3, #35	; 0x23
 8003e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
 8003e98:	e023      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3b41      	subs	r3, #65	; 0x41
 8003eac:	221f      	movs	r2, #31
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	400a      	ands	r2, r1
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	4618      	mov	r0, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3b41      	subs	r3, #65	; 0x41
 8003ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_ADC_ConfigChannel+0x234>)
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_ADC_ConfigChannel+0x238>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d109      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1cc>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b12      	cmp	r3, #18
 8003ef6:	d105      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_ADC_ConfigChannel+0x238>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d123      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x21e>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d003      	beq.n	8003f1e <HAL_ADC_ConfigChannel+0x1e6>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b11      	cmp	r3, #17
 8003f1c:	d11b      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d111      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_ADC_ConfigChannel+0x23c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <HAL_ADC_ConfigChannel+0x240>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	0c9a      	lsrs	r2, r3, #18
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f48:	e002      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f9      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40012300 	.word	0x40012300
 8003f70:	40012000 	.word	0x40012000
 8003f74:	20000028 	.word	0x20000028
 8003f78:	431bde83 	.word	0x431bde83

08003f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f84:	4b79      	ldr	r3, [pc, #484]	; (800416c <ADC_Init+0x1f0>)
 8003f86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	4a58      	ldr	r2, [pc, #352]	; (8004170 <ADC_Init+0x1f4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	e00f      	b.n	800407a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004078:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0202 	bic.w	r2, r2, #2
 8004088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7e1b      	ldrb	r3, [r3, #24]
 8004094:	005a      	lsls	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01b      	beq.n	80040e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6859      	ldr	r1, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	3b01      	subs	r3, #1
 80040d4:	035a      	lsls	r2, r3, #13
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	e007      	b.n	80040f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	3b01      	subs	r3, #1
 800410c:	051a      	lsls	r2, r3, #20
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004132:	025a      	lsls	r2, r3, #9
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	029a      	lsls	r2, r3, #10
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40012300 	.word	0x40012300
 8004170:	0f000001 	.word	0x0f000001

08004174 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	d13c      	bne.n	8004208 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d12b      	bne.n	8004200 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d127      	bne.n	8004200 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d119      	bne.n	8004200 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0220 	bic.w	r2, r2, #32
 80041da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7fc fdbd 	bl	8000d80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004206:	e00e      	b.n	8004226 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fd85 	bl	8003d24 <HAL_ADC_ErrorCallback>
}
 800421a:	e004      	b.n	8004226 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fd67 	bl	8003d10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fd5a 	bl	8003d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <__NVIC_SetPriorityGrouping+0x44>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004294:	4013      	ands	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042aa:	4a04      	ldr	r2, [pc, #16]	; (80042bc <__NVIC_SetPriorityGrouping+0x44>)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	60d3      	str	r3, [r2, #12]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <__NVIC_GetPriorityGrouping+0x18>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 0307 	and.w	r3, r3, #7
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	db0b      	blt.n	8004306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	4907      	ldr	r1, [pc, #28]	; (8004314 <__NVIC_EnableIRQ+0x38>)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2001      	movs	r0, #1
 80042fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	e000e100 	.word	0xe000e100

08004318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	; (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf28      	it	cs
 800438a:	2304      	movcs	r3, #4
 800438c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3304      	adds	r3, #4
 8004392:	2b06      	cmp	r3, #6
 8004394:	d902      	bls.n	800439c <NVIC_EncodePriority+0x30>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3b03      	subs	r3, #3
 800439a:	e000      	b.n	800439e <NVIC_EncodePriority+0x32>
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	401a      	ands	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	43d9      	mvns	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	4313      	orrs	r3, r2
         );
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff4c 	bl	8004278 <__NVIC_SetPriorityGrouping>
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043fa:	f7ff ff61 	bl	80042c0 <__NVIC_GetPriorityGrouping>
 80043fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	6978      	ldr	r0, [r7, #20]
 8004406:	f7ff ffb1 	bl	800436c <NVIC_EncodePriority>
 800440a:	4602      	mov	r2, r0
 800440c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff80 	bl	8004318 <__NVIC_SetPriority>
}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ff54 	bl	80042dc <__NVIC_EnableIRQ>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff fad0 	bl	80039ec <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e099      	b.n	800458c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004478:	e00f      	b.n	800449a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800447a:	f7ff fab7 	bl	80039ec <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b05      	cmp	r3, #5
 8004486:	d908      	bls.n	800449a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2203      	movs	r2, #3
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e078      	b.n	800458c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e8      	bne.n	800447a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4b38      	ldr	r3, [pc, #224]	; (8004594 <HAL_DMA_Init+0x158>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d107      	bne.n	8004504 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	4313      	orrs	r3, r2
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0307 	bic.w	r3, r3, #7
 800451a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b04      	cmp	r3, #4
 800452c:	d117      	bne.n	800455e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00e      	beq.n	800455e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fb3d 	bl	8004bc0 <DMA_CheckFifoParam>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800455a:	2301      	movs	r3, #1
 800455c:	e016      	b.n	800458c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 faf4 	bl	8004b54 <DMA_CalcBaseAndBitshift>
 800456c:	4603      	mov	r3, r0
 800456e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004574:	223f      	movs	r2, #63	; 0x3f
 8004576:	409a      	lsls	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	f010803f 	.word	0xf010803f

08004598 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e050      	b.n	800464c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d101      	bne.n	80045ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	e048      	b.n	800464c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2221      	movs	r2, #33	; 0x21
 80045f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 faaa 	bl	8004b54 <DMA_CalcBaseAndBitshift>
 8004600:	4603      	mov	r3, r0
 8004602:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	223f      	movs	r2, #63	; 0x3f
 800462e:	409a      	lsls	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_DMA_Start_IT+0x26>
 8004676:	2302      	movs	r3, #2
 8004678:	e040      	b.n	80046fc <HAL_DMA_Start_IT+0xa8>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d12f      	bne.n	80046ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fa28 	bl	8004af8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	223f      	movs	r2, #63	; 0x3f
 80046ae:	409a      	lsls	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0216 	orr.w	r2, r2, #22
 80046c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e005      	b.n	80046fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
 80046f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004712:	f7ff f96b 	bl	80039ec <HAL_GetTick>
 8004716:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d008      	beq.n	8004736 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e052      	b.n	80047dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0216 	bic.w	r2, r2, #22
 8004744:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004754:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_DMA_Abort+0x62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0208 	bic.w	r2, r2, #8
 8004774:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004786:	e013      	b.n	80047b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004788:	f7ff f930 	bl	80039ec <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b05      	cmp	r3, #5
 8004794:	d90c      	bls.n	80047b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2203      	movs	r2, #3
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e015      	b.n	80047dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e4      	bne.n	8004788 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	223f      	movs	r2, #63	; 0x3f
 80047c4:	409a      	lsls	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047f0:	4b92      	ldr	r3, [pc, #584]	; (8004a3c <HAL_DMA_IRQHandler+0x258>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a92      	ldr	r2, [pc, #584]	; (8004a40 <HAL_DMA_IRQHandler+0x25c>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	2208      	movs	r2, #8
 8004810:	409a      	lsls	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01a      	beq.n	8004850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0204 	bic.w	r2, r2, #4
 8004836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	2208      	movs	r2, #8
 800483e:	409a      	lsls	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	2201      	movs	r2, #1
 8004856:	409a      	lsls	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d012      	beq.n	8004886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	2201      	movs	r2, #1
 8004874:	409a      	lsls	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f043 0202 	orr.w	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	2204      	movs	r2, #4
 800488c:	409a      	lsls	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	2204      	movs	r2, #4
 80048aa:	409a      	lsls	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f043 0204 	orr.w	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	2210      	movs	r2, #16
 80048c2:	409a      	lsls	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d043      	beq.n	8004954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03c      	beq.n	8004954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	2210      	movs	r2, #16
 80048e0:	409a      	lsls	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d018      	beq.n	8004926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d108      	bne.n	8004914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d024      	beq.n	8004954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
 8004912:	e01f      	b.n	8004954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
 8004924:	e016      	b.n	8004954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d107      	bne.n	8004944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0208 	bic.w	r2, r2, #8
 8004942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	2220      	movs	r2, #32
 800495a:	409a      	lsls	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 808e 	beq.w	8004a82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8086 	beq.w	8004a82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	2220      	movs	r2, #32
 800497c:	409a      	lsls	r2, r3
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b05      	cmp	r3, #5
 800498c:	d136      	bne.n	80049fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0216 	bic.w	r2, r2, #22
 800499c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <HAL_DMA_IRQHandler+0x1da>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0208 	bic.w	r2, r2, #8
 80049cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	223f      	movs	r2, #63	; 0x3f
 80049d4:	409a      	lsls	r2, r3
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d07d      	beq.n	8004aee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
        }
        return;
 80049fa:	e078      	b.n	8004aee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01c      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d030      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
 8004a28:	e02b      	b.n	8004a82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d027      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
 8004a3a:	e022      	b.n	8004a82 <HAL_DMA_IRQHandler+0x29e>
 8004a3c:	20000028 	.word	0x20000028
 8004a40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0210 	bic.w	r2, r2, #16
 8004a60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d032      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2205      	movs	r2, #5
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d307      	bcc.n	8004aca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f2      	bne.n	8004aae <HAL_DMA_IRQHandler+0x2ca>
 8004ac8:	e000      	b.n	8004acc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004aca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
 8004aec:	e000      	b.n	8004af0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004aee:	bf00      	nop
    }
  }
}
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop

08004af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d108      	bne.n	8004b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b36:	e007      	b.n	8004b48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	3b10      	subs	r3, #16
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <DMA_CalcBaseAndBitshift+0x68>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d909      	bls.n	8004b96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b8a:	f023 0303 	bic.w	r3, r3, #3
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	659a      	str	r2, [r3, #88]	; 0x58
 8004b94:	e007      	b.n	8004ba6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	aaaaaaab 	.word	0xaaaaaaab
 8004bbc:	08007510 	.word	0x08007510

08004bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11f      	bne.n	8004c1a <DMA_CheckFifoParam+0x5a>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d856      	bhi.n	8004c8e <DMA_CheckFifoParam+0xce>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <DMA_CheckFifoParam+0x28>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c0b 	.word	0x08004c0b
 8004bf0:	08004bf9 	.word	0x08004bf9
 8004bf4:	08004c8f 	.word	0x08004c8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d046      	beq.n	8004c92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c08:	e043      	b.n	8004c92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c12:	d140      	bne.n	8004c96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c18:	e03d      	b.n	8004c96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c22:	d121      	bne.n	8004c68 <DMA_CheckFifoParam+0xa8>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d837      	bhi.n	8004c9a <DMA_CheckFifoParam+0xda>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <DMA_CheckFifoParam+0x70>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c47 	.word	0x08004c47
 8004c38:	08004c41 	.word	0x08004c41
 8004c3c:	08004c59 	.word	0x08004c59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	e030      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d025      	beq.n	8004c9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c56:	e022      	b.n	8004c9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c60:	d11f      	bne.n	8004ca2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c66:	e01c      	b.n	8004ca2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d903      	bls.n	8004c76 <DMA_CheckFifoParam+0xb6>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d003      	beq.n	8004c7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c74:	e018      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7a:	e015      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e00b      	b.n	8004ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e00a      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8004c92:	bf00      	nop
 8004c94:	e008      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8004c96:	bf00      	nop
 8004c98:	e006      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e004      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e002      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ca2:	bf00      	nop
 8004ca4:	e000      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ca6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop

08004cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e159      	b.n	8004f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	f040 8148 	bne.w	8004f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d00b      	beq.n	8004d12 <HAL_GPIO_Init+0x5a>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d007      	beq.n	8004d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d06:	2b11      	cmp	r3, #17
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b12      	cmp	r3, #18
 8004d10:	d130      	bne.n	8004d74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d48:	2201      	movs	r2, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 0201 	and.w	r2, r3, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	2203      	movs	r2, #3
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0xfc>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b12      	cmp	r3, #18
 8004db2:	d123      	bne.n	8004dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	08da      	lsrs	r2, r3, #3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3208      	adds	r2, #8
 8004dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	220f      	movs	r2, #15
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	08da      	lsrs	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3208      	adds	r2, #8
 8004df6:	69b9      	ldr	r1, [r7, #24]
 8004df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 0203 	and.w	r2, r3, #3
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80a2 	beq.w	8004f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <HAL_GPIO_Init+0x2e8>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	4a56      	ldr	r2, [pc, #344]	; (8004fa0 <HAL_GPIO_Init+0x2e8>)
 8004e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e4e:	4b54      	ldr	r3, [pc, #336]	; (8004fa0 <HAL_GPIO_Init+0x2e8>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e5a:	4a52      	ldr	r2, [pc, #328]	; (8004fa4 <HAL_GPIO_Init+0x2ec>)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	089b      	lsrs	r3, r3, #2
 8004e60:	3302      	adds	r3, #2
 8004e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	220f      	movs	r2, #15
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a49      	ldr	r2, [pc, #292]	; (8004fa8 <HAL_GPIO_Init+0x2f0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d019      	beq.n	8004eba <HAL_GPIO_Init+0x202>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a48      	ldr	r2, [pc, #288]	; (8004fac <HAL_GPIO_Init+0x2f4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_GPIO_Init+0x1fe>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a47      	ldr	r2, [pc, #284]	; (8004fb0 <HAL_GPIO_Init+0x2f8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00d      	beq.n	8004eb2 <HAL_GPIO_Init+0x1fa>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a46      	ldr	r2, [pc, #280]	; (8004fb4 <HAL_GPIO_Init+0x2fc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <HAL_GPIO_Init+0x1f6>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a45      	ldr	r2, [pc, #276]	; (8004fb8 <HAL_GPIO_Init+0x300>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_GPIO_Init+0x1f2>
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	e008      	b.n	8004ebc <HAL_GPIO_Init+0x204>
 8004eaa:	2307      	movs	r3, #7
 8004eac:	e006      	b.n	8004ebc <HAL_GPIO_Init+0x204>
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e004      	b.n	8004ebc <HAL_GPIO_Init+0x204>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e002      	b.n	8004ebc <HAL_GPIO_Init+0x204>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_GPIO_Init+0x204>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	f002 0203 	and.w	r2, r2, #3
 8004ec2:	0092      	lsls	r2, r2, #2
 8004ec4:	4093      	lsls	r3, r2
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ecc:	4935      	ldr	r1, [pc, #212]	; (8004fa4 <HAL_GPIO_Init+0x2ec>)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eda:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004efe:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f28:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f52:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f58:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4013      	ands	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	; (8004fbc <HAL_GPIO_Init+0x304>)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	f67f aea2 	bls.w	8004cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3724      	adds	r7, #36	; 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	40020000 	.word	0x40020000
 8004fac:	40020400 	.word	0x40020400
 8004fb0:	40020800 	.word	0x40020800
 8004fb4:	40020c00 	.word	0x40020c00
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40013c00 	.word	0x40013c00

08004fc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e0bb      	b.n	8005154 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fdc:	2201      	movs	r2, #1
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	f040 80ab 	bne.w	800514e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004ff8:	4a5c      	ldr	r2, [pc, #368]	; (800516c <HAL_GPIO_DeInit+0x1ac>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3302      	adds	r3, #2
 8005000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005004:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	220f      	movs	r2, #15
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	4013      	ands	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a54      	ldr	r2, [pc, #336]	; (8005170 <HAL_GPIO_DeInit+0x1b0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d019      	beq.n	8005056 <HAL_GPIO_DeInit+0x96>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a53      	ldr	r2, [pc, #332]	; (8005174 <HAL_GPIO_DeInit+0x1b4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_GPIO_DeInit+0x92>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a52      	ldr	r2, [pc, #328]	; (8005178 <HAL_GPIO_DeInit+0x1b8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00d      	beq.n	800504e <HAL_GPIO_DeInit+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a51      	ldr	r2, [pc, #324]	; (800517c <HAL_GPIO_DeInit+0x1bc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <HAL_GPIO_DeInit+0x8a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a50      	ldr	r2, [pc, #320]	; (8005180 <HAL_GPIO_DeInit+0x1c0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_GPIO_DeInit+0x86>
 8005042:	2304      	movs	r3, #4
 8005044:	e008      	b.n	8005058 <HAL_GPIO_DeInit+0x98>
 8005046:	2307      	movs	r3, #7
 8005048:	e006      	b.n	8005058 <HAL_GPIO_DeInit+0x98>
 800504a:	2303      	movs	r3, #3
 800504c:	e004      	b.n	8005058 <HAL_GPIO_DeInit+0x98>
 800504e:	2302      	movs	r3, #2
 8005050:	e002      	b.n	8005058 <HAL_GPIO_DeInit+0x98>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_GPIO_DeInit+0x98>
 8005056:	2300      	movs	r3, #0
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	f002 0203 	and.w	r2, r2, #3
 800505e:	0092      	lsls	r2, r2, #2
 8005060:	4093      	lsls	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	d132      	bne.n	80050ce <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005068:	4b46      	ldr	r3, [pc, #280]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	43db      	mvns	r3, r3
 8005070:	4944      	ldr	r1, [pc, #272]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 8005072:	4013      	ands	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005076:	4b43      	ldr	r3, [pc, #268]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	43db      	mvns	r3, r3
 800507e:	4941      	ldr	r1, [pc, #260]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 8005080:	4013      	ands	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005084:	4b3f      	ldr	r3, [pc, #252]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	43db      	mvns	r3, r3
 800508c:	493d      	ldr	r1, [pc, #244]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 800508e:	4013      	ands	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005092:	4b3c      	ldr	r3, [pc, #240]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	43db      	mvns	r3, r3
 800509a:	493a      	ldr	r1, [pc, #232]	; (8005184 <HAL_GPIO_DeInit+0x1c4>)
 800509c:	4013      	ands	r3, r2
 800509e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	220f      	movs	r2, #15
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050b0:	4a2e      	ldr	r2, [pc, #184]	; (800516c <HAL_GPIO_DeInit+0x1ac>)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	089b      	lsrs	r3, r3, #2
 80050b6:	3302      	adds	r3, #2
 80050b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	43da      	mvns	r2, r3
 80050c0:	482a      	ldr	r0, [pc, #168]	; (800516c <HAL_GPIO_DeInit+0x1ac>)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	400a      	ands	r2, r1
 80050c8:	3302      	adds	r3, #2
 80050ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	2103      	movs	r1, #3
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	08da      	lsrs	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3208      	adds	r2, #8
 80050ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	220f      	movs	r2, #15
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	08d2      	lsrs	r2, r2, #3
 8005104:	4019      	ands	r1, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3208      	adds	r2, #8
 800510a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	2103      	movs	r1, #3
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	401a      	ands	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	2101      	movs	r1, #1
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	2103      	movs	r1, #3
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	401a      	ands	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	f67f af40 	bls.w	8004fdc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40013800 	.word	0x40013800
 8005170:	40020000 	.word	0x40020000
 8005174:	40020400 	.word	0x40020400
 8005178:	40020800 	.word	0x40020800
 800517c:	40020c00 	.word	0x40020c00
 8005180:	40021000 	.word	0x40021000
 8005184:	40013c00 	.word	0x40013c00

08005188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
 8005194:	4613      	mov	r3, r2
 8005196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005198:	787b      	ldrb	r3, [r7, #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051a4:	e003      	b.n	80051ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	041a      	lsls	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	619a      	str	r2, [r3, #24]
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051c6:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051d2:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f806 	bl	80051ec <HAL_GPIO_EXTI_Callback>
  }
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40013c00 	.word	0x40013c00

080051ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e25b      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d075      	beq.n	800530e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005222:	4ba3      	ldr	r3, [pc, #652]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b04      	cmp	r3, #4
 800522c:	d00c      	beq.n	8005248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4ba0      	ldr	r3, [pc, #640]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	2b08      	cmp	r3, #8
 8005238:	d112      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b9d      	ldr	r3, [pc, #628]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	4b99      	ldr	r3, [pc, #612]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05b      	beq.n	800530c <HAL_RCC_OscConfig+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d157      	bne.n	800530c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e236      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d106      	bne.n	8005278 <HAL_RCC_OscConfig+0x74>
 800526a:	4b91      	ldr	r3, [pc, #580]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a90      	ldr	r2, [pc, #576]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x98>
 8005282:	4b8b      	ldr	r3, [pc, #556]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a8a      	ldr	r2, [pc, #552]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a87      	ldr	r2, [pc, #540]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 800529c:	4b84      	ldr	r3, [pc, #528]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a83      	ldr	r2, [pc, #524]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a80      	ldr	r2, [pc, #512]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fb96 	bl	80039ec <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fe fb92 	bl	80039ec <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e1fb      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xc0>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fe fb82 	bl	80039ec <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fe fb7e 	bl	80039ec <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e1e7      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b6c      	ldr	r3, [pc, #432]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0xe8>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d063      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531a:	4b65      	ldr	r3, [pc, #404]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b62      	ldr	r3, [pc, #392]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	2b08      	cmp	r3, #8
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b5f      	ldr	r3, [pc, #380]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	4b5c      	ldr	r3, [pc, #368]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1bb      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4952      	ldr	r1, [pc, #328]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	e03a      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005374:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <HAL_RCC_OscConfig+0x2b0>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fe fb37 	bl	80039ec <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005382:	f7fe fb33 	bl	80039ec <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e19c      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4940      	ldr	r1, [pc, #256]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <HAL_RCC_OscConfig+0x2b0>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fe fb16 	bl	80039ec <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fe fb12 	bl	80039ec <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e17b      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d030      	beq.n	8005450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <HAL_RCC_OscConfig+0x2b4>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fe faf6 	bl	80039ec <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005404:	f7fe faf2 	bl	80039ec <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e15b      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x200>
 8005422:	e015      	b.n	8005450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <HAL_RCC_OscConfig+0x2b4>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542a:	f7fe fadf 	bl	80039ec <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005432:	f7fe fadb 	bl	80039ec <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e144      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f0      	bne.n	8005432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80a0 	beq.w	800559e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005462:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	4a0e      	ldr	r2, [pc, #56]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547c:	6413      	str	r3, [r2, #64]	; 0x40
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_OscConfig+0x2b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d121      	bne.n	80054de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800549a:	4b08      	ldr	r3, [pc, #32]	; (80054bc <HAL_RCC_OscConfig+0x2b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a07      	ldr	r2, [pc, #28]	; (80054bc <HAL_RCC_OscConfig+0x2b8>)
 80054a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a6:	f7fe faa1 	bl	80039ec <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ac:	e011      	b.n	80054d2 <HAL_RCC_OscConfig+0x2ce>
 80054ae:	bf00      	nop
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470000 	.word	0x42470000
 80054b8:	42470e80 	.word	0x42470e80
 80054bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c0:	f7fe fa94 	bl	80039ec <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e0fd      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d2:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCC_OscConfig+0x4d4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d106      	bne.n	80054f4 <HAL_RCC_OscConfig+0x2f0>
 80054e6:	4b7d      	ldr	r3, [pc, #500]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a7c      	ldr	r2, [pc, #496]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
 80054f2:	e01c      	b.n	800552e <HAL_RCC_OscConfig+0x32a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	d10c      	bne.n	8005516 <HAL_RCC_OscConfig+0x312>
 80054fc:	4b77      	ldr	r3, [pc, #476]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	4a76      	ldr	r2, [pc, #472]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005502:	f043 0304 	orr.w	r3, r3, #4
 8005506:	6713      	str	r3, [r2, #112]	; 0x70
 8005508:	4b74      	ldr	r3, [pc, #464]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a73      	ldr	r2, [pc, #460]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
 8005514:	e00b      	b.n	800552e <HAL_RCC_OscConfig+0x32a>
 8005516:	4b71      	ldr	r3, [pc, #452]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a70      	ldr	r2, [pc, #448]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	; 0x70
 8005522:	4b6e      	ldr	r3, [pc, #440]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	4a6d      	ldr	r2, [pc, #436]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005528:	f023 0304 	bic.w	r3, r3, #4
 800552c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d015      	beq.n	8005562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005536:	f7fe fa59 	bl	80039ec <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553c:	e00a      	b.n	8005554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fe fa55 	bl	80039ec <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0bc      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005554:	4b61      	ldr	r3, [pc, #388]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0ee      	beq.n	800553e <HAL_RCC_OscConfig+0x33a>
 8005560:	e014      	b.n	800558c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005562:	f7fe fa43 	bl	80039ec <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005568:	e00a      	b.n	8005580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800556a:	f7fe fa3f 	bl	80039ec <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f241 3288 	movw	r2, #5000	; 0x1388
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e0a6      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005580:	4b56      	ldr	r3, [pc, #344]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ee      	bne.n	800556a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005592:	4b52      	ldr	r3, [pc, #328]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	4a51      	ldr	r2, [pc, #324]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8092 	beq.w	80056cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a8:	4b4c      	ldr	r3, [pc, #304]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d05c      	beq.n	800566e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d141      	bne.n	8005640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055bc:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <HAL_RCC_OscConfig+0x4dc>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c2:	f7fe fa13 	bl	80039ec <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ca:	f7fe fa0f 	bl	80039ec <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e078      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055dc:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	019b      	lsls	r3, r3, #6
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	3b01      	subs	r3, #1
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	061b      	lsls	r3, r3, #24
 800560c:	4933      	ldr	r1, [pc, #204]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005612:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <HAL_RCC_OscConfig+0x4dc>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fe f9e8 	bl	80039ec <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005620:	f7fe f9e4 	bl	80039ec <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e04d      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x41c>
 800563e:	e045      	b.n	80056cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005640:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <HAL_RCC_OscConfig+0x4dc>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005646:	f7fe f9d1 	bl	80039ec <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564e:	f7fe f9cd 	bl	80039ec <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e036      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005660:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x44a>
 800566c:	e02e      	b.n	80056cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e029      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800567a:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_RCC_OscConfig+0x4d8>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	429a      	cmp	r2, r3
 800568c:	d11c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d115      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056a2:	4013      	ands	r3, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d106      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40007000 	.word	0x40007000
 80056dc:	40023800 	.word	0x40023800
 80056e0:	42470060 	.word	0x42470060

080056e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0cc      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b68      	ldr	r3, [pc, #416]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d90c      	bls.n	8005720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b65      	ldr	r3, [pc, #404]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b63      	ldr	r3, [pc, #396]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0b8      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005738:	4b59      	ldr	r3, [pc, #356]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4a58      	ldr	r2, [pc, #352]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005750:	4b53      	ldr	r3, [pc, #332]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800575a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800575c:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	494d      	ldr	r1, [pc, #308]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	4313      	orrs	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d044      	beq.n	8005804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d107      	bne.n	8005792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d119      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07f      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d003      	beq.n	80057a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d107      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a2:	4b3f      	ldr	r3, [pc, #252]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e06f      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e067      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 0203 	bic.w	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4934      	ldr	r1, [pc, #208]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d4:	f7fe f90a 	bl	80039ec <HAL_GetTick>
 80057d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057dc:	f7fe f906 	bl	80039ec <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e04f      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 020c 	and.w	r2, r3, #12
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	429a      	cmp	r2, r3
 8005802:	d1eb      	bne.n	80057dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d20c      	bcs.n	800582c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b22      	ldr	r3, [pc, #136]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e032      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4916      	ldr	r1, [pc, #88]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	490e      	ldr	r1, [pc, #56]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800586a:	f000 f821 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 800586e:	4602      	mov	r2, r0
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	490a      	ldr	r1, [pc, #40]	; (80058a4 <HAL_RCC_ClockConfig+0x1c0>)
 800587c:	5ccb      	ldrb	r3, [r1, r3]
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCC_ClockConfig+0x1c8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd fcfa 	bl	8003284 <HAL_InitTick>

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40023c00 	.word	0x40023c00
 80058a0:	40023800 	.word	0x40023800
 80058a4:	080074f8 	.word	0x080074f8
 80058a8:	20000028 	.word	0x20000028
 80058ac:	2000002c 	.word	0x2000002c

080058b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b0:	b5b0      	push	{r4, r5, r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058b6:	2100      	movs	r1, #0
 80058b8:	6079      	str	r1, [r7, #4]
 80058ba:	2100      	movs	r1, #0
 80058bc:	60f9      	str	r1, [r7, #12]
 80058be:	2100      	movs	r1, #0
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058c2:	2100      	movs	r1, #0
 80058c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c6:	4952      	ldr	r1, [pc, #328]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x160>)
 80058c8:	6889      	ldr	r1, [r1, #8]
 80058ca:	f001 010c 	and.w	r1, r1, #12
 80058ce:	2908      	cmp	r1, #8
 80058d0:	d00d      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x3e>
 80058d2:	2908      	cmp	r1, #8
 80058d4:	f200 8094 	bhi.w	8005a00 <HAL_RCC_GetSysClockFreq+0x150>
 80058d8:	2900      	cmp	r1, #0
 80058da:	d002      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x32>
 80058dc:	2904      	cmp	r1, #4
 80058de:	d003      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x38>
 80058e0:	e08e      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e2:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x164>)
 80058e4:	60bb      	str	r3, [r7, #8]
       break;
 80058e6:	e08e      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e8:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x168>)
 80058ea:	60bb      	str	r3, [r7, #8]
      break;
 80058ec:	e08b      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ee:	4948      	ldr	r1, [pc, #288]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x160>)
 80058f0:	6849      	ldr	r1, [r1, #4]
 80058f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80058f6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f8:	4945      	ldr	r1, [pc, #276]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x160>)
 80058fa:	6849      	ldr	r1, [r1, #4]
 80058fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005900:	2900      	cmp	r1, #0
 8005902:	d024      	beq.n	800594e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005904:	4942      	ldr	r1, [pc, #264]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005906:	6849      	ldr	r1, [r1, #4]
 8005908:	0989      	lsrs	r1, r1, #6
 800590a:	4608      	mov	r0, r1
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005914:	f04f 0500 	mov.w	r5, #0
 8005918:	ea00 0204 	and.w	r2, r0, r4
 800591c:	ea01 0305 	and.w	r3, r1, r5
 8005920:	493d      	ldr	r1, [pc, #244]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x168>)
 8005922:	fb01 f003 	mul.w	r0, r1, r3
 8005926:	2100      	movs	r1, #0
 8005928:	fb01 f102 	mul.w	r1, r1, r2
 800592c:	1844      	adds	r4, r0, r1
 800592e:	493a      	ldr	r1, [pc, #232]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x168>)
 8005930:	fba2 0101 	umull	r0, r1, r2, r1
 8005934:	1863      	adds	r3, r4, r1
 8005936:	4619      	mov	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	461a      	mov	r2, r3
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	f7fa fc48 	bl	80001d4 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4613      	mov	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e04a      	b.n	80059e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800594e:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x160>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	099b      	lsrs	r3, r3, #6
 8005954:	461a      	mov	r2, r3
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	ea02 0400 	and.w	r4, r2, r0
 8005966:	ea03 0501 	and.w	r5, r3, r1
 800596a:	4620      	mov	r0, r4
 800596c:	4629      	mov	r1, r5
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	014b      	lsls	r3, r1, #5
 8005978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800597c:	0142      	lsls	r2, r0, #5
 800597e:	4610      	mov	r0, r2
 8005980:	4619      	mov	r1, r3
 8005982:	1b00      	subs	r0, r0, r4
 8005984:	eb61 0105 	sbc.w	r1, r1, r5
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	018b      	lsls	r3, r1, #6
 8005992:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005996:	0182      	lsls	r2, r0, #6
 8005998:	1a12      	subs	r2, r2, r0
 800599a:	eb63 0301 	sbc.w	r3, r3, r1
 800599e:	f04f 0000 	mov.w	r0, #0
 80059a2:	f04f 0100 	mov.w	r1, #0
 80059a6:	00d9      	lsls	r1, r3, #3
 80059a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ac:	00d0      	lsls	r0, r2, #3
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	1912      	adds	r2, r2, r4
 80059b4:	eb45 0303 	adc.w	r3, r5, r3
 80059b8:	f04f 0000 	mov.w	r0, #0
 80059bc:	f04f 0100 	mov.w	r1, #0
 80059c0:	0299      	lsls	r1, r3, #10
 80059c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80059c6:	0290      	lsls	r0, r2, #10
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4610      	mov	r0, r2
 80059ce:	4619      	mov	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	f7fa fbfc 	bl	80001d4 <__aeabi_uldivmod>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4613      	mov	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x160>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	3301      	adds	r3, #1
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	60bb      	str	r3, [r7, #8]
      break;
 80059fe:	e002      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a02:	60bb      	str	r3, [r7, #8]
      break;
 8005a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a06:	68bb      	ldr	r3, [r7, #8]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	017d7840 	.word	0x017d7840

08005a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000028 	.word	0x20000028

08005a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a38:	f7ff fff0 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0a9b      	lsrs	r3, r3, #10
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	; (8005a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	08007508 	.word	0x08007508

08005a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a60:	f7ff ffdc 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	0b5b      	lsrs	r3, r3, #13
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4903      	ldr	r1, [pc, #12]	; (8005a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	08007508 	.word	0x08007508

08005a84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	220f      	movs	r2, #15
 8005a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0203 	and.w	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	08db      	lsrs	r3, r3, #3
 8005abe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ac6:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <HAL_RCC_GetClockConfig+0x60>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	601a      	str	r2, [r3, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40023c00 	.word	0x40023c00

08005ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e056      	b.n	8005ba8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fd fa61 	bl	8002fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	ea42 0103 	orr.w	r1, r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	0c1b      	lsrs	r3, r3, #16
 8005b78:	f003 0104 	and.w	r1, r3, #4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	; 0x30
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x26>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e18a      	b.n	8005eec <HAL_SPI_TransmitReceive+0x33c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bde:	f7fd ff05 	bl	80039ec <HAL_GetTick>
 8005be2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d00f      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x70>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c06:	d107      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x68>
 8005c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d003      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c1e:	e15b      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x82>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x82>
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c38:	e14e      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d003      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2205      	movs	r2, #5
 8005c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	887a      	ldrh	r2, [r7, #2]
 8005c76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d007      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d178      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x10a>
 8005cb4:	8b7b      	ldrh	r3, [r7, #26]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d166      	bne.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cde:	e053      	b.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d11b      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x176>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x176>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d113      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d119      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x1b8>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d014      	beq.n	8005d68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d68:	f7fd fe40 	bl	80039ec <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d807      	bhi.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d003      	beq.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d86:	e0a7      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1a6      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x130>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1a1      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x130>
 8005d9c:	e07c      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_SPI_TransmitReceive+0x1fc>
 8005da6:	8b7b      	ldrh	r3, [r7, #26]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d16b      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd2:	e057      	b.n	8005e84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d11c      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x26c>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x26c>
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d114      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d119      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x2ae>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d014      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e5e:	f7fd fdc5 	bl	80039ec <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d803      	bhi.n	8005e76 <HAL_SPI_TransmitReceive+0x2c6>
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d102      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x2cc>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e82:	e029      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1a2      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x224>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d19d      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9e1 	bl	8006264 <SPI_EndRxTxTransaction>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d006      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005eb4:	e010      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	e000      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3730      	adds	r7, #48	; 0x30
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_SPI_Transmit_DMA+0x20>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e093      	b.n	800603c <HAL_SPI_Transmit_DMA+0x148>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d002      	beq.n	8005f2e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f2c:	e081      	b.n	8006032 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_SPI_Transmit_DMA+0x46>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f3e:	e078      	b.n	8006032 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2203      	movs	r2, #3
 8005f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f86:	d107      	bne.n	8005f98 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9c:	4a29      	ldr	r2, [pc, #164]	; (8006044 <HAL_SPI_Transmit_DMA+0x150>)
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <HAL_SPI_Transmit_DMA+0x154>)
 8005fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fac:	4a27      	ldr	r2, [pc, #156]	; (800604c <HAL_SPI_Transmit_DMA+0x158>)
 8005fae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fd0:	f7fe fb40 	bl	8004654 <HAL_DMA_Start_IT>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f043 0210 	orr.w	r2, r3, #16
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ff2:	e01e      	b.n	8006032 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d007      	beq.n	8006012 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0220 	orr.w	r2, r2, #32
 8006020:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0202 	orr.w	r2, r2, #2
 8006030:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	08006135 	.word	0x08006135
 8006048:	0800608d 	.word	0x0800608d
 800604c:	08006151 	.word	0x08006151

08006050 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800609a:	f7fd fca7 	bl	80039ec <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	d03b      	beq.n	8006128 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0220 	bic.w	r2, r2, #32
 80060be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0202 	bic.w	r2, r2, #2
 80060ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	2164      	movs	r1, #100	; 0x64
 80060d4:	6978      	ldr	r0, [r7, #20]
 80060d6:	f000 f8c5 	bl	8006264 <SPI_EndRxTxTransaction>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f7ff ffa9 	bl	8006078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006126:	e002      	b.n	800612e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006128:	6978      	ldr	r0, [r7, #20]
 800612a:	f7ff ff91 	bl	8006050 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff ff8e 	bl	8006064 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0203 	bic.w	r2, r2, #3
 800616c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f043 0210 	orr.w	r2, r3, #16
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff78 	bl	8006078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a0:	e04c      	b.n	800623c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d048      	beq.n	800623c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061aa:	f7fd fc1f 	bl	80039ec <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d902      	bls.n	80061c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d13d      	bne.n	800623c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d8:	d111      	bne.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e2:	d004      	beq.n	80061ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ec:	d107      	bne.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006206:	d10f      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006226:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e00f      	b.n	800625c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4013      	ands	r3, r2
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	429a      	cmp	r2, r3
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	429a      	cmp	r2, r3
 8006258:	d1a3      	bne.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006270:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <SPI_EndRxTxTransaction+0x7c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <SPI_EndRxTxTransaction+0x80>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	0d5b      	lsrs	r3, r3, #21
 800627c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006280:	fb02 f303 	mul.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628e:	d112      	bne.n	80062b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff ff78 	bl	8006190 <SPI_WaitFlagStateUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e00f      	b.n	80062d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	3b01      	subs	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	2b80      	cmp	r3, #128	; 0x80
 80062ce:	d0f2      	beq.n	80062b6 <SPI_EndRxTxTransaction+0x52>
 80062d0:	e000      	b.n	80062d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80062d2:	bf00      	nop
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000028 	.word	0x20000028
 80062e4:	165e9f81 	.word	0x165e9f81

080062e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e01d      	b.n	8006336 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fd f986 	bl	8003620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f000 fa46 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b06      	cmp	r3, #6
 800635e:	d007      	beq.n	8006370 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b06      	cmp	r3, #6
 80063ae:	d007      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d122      	bne.n	800642a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d11b      	bne.n	800642a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f06f 0202 	mvn.w	r2, #2
 80063fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f9b2 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006416:	e005      	b.n	8006424 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f9a4 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f9b5 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b04      	cmp	r3, #4
 8006436:	d122      	bne.n	800647e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d11b      	bne.n	800647e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0204 	mvn.w	r2, #4
 800644e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f988 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 800646a:	e005      	b.n	8006478 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f97a 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f98b 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b08      	cmp	r3, #8
 800648a:	d122      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d11b      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f06f 0208 	mvn.w	r2, #8
 80064a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f95e 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 80064be:	e005      	b.n	80064cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f950 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f961 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d122      	bne.n	8006526 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d11b      	bne.n	8006526 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f06f 0210 	mvn.w	r2, #16
 80064f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2208      	movs	r2, #8
 80064fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f934 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006512:	e005      	b.n	8006520 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f926 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f937 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d10e      	bne.n	8006552 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f06f 0201 	mvn.w	r2, #1
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fc fcc7 	bl	8002ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d10e      	bne.n	800657e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d107      	bne.n	800657e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 faaf 	bl	8006adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d10e      	bne.n	80065aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d107      	bne.n	80065aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f8fc 	bl	80067a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d10e      	bne.n	80065d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d107      	bne.n	80065d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f06f 0220 	mvn.w	r2, #32
 80065ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa79 	bl	8006ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_ConfigClockSource+0x18>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e0b3      	b.n	800675e <HAL_TIM_ConfigClockSource+0x180>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006614:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	d03e      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xd0>
 8006630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006634:	f200 8087 	bhi.w	8006746 <HAL_TIM_ConfigClockSource+0x168>
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663c:	f000 8085 	beq.w	800674a <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d87f      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 8006646:	2b70      	cmp	r3, #112	; 0x70
 8006648:	d01a      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0xa2>
 800664a:	2b70      	cmp	r3, #112	; 0x70
 800664c:	d87b      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 800664e:	2b60      	cmp	r3, #96	; 0x60
 8006650:	d050      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x116>
 8006652:	2b60      	cmp	r3, #96	; 0x60
 8006654:	d877      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 8006656:	2b50      	cmp	r3, #80	; 0x50
 8006658:	d03c      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0xf6>
 800665a:	2b50      	cmp	r3, #80	; 0x50
 800665c:	d873      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d058      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0x136>
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d86f      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 8006666:	2b30      	cmp	r3, #48	; 0x30
 8006668:	d064      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x156>
 800666a:	2b30      	cmp	r3, #48	; 0x30
 800666c:	d86b      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 800666e:	2b20      	cmp	r3, #32
 8006670:	d060      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x156>
 8006672:	2b20      	cmp	r3, #32
 8006674:	d867      	bhi.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d05c      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x156>
 800667a:	2b10      	cmp	r3, #16
 800667c:	d05a      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800667e:	e062      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f000 f98c 	bl	80069ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
      break;
 80066ac:	e04e      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f000 f975 	bl	80069ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d0:	609a      	str	r2, [r3, #8]
      break;
 80066d2:	e03b      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f000 f8e9 	bl	80068b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2150      	movs	r1, #80	; 0x50
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f942 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 80066f2:	e02b      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	461a      	mov	r2, r3
 8006702:	f000 f908 	bl	8006916 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2160      	movs	r1, #96	; 0x60
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f932 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 8006712:	e01b      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	461a      	mov	r2, r3
 8006722:	f000 f8c9 	bl	80068b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2140      	movs	r1, #64	; 0x40
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f922 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 8006732:	e00b      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4619      	mov	r1, r3
 800673e:	4610      	mov	r0, r2
 8006740:	f000 f919 	bl	8006976 <TIM_ITRx_SetConfig>
      break;
 8006744:	e002      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800674a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a34      	ldr	r2, [pc, #208]	; (800689c <TIM_Base_SetConfig+0xe4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x38>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x38>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a31      	ldr	r2, [pc, #196]	; (80068a0 <TIM_Base_SetConfig+0xe8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x38>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a30      	ldr	r2, [pc, #192]	; (80068a4 <TIM_Base_SetConfig+0xec>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x38>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a2f      	ldr	r2, [pc, #188]	; (80068a8 <TIM_Base_SetConfig+0xf0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a25      	ldr	r2, [pc, #148]	; (800689c <TIM_Base_SetConfig+0xe4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01b      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d017      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <TIM_Base_SetConfig+0xe8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <TIM_Base_SetConfig+0xec>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00f      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <TIM_Base_SetConfig+0xf0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00b      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <TIM_Base_SetConfig+0xf4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d007      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <TIM_Base_SetConfig+0xf8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d003      	beq.n	8006842 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <TIM_Base_SetConfig+0xfc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d108      	bne.n	8006854 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a08      	ldr	r2, [pc, #32]	; (800689c <TIM_Base_SetConfig+0xe4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d103      	bne.n	8006888 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	615a      	str	r2, [r3, #20]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f023 0201 	bic.w	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f023 030a 	bic.w	r3, r3, #10
 80068f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0210 	bic.w	r2, r3, #16
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	031b      	lsls	r3, r3, #12
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	f043 0307 	orr.w	r3, r3, #7
 8006998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	609a      	str	r2, [r3, #8]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	021a      	lsls	r2, r3, #8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e050      	b.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a50:	d013      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10c      	bne.n	8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	40014000 	.word	0x40014000

08006ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e03f      	b.n	8006b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fc fdce 	bl	80036b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	; 0x24
 8006b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f829 	bl	8006b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	b0bd      	sub	sp, #244	; 0xf4
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	68d9      	ldr	r1, [r3, #12]
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	ea40 0301 	orr.w	r3, r0, r1
 8006bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006be4:	f021 010c 	bic.w	r1, r1, #12
 8006be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c06:	6999      	ldr	r1, [r3, #24]
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	ea40 0301 	orr.w	r3, r0, r1
 8006c12:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1e:	f040 81a5 	bne.w	8006f6c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4bcd      	ldr	r3, [pc, #820]	; (8006f60 <UART_SetConfig+0x3d4>)
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d006      	beq.n	8006c3c <UART_SetConfig+0xb0>
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4bcb      	ldr	r3, [pc, #812]	; (8006f64 <UART_SetConfig+0x3d8>)
 8006c36:	429a      	cmp	r2, r3
 8006c38:	f040 80cb 	bne.w	8006dd2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fe ff0e 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8006c40:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c48:	461c      	mov	r4, r3
 8006c4a:	f04f 0500 	mov.w	r5, #0
 8006c4e:	4622      	mov	r2, r4
 8006c50:	462b      	mov	r3, r5
 8006c52:	1891      	adds	r1, r2, r2
 8006c54:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c5e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006c62:	1912      	adds	r2, r2, r4
 8006c64:	eb45 0303 	adc.w	r3, r5, r3
 8006c68:	f04f 0000 	mov.w	r0, #0
 8006c6c:	f04f 0100 	mov.w	r1, #0
 8006c70:	00d9      	lsls	r1, r3, #3
 8006c72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c76:	00d0      	lsls	r0, r2, #3
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	1911      	adds	r1, r2, r4
 8006c7e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006c82:	416b      	adcs	r3, r5
 8006c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	1891      	adds	r1, r2, r2
 8006c96:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006c9a:	415b      	adcs	r3, r3
 8006c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ca0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006ca4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006ca8:	f7f9 fa94 	bl	80001d4 <__aeabi_uldivmod>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4bad      	ldr	r3, [pc, #692]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	011e      	lsls	r6, r3, #4
 8006cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cbe:	461c      	mov	r4, r3
 8006cc0:	f04f 0500 	mov.w	r5, #0
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	1891      	adds	r1, r2, r2
 8006cca:	67b9      	str	r1, [r7, #120]	; 0x78
 8006ccc:	415b      	adcs	r3, r3
 8006cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006cd4:	1912      	adds	r2, r2, r4
 8006cd6:	eb45 0303 	adc.w	r3, r5, r3
 8006cda:	f04f 0000 	mov.w	r0, #0
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	00d9      	lsls	r1, r3, #3
 8006ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ce8:	00d0      	lsls	r0, r2, #3
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	1911      	adds	r1, r2, r4
 8006cf0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006cf4:	416b      	adcs	r3, r5
 8006cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	461a      	mov	r2, r3
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	1891      	adds	r1, r2, r2
 8006d08:	6739      	str	r1, [r7, #112]	; 0x70
 8006d0a:	415b      	adcs	r3, r3
 8006d0c:	677b      	str	r3, [r7, #116]	; 0x74
 8006d0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006d12:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006d16:	f7f9 fa5d 	bl	80001d4 <__aeabi_uldivmod>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4b92      	ldr	r3, [pc, #584]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006d20:	fba3 1302 	umull	r1, r3, r3, r2
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	2164      	movs	r1, #100	; 0x64
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	3332      	adds	r3, #50	; 0x32
 8006d32:	4a8d      	ldr	r2, [pc, #564]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d40:	441e      	add	r6, r3
 8006d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d46:	4618      	mov	r0, r3
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	1894      	adds	r4, r2, r2
 8006d52:	66bc      	str	r4, [r7, #104]	; 0x68
 8006d54:	415b      	adcs	r3, r3
 8006d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006d5c:	1812      	adds	r2, r2, r0
 8006d5e:	eb41 0303 	adc.w	r3, r1, r3
 8006d62:	f04f 0400 	mov.w	r4, #0
 8006d66:	f04f 0500 	mov.w	r5, #0
 8006d6a:	00dd      	lsls	r5, r3, #3
 8006d6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d70:	00d4      	lsls	r4, r2, #3
 8006d72:	4622      	mov	r2, r4
 8006d74:	462b      	mov	r3, r5
 8006d76:	1814      	adds	r4, r2, r0
 8006d78:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006d7c:	414b      	adcs	r3, r1
 8006d7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	1891      	adds	r1, r2, r2
 8006d90:	6639      	str	r1, [r7, #96]	; 0x60
 8006d92:	415b      	adcs	r3, r3
 8006d94:	667b      	str	r3, [r7, #100]	; 0x64
 8006d96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d9e:	f7f9 fa19 	bl	80001d4 <__aeabi_uldivmod>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4b70      	ldr	r3, [pc, #448]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	; 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3332      	adds	r3, #50	; 0x32
 8006dba:	4a6b      	ldr	r2, [pc, #428]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f003 0207 	and.w	r2, r3, #7
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4432      	add	r2, r6
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	e26d      	b.n	80072ae <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fe fe2f 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8006dd6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dde:	461c      	mov	r4, r3
 8006de0:	f04f 0500 	mov.w	r5, #0
 8006de4:	4622      	mov	r2, r4
 8006de6:	462b      	mov	r3, r5
 8006de8:	1891      	adds	r1, r2, r2
 8006dea:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dec:	415b      	adcs	r3, r3
 8006dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006df0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006df4:	1912      	adds	r2, r2, r4
 8006df6:	eb45 0303 	adc.w	r3, r5, r3
 8006dfa:	f04f 0000 	mov.w	r0, #0
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	00d9      	lsls	r1, r3, #3
 8006e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e08:	00d0      	lsls	r0, r2, #3
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	1911      	adds	r1, r2, r4
 8006e10:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006e14:	416b      	adcs	r3, r5
 8006e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	1891      	adds	r1, r2, r2
 8006e28:	6539      	str	r1, [r7, #80]	; 0x50
 8006e2a:	415b      	adcs	r3, r3
 8006e2c:	657b      	str	r3, [r7, #84]	; 0x54
 8006e2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e32:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006e36:	f7f9 f9cd 	bl	80001d4 <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006e40:	fba3 2302 	umull	r2, r3, r3, r2
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	011e      	lsls	r6, r3, #4
 8006e48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e4c:	461c      	mov	r4, r3
 8006e4e:	f04f 0500 	mov.w	r5, #0
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	1891      	adds	r1, r2, r2
 8006e58:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e5a:	415b      	adcs	r3, r3
 8006e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e62:	1912      	adds	r2, r2, r4
 8006e64:	eb45 0303 	adc.w	r3, r5, r3
 8006e68:	f04f 0000 	mov.w	r0, #0
 8006e6c:	f04f 0100 	mov.w	r1, #0
 8006e70:	00d9      	lsls	r1, r3, #3
 8006e72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e76:	00d0      	lsls	r0, r2, #3
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	1911      	adds	r1, r2, r4
 8006e7e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006e82:	416b      	adcs	r3, r5
 8006e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	1891      	adds	r1, r2, r2
 8006e96:	6439      	str	r1, [r7, #64]	; 0x40
 8006e98:	415b      	adcs	r3, r3
 8006e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ea0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006ea4:	f7f9 f996 	bl	80001d4 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4b2e      	ldr	r3, [pc, #184]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006eae:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	2164      	movs	r1, #100	; 0x64
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	3332      	adds	r3, #50	; 0x32
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ece:	441e      	add	r6, r3
 8006ed0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	1894      	adds	r4, r2, r2
 8006ee0:	63bc      	str	r4, [r7, #56]	; 0x38
 8006ee2:	415b      	adcs	r3, r3
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006eea:	1812      	adds	r2, r2, r0
 8006eec:	eb41 0303 	adc.w	r3, r1, r3
 8006ef0:	f04f 0400 	mov.w	r4, #0
 8006ef4:	f04f 0500 	mov.w	r5, #0
 8006ef8:	00dd      	lsls	r5, r3, #3
 8006efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006efe:	00d4      	lsls	r4, r2, #3
 8006f00:	4622      	mov	r2, r4
 8006f02:	462b      	mov	r3, r5
 8006f04:	1814      	adds	r4, r2, r0
 8006f06:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006f0a:	414b      	adcs	r3, r1
 8006f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	6339      	str	r1, [r7, #48]	; 0x30
 8006f20:	415b      	adcs	r3, r3
 8006f22:	637b      	str	r3, [r7, #52]	; 0x34
 8006f24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f28:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f2c:	f7f9 f952 	bl	80001d4 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006f36:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	2164      	movs	r1, #100	; 0x64
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	3332      	adds	r3, #50	; 0x32
 8006f48:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <UART_SetConfig+0x3dc>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	f003 0207 	and.w	r2, r3, #7
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4432      	add	r2, r6
 8006f5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f5e:	e1a6      	b.n	80072ae <UART_SetConfig+0x722>
 8006f60:	40011000 	.word	0x40011000
 8006f64:	40011400 	.word	0x40011400
 8006f68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4bd1      	ldr	r3, [pc, #836]	; (80072b8 <UART_SetConfig+0x72c>)
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d006      	beq.n	8006f86 <UART_SetConfig+0x3fa>
 8006f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4bcf      	ldr	r3, [pc, #828]	; (80072bc <UART_SetConfig+0x730>)
 8006f80:	429a      	cmp	r2, r3
 8006f82:	f040 80ca 	bne.w	800711a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f86:	f7fe fd69 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8006f8a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f92:	461c      	mov	r4, r3
 8006f94:	f04f 0500 	mov.w	r5, #0
 8006f98:	4622      	mov	r2, r4
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	1891      	adds	r1, r2, r2
 8006f9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fa0:	415b      	adcs	r3, r3
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fa8:	1912      	adds	r2, r2, r4
 8006faa:	eb45 0303 	adc.w	r3, r5, r3
 8006fae:	f04f 0000 	mov.w	r0, #0
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	00d9      	lsls	r1, r3, #3
 8006fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fbc:	00d0      	lsls	r0, r2, #3
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	eb12 0a04 	adds.w	sl, r2, r4
 8006fc6:	eb43 0b05 	adc.w	fp, r3, r5
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f04f 0100 	mov.w	r1, #0
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	008b      	lsls	r3, r1, #2
 8006fe0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fe4:	0082      	lsls	r2, r0, #2
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	4659      	mov	r1, fp
 8006fea:	f7f9 f8f3 	bl	80001d4 <__aeabi_uldivmod>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4bb3      	ldr	r3, [pc, #716]	; (80072c0 <UART_SetConfig+0x734>)
 8006ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	011e      	lsls	r6, r3, #4
 8006ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007000:	4618      	mov	r0, r3
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	1894      	adds	r4, r2, r2
 800700c:	623c      	str	r4, [r7, #32]
 800700e:	415b      	adcs	r3, r3
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
 8007012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007016:	1812      	adds	r2, r2, r0
 8007018:	eb41 0303 	adc.w	r3, r1, r3
 800701c:	f04f 0400 	mov.w	r4, #0
 8007020:	f04f 0500 	mov.w	r5, #0
 8007024:	00dd      	lsls	r5, r3, #3
 8007026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800702a:	00d4      	lsls	r4, r2, #3
 800702c:	4622      	mov	r2, r4
 800702e:	462b      	mov	r3, r5
 8007030:	1814      	adds	r4, r2, r0
 8007032:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007036:	414b      	adcs	r3, r1
 8007038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4618      	mov	r0, r3
 8007044:	f04f 0100 	mov.w	r1, #0
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	008b      	lsls	r3, r1, #2
 8007052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007056:	0082      	lsls	r2, r0, #2
 8007058:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800705c:	f7f9 f8ba 	bl	80001d4 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4b96      	ldr	r3, [pc, #600]	; (80072c0 <UART_SetConfig+0x734>)
 8007066:	fba3 1302 	umull	r1, r3, r3, r2
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	2164      	movs	r1, #100	; 0x64
 800706e:	fb01 f303 	mul.w	r3, r1, r3
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	3332      	adds	r3, #50	; 0x32
 8007078:	4a91      	ldr	r2, [pc, #580]	; (80072c0 <UART_SetConfig+0x734>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007084:	441e      	add	r6, r3
 8007086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800708a:	4618      	mov	r0, r3
 800708c:	f04f 0100 	mov.w	r1, #0
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	1894      	adds	r4, r2, r2
 8007096:	61bc      	str	r4, [r7, #24]
 8007098:	415b      	adcs	r3, r3
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a0:	1812      	adds	r2, r2, r0
 80070a2:	eb41 0303 	adc.w	r3, r1, r3
 80070a6:	f04f 0400 	mov.w	r4, #0
 80070aa:	f04f 0500 	mov.w	r5, #0
 80070ae:	00dd      	lsls	r5, r3, #3
 80070b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070b4:	00d4      	lsls	r4, r2, #3
 80070b6:	4622      	mov	r2, r4
 80070b8:	462b      	mov	r3, r5
 80070ba:	1814      	adds	r4, r2, r0
 80070bc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80070c0:	414b      	adcs	r3, r1
 80070c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	008b      	lsls	r3, r1, #2
 80070dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070e0:	0082      	lsls	r2, r0, #2
 80070e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80070e6:	f7f9 f875 	bl	80001d4 <__aeabi_uldivmod>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4b74      	ldr	r3, [pc, #464]	; (80072c0 <UART_SetConfig+0x734>)
 80070f0:	fba3 1302 	umull	r1, r3, r3, r2
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	2164      	movs	r1, #100	; 0x64
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	3332      	adds	r3, #50	; 0x32
 8007102:	4a6f      	ldr	r2, [pc, #444]	; (80072c0 <UART_SetConfig+0x734>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f003 020f 	and.w	r2, r3, #15
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4432      	add	r2, r6
 8007116:	609a      	str	r2, [r3, #8]
 8007118:	e0c9      	b.n	80072ae <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800711a:	f7fe fc8b 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 800711e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007122:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007126:	461c      	mov	r4, r3
 8007128:	f04f 0500 	mov.w	r5, #0
 800712c:	4622      	mov	r2, r4
 800712e:	462b      	mov	r3, r5
 8007130:	1891      	adds	r1, r2, r2
 8007132:	6139      	str	r1, [r7, #16]
 8007134:	415b      	adcs	r3, r3
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800713c:	1912      	adds	r2, r2, r4
 800713e:	eb45 0303 	adc.w	r3, r5, r3
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	00d9      	lsls	r1, r3, #3
 800714c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007150:	00d0      	lsls	r0, r2, #3
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	eb12 0804 	adds.w	r8, r2, r4
 800715a:	eb43 0905 	adc.w	r9, r3, r5
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4618      	mov	r0, r3
 8007166:	f04f 0100 	mov.w	r1, #0
 800716a:	f04f 0200 	mov.w	r2, #0
 800716e:	f04f 0300 	mov.w	r3, #0
 8007172:	008b      	lsls	r3, r1, #2
 8007174:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007178:	0082      	lsls	r2, r0, #2
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	f7f9 f829 	bl	80001d4 <__aeabi_uldivmod>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <UART_SetConfig+0x734>)
 8007188:	fba3 2302 	umull	r2, r3, r3, r2
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	011e      	lsls	r6, r3, #4
 8007190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007194:	4618      	mov	r0, r3
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	1894      	adds	r4, r2, r2
 80071a0:	60bc      	str	r4, [r7, #8]
 80071a2:	415b      	adcs	r3, r3
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071aa:	1812      	adds	r2, r2, r0
 80071ac:	eb41 0303 	adc.w	r3, r1, r3
 80071b0:	f04f 0400 	mov.w	r4, #0
 80071b4:	f04f 0500 	mov.w	r5, #0
 80071b8:	00dd      	lsls	r5, r3, #3
 80071ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071be:	00d4      	lsls	r4, r2, #3
 80071c0:	4622      	mov	r2, r4
 80071c2:	462b      	mov	r3, r5
 80071c4:	1814      	adds	r4, r2, r0
 80071c6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80071ca:	414b      	adcs	r3, r1
 80071cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f04f 0100 	mov.w	r1, #0
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	008b      	lsls	r3, r1, #2
 80071e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071ea:	0082      	lsls	r2, r0, #2
 80071ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071f0:	f7f8 fff0 	bl	80001d4 <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4b31      	ldr	r3, [pc, #196]	; (80072c0 <UART_SetConfig+0x734>)
 80071fa:	fba3 1302 	umull	r1, r3, r3, r2
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	2164      	movs	r1, #100	; 0x64
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	3332      	adds	r3, #50	; 0x32
 800720c:	4a2c      	ldr	r2, [pc, #176]	; (80072c0 <UART_SetConfig+0x734>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007218:	441e      	add	r6, r3
 800721a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800721e:	4618      	mov	r0, r3
 8007220:	f04f 0100 	mov.w	r1, #0
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	1894      	adds	r4, r2, r2
 800722a:	603c      	str	r4, [r7, #0]
 800722c:	415b      	adcs	r3, r3
 800722e:	607b      	str	r3, [r7, #4]
 8007230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007234:	1812      	adds	r2, r2, r0
 8007236:	eb41 0303 	adc.w	r3, r1, r3
 800723a:	f04f 0400 	mov.w	r4, #0
 800723e:	f04f 0500 	mov.w	r5, #0
 8007242:	00dd      	lsls	r5, r3, #3
 8007244:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007248:	00d4      	lsls	r4, r2, #3
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	1814      	adds	r4, r2, r0
 8007250:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007254:	414b      	adcs	r3, r1
 8007256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	f04f 0100 	mov.w	r1, #0
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	008b      	lsls	r3, r1, #2
 8007270:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007274:	0082      	lsls	r2, r0, #2
 8007276:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800727a:	f7f8 ffab 	bl	80001d4 <__aeabi_uldivmod>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <UART_SetConfig+0x734>)
 8007284:	fba3 1302 	umull	r1, r3, r3, r2
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	2164      	movs	r1, #100	; 0x64
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	3332      	adds	r3, #50	; 0x32
 8007296:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <UART_SetConfig+0x734>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	f003 020f 	and.w	r2, r3, #15
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4432      	add	r2, r6
 80072aa:	609a      	str	r2, [r3, #8]
}
 80072ac:	e7ff      	b.n	80072ae <UART_SetConfig+0x722>
 80072ae:	bf00      	nop
 80072b0:	37f4      	adds	r7, #244	; 0xf4
 80072b2:	46bd      	mov	sp, r7
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	40011000 	.word	0x40011000
 80072bc:	40011400 	.word	0x40011400
 80072c0:	51eb851f 	.word	0x51eb851f

080072c4 <__errno>:
 80072c4:	4b01      	ldr	r3, [pc, #4]	; (80072cc <__errno+0x8>)
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000034 	.word	0x20000034

080072d0 <__libc_init_array>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	4d0d      	ldr	r5, [pc, #52]	; (8007308 <__libc_init_array+0x38>)
 80072d4:	4c0d      	ldr	r4, [pc, #52]	; (800730c <__libc_init_array+0x3c>)
 80072d6:	1b64      	subs	r4, r4, r5
 80072d8:	10a4      	asrs	r4, r4, #2
 80072da:	2600      	movs	r6, #0
 80072dc:	42a6      	cmp	r6, r4
 80072de:	d109      	bne.n	80072f4 <__libc_init_array+0x24>
 80072e0:	4d0b      	ldr	r5, [pc, #44]	; (8007310 <__libc_init_array+0x40>)
 80072e2:	4c0c      	ldr	r4, [pc, #48]	; (8007314 <__libc_init_array+0x44>)
 80072e4:	f000 f8f8 	bl	80074d8 <_init>
 80072e8:	1b64      	subs	r4, r4, r5
 80072ea:	10a4      	asrs	r4, r4, #2
 80072ec:	2600      	movs	r6, #0
 80072ee:	42a6      	cmp	r6, r4
 80072f0:	d105      	bne.n	80072fe <__libc_init_array+0x2e>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f8:	4798      	blx	r3
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7ee      	b.n	80072dc <__libc_init_array+0xc>
 80072fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007302:	4798      	blx	r3
 8007304:	3601      	adds	r6, #1
 8007306:	e7f2      	b.n	80072ee <__libc_init_array+0x1e>
 8007308:	08007520 	.word	0x08007520
 800730c:	08007520 	.word	0x08007520
 8007310:	08007520 	.word	0x08007520
 8007314:	08007524 	.word	0x08007524

08007318 <malloc>:
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <malloc+0xc>)
 800731a:	4601      	mov	r1, r0
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	f000 b863 	b.w	80073e8 <_malloc_r>
 8007322:	bf00      	nop
 8007324:	20000034 	.word	0x20000034

08007328 <free>:
 8007328:	4b02      	ldr	r3, [pc, #8]	; (8007334 <free+0xc>)
 800732a:	4601      	mov	r1, r0
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	f000 b80b 	b.w	8007348 <_free_r>
 8007332:	bf00      	nop
 8007334:	20000034 	.word	0x20000034

08007338 <memset>:
 8007338:	4402      	add	r2, r0
 800733a:	4603      	mov	r3, r0
 800733c:	4293      	cmp	r3, r2
 800733e:	d100      	bne.n	8007342 <memset+0xa>
 8007340:	4770      	bx	lr
 8007342:	f803 1b01 	strb.w	r1, [r3], #1
 8007346:	e7f9      	b.n	800733c <memset+0x4>

08007348 <_free_r>:
 8007348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800734a:	2900      	cmp	r1, #0
 800734c:	d048      	beq.n	80073e0 <_free_r+0x98>
 800734e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007352:	9001      	str	r0, [sp, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f1a1 0404 	sub.w	r4, r1, #4
 800735a:	bfb8      	it	lt
 800735c:	18e4      	addlt	r4, r4, r3
 800735e:	f000 f8ad 	bl	80074bc <__malloc_lock>
 8007362:	4a20      	ldr	r2, [pc, #128]	; (80073e4 <_free_r+0x9c>)
 8007364:	9801      	ldr	r0, [sp, #4]
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	4615      	mov	r5, r2
 800736a:	b933      	cbnz	r3, 800737a <_free_r+0x32>
 800736c:	6063      	str	r3, [r4, #4]
 800736e:	6014      	str	r4, [r2, #0]
 8007370:	b003      	add	sp, #12
 8007372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007376:	f000 b8a7 	b.w	80074c8 <__malloc_unlock>
 800737a:	42a3      	cmp	r3, r4
 800737c:	d90b      	bls.n	8007396 <_free_r+0x4e>
 800737e:	6821      	ldr	r1, [r4, #0]
 8007380:	1862      	adds	r2, r4, r1
 8007382:	4293      	cmp	r3, r2
 8007384:	bf04      	itt	eq
 8007386:	681a      	ldreq	r2, [r3, #0]
 8007388:	685b      	ldreq	r3, [r3, #4]
 800738a:	6063      	str	r3, [r4, #4]
 800738c:	bf04      	itt	eq
 800738e:	1852      	addeq	r2, r2, r1
 8007390:	6022      	streq	r2, [r4, #0]
 8007392:	602c      	str	r4, [r5, #0]
 8007394:	e7ec      	b.n	8007370 <_free_r+0x28>
 8007396:	461a      	mov	r2, r3
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	b10b      	cbz	r3, 80073a0 <_free_r+0x58>
 800739c:	42a3      	cmp	r3, r4
 800739e:	d9fa      	bls.n	8007396 <_free_r+0x4e>
 80073a0:	6811      	ldr	r1, [r2, #0]
 80073a2:	1855      	adds	r5, r2, r1
 80073a4:	42a5      	cmp	r5, r4
 80073a6:	d10b      	bne.n	80073c0 <_free_r+0x78>
 80073a8:	6824      	ldr	r4, [r4, #0]
 80073aa:	4421      	add	r1, r4
 80073ac:	1854      	adds	r4, r2, r1
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	6011      	str	r1, [r2, #0]
 80073b2:	d1dd      	bne.n	8007370 <_free_r+0x28>
 80073b4:	681c      	ldr	r4, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	6053      	str	r3, [r2, #4]
 80073ba:	4421      	add	r1, r4
 80073bc:	6011      	str	r1, [r2, #0]
 80073be:	e7d7      	b.n	8007370 <_free_r+0x28>
 80073c0:	d902      	bls.n	80073c8 <_free_r+0x80>
 80073c2:	230c      	movs	r3, #12
 80073c4:	6003      	str	r3, [r0, #0]
 80073c6:	e7d3      	b.n	8007370 <_free_r+0x28>
 80073c8:	6825      	ldr	r5, [r4, #0]
 80073ca:	1961      	adds	r1, r4, r5
 80073cc:	428b      	cmp	r3, r1
 80073ce:	bf04      	itt	eq
 80073d0:	6819      	ldreq	r1, [r3, #0]
 80073d2:	685b      	ldreq	r3, [r3, #4]
 80073d4:	6063      	str	r3, [r4, #4]
 80073d6:	bf04      	itt	eq
 80073d8:	1949      	addeq	r1, r1, r5
 80073da:	6021      	streq	r1, [r4, #0]
 80073dc:	6054      	str	r4, [r2, #4]
 80073de:	e7c7      	b.n	8007370 <_free_r+0x28>
 80073e0:	b003      	add	sp, #12
 80073e2:	bd30      	pop	{r4, r5, pc}
 80073e4:	20000804 	.word	0x20000804

080073e8 <_malloc_r>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	1ccd      	adds	r5, r1, #3
 80073ec:	f025 0503 	bic.w	r5, r5, #3
 80073f0:	3508      	adds	r5, #8
 80073f2:	2d0c      	cmp	r5, #12
 80073f4:	bf38      	it	cc
 80073f6:	250c      	movcc	r5, #12
 80073f8:	2d00      	cmp	r5, #0
 80073fa:	4606      	mov	r6, r0
 80073fc:	db01      	blt.n	8007402 <_malloc_r+0x1a>
 80073fe:	42a9      	cmp	r1, r5
 8007400:	d903      	bls.n	800740a <_malloc_r+0x22>
 8007402:	230c      	movs	r3, #12
 8007404:	6033      	str	r3, [r6, #0]
 8007406:	2000      	movs	r0, #0
 8007408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800740a:	f000 f857 	bl	80074bc <__malloc_lock>
 800740e:	4921      	ldr	r1, [pc, #132]	; (8007494 <_malloc_r+0xac>)
 8007410:	680a      	ldr	r2, [r1, #0]
 8007412:	4614      	mov	r4, r2
 8007414:	b99c      	cbnz	r4, 800743e <_malloc_r+0x56>
 8007416:	4f20      	ldr	r7, [pc, #128]	; (8007498 <_malloc_r+0xb0>)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	b923      	cbnz	r3, 8007426 <_malloc_r+0x3e>
 800741c:	4621      	mov	r1, r4
 800741e:	4630      	mov	r0, r6
 8007420:	f000 f83c 	bl	800749c <_sbrk_r>
 8007424:	6038      	str	r0, [r7, #0]
 8007426:	4629      	mov	r1, r5
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f837 	bl	800749c <_sbrk_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	d123      	bne.n	800747a <_malloc_r+0x92>
 8007432:	230c      	movs	r3, #12
 8007434:	6033      	str	r3, [r6, #0]
 8007436:	4630      	mov	r0, r6
 8007438:	f000 f846 	bl	80074c8 <__malloc_unlock>
 800743c:	e7e3      	b.n	8007406 <_malloc_r+0x1e>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	1b5b      	subs	r3, r3, r5
 8007442:	d417      	bmi.n	8007474 <_malloc_r+0x8c>
 8007444:	2b0b      	cmp	r3, #11
 8007446:	d903      	bls.n	8007450 <_malloc_r+0x68>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	441c      	add	r4, r3
 800744c:	6025      	str	r5, [r4, #0]
 800744e:	e004      	b.n	800745a <_malloc_r+0x72>
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	42a2      	cmp	r2, r4
 8007454:	bf0c      	ite	eq
 8007456:	600b      	streq	r3, [r1, #0]
 8007458:	6053      	strne	r3, [r2, #4]
 800745a:	4630      	mov	r0, r6
 800745c:	f000 f834 	bl	80074c8 <__malloc_unlock>
 8007460:	f104 000b 	add.w	r0, r4, #11
 8007464:	1d23      	adds	r3, r4, #4
 8007466:	f020 0007 	bic.w	r0, r0, #7
 800746a:	1ac2      	subs	r2, r0, r3
 800746c:	d0cc      	beq.n	8007408 <_malloc_r+0x20>
 800746e:	1a1b      	subs	r3, r3, r0
 8007470:	50a3      	str	r3, [r4, r2]
 8007472:	e7c9      	b.n	8007408 <_malloc_r+0x20>
 8007474:	4622      	mov	r2, r4
 8007476:	6864      	ldr	r4, [r4, #4]
 8007478:	e7cc      	b.n	8007414 <_malloc_r+0x2c>
 800747a:	1cc4      	adds	r4, r0, #3
 800747c:	f024 0403 	bic.w	r4, r4, #3
 8007480:	42a0      	cmp	r0, r4
 8007482:	d0e3      	beq.n	800744c <_malloc_r+0x64>
 8007484:	1a21      	subs	r1, r4, r0
 8007486:	4630      	mov	r0, r6
 8007488:	f000 f808 	bl	800749c <_sbrk_r>
 800748c:	3001      	adds	r0, #1
 800748e:	d1dd      	bne.n	800744c <_malloc_r+0x64>
 8007490:	e7cf      	b.n	8007432 <_malloc_r+0x4a>
 8007492:	bf00      	nop
 8007494:	20000804 	.word	0x20000804
 8007498:	20000808 	.word	0x20000808

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d06      	ldr	r5, [pc, #24]	; (80074b8 <_sbrk_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fc f828 	bl	80034fc <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20000bc8 	.word	0x20000bc8

080074bc <__malloc_lock>:
 80074bc:	4801      	ldr	r0, [pc, #4]	; (80074c4 <__malloc_lock+0x8>)
 80074be:	f000 b809 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 80074c2:	bf00      	nop
 80074c4:	20000bd0 	.word	0x20000bd0

080074c8 <__malloc_unlock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__malloc_unlock+0x8>)
 80074ca:	f000 b804 	b.w	80074d6 <__retarget_lock_release_recursive>
 80074ce:	bf00      	nop
 80074d0:	20000bd0 	.word	0x20000bd0

080074d4 <__retarget_lock_acquire_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <__retarget_lock_release_recursive>:
 80074d6:	4770      	bx	lr

080074d8 <_init>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr

080074e4 <_fini>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr
